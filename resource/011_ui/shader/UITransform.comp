#version 430

#extension GL_GOOGLE_cpp_style_line_directive : require
//#include <btrlib/Math.glsl>

#define USE_UI 0
#include <UI.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;


//shared mat4 global_mat[128];
void main() 
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_info.m_object_num) {
		return;
	}

	if(index == 0)
	{
		b_work[0].m_position = b_param[0].m_position_local;// + b_param[0].m_position_anime;
		b_work[0].m_size = b_param[0].m_size_local;// + b_param[0].m_size_anime;
		b_work[0].m_color = b_param[0].m_color_local;// + b_param[0].m_color_anime;
	}
	for(int depth=1; depth <= u_info.m_depth_max; depth++)
	{
		if(b_param[index].m_depth == depth)
		{
			barrier();
			memoryBarrierBuffer();

			int parent_index = b_param[index].m_parent_index;
			vec2 pos = b_param[index].m_position_local;
//			pos += b_param[index].m_position_anime;
			pos += b_work[parent_index].m_position;
			vec2 size = b_param[index].m_size_local;
			size += b_param[index].m_size_anime;
			vec4 color = b_param[index].m_color_local;// + b_param[index].m_color_anime;
//			color += b_work[parent_index].m_size;

			b_work[index].m_position = pos;
			b_work[index].m_size = size;
			b_work[index].m_color = color;
			break;
		}
	}

}

