#version 450

#pragma optionNV (unroll none)

//#extension GL_ARB_shading_language_include : require
#extension GL_GOOGLE_cpp_style_line_directive : require
#include </Math.glsl>
#include </MultiModel.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;

layout(std140, binding=0) uniform ModelInfoUniform {
	ModelInfo modelInfo;
};

layout (set = 0, binding = 32) uniform sampler1DArray tMotionData;

layout(std430, binding=8) readonly restrict buffer AnimationInfoBuffer {
	AnimationInfo animInfo[];
};

layout(std430, binding=9) readonly restrict buffer PlayingAnimationBuffer {
	PlayingAnimation playingMotion[];
};

layout(std430, binding=10) restrict buffer NodeLocalTransformBuffer {
	mat4 nodeLocalTransforms[];
};

void main() 
{

	uint index = gl_GlobalInvocationID.x;
	if(index >= modelInfo.nodeNum * modelInfo.instanceAliveNum){ return; }

	uint modelIndex = index / modelInfo.nodeNum;
	PlayingAnimation pm = playingMotion[modelIndex];
	AnimationInfo aInfo = animInfo[pm.playingAnimationNo];
	uint nodeIndex = index%modelInfo.nodeNum;

	mat4 local = mat4(1.);
	vec4 xyzs = texture(tMotionData, vec2(pm.time / aInfo.maxTime, nodeIndex*2));
	vec4 rot = texture(tMotionData, vec2(pm.time / aInfo.maxTime, nodeIndex*2+1.0));
	local = scaling(local, vec3(xyzs.w)) * translate(mat4(1.), xyzs.xyz) * mat4(quatToMat3(rot));
	nodeLocalTransforms[index] = local;

}

