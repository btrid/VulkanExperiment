#version 450

#pragma optionNV (unroll all)
#pragma optionNV (inline all)


//#extension GL_ARB_shading_language_include : require
#extension GL_GOOGLE_cpp_style_line_directive : require
#include </Math.glsl>

#define USE_MODEL_INFO_SET 0
#define USE_ANIMATION_INFO_SET 1
#include </MultiModel.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;


void main() 
{

	uint index = gl_GlobalInvocationID.x;
	ModelInfo model_info = u_model_info;
	if(index >= model_info.nodeNum * u_model_instancing_info.instanceAliveNum){ return; }

	uint modelIndex = index / model_info.nodeNum;
	PlayingAnimation pm = playingMotion[modelIndex];
	AnimationInfo aInfo = animInfo[pm.playingAnimationNo];
	uint nodeIndex = index % model_info.nodeNum;

	mat4 local = mat4(1.);
	vec4 xyz = texture(tMotionData, vec2(pm.time / aInfo.maxTime, nodeIndex*3));
	vec4 rot = texture(tMotionData, vec2(pm.time / aInfo.maxTime, nodeIndex*3+1));
	vec4 scale = texture(tMotionData, vec2(pm.time / aInfo.maxTime, nodeIndex*3+2));
	local = scaling(local, scale.xyz) * translate(mat4(1.), xyz.xyz) * mat4(quatToMat3(rot));
	nodeLocalTransforms[index] = local;

}

