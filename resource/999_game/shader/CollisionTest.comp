#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>

#define SETPOINT_BOID 0
#include </Boid.glsl>
#define SETPOINT_BULLET 1
#include </Bullet.glsl>
#define SETPOINT_MAP 2
#include </Map.glsl>
#define USE_SYSTEM 3
#include <applib/System.glsl>


layout (local_size_x = 32, local_size_y = 32) in;

void main()
{
	uvec2 map_index = gl_GlobalInvocationID.xy;
	MapDescriptor desc = u_map_info.m_descriptor[0];
	if(any(greaterThanEqual(map_index, desc.m_cell_num.xy)))
	{
		return;
	}

	uint enemy_offset = (u_boid_info.m_soldier_max) * (u_system_data.m_gpu_index);
	uint bullet_offset = (u_bullet_info.m_max_num) * (u_system_data.m_gpu_index);
	uint map_offset = desc.m_cell_num.x*desc.m_cell_num.y * (u_system_data.m_gpu_index);

	uint map_id = convert2DTo1D(map_index, desc.m_cell_num.xy);
	for(uint i = b_soldier_head[map_id + map_offset]; i != 0xFFFFFFFF;)
	{
		uint enemy_index = enemy_offset + i;
		i = b_soldier[enemy_index].m_ll_next;
		vec4 inertia = vec4(0.);
		for(uint bullet_index = b_bullet_head[map_id]; bullet_index != 0xFFFFFFFF;)
		{
			BulletData bullet = b_bullet[bullet_offset + bullet_index];
			bullet_index = bullet.m_ll_next;
			if(distance(bullet.m_pos.xyz, b_soldier[enemy_index].m_pos.xyz) < bullet.m_pos.w+b_soldier[enemy_index].m_pos.w)
			{
				inertia.xyz += normalize((bullet.m_vel).xyz) * 3.1;
			}
		}
		b_soldier[enemy_index].m_inertia += inertia;

	}


}
