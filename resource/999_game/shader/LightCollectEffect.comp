#version 450
#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>
#include <btrlib/Shape.glsl>
#include <Marching.glsl>

#define USE_LIGHT 0
#include <Light.glsl>

#define SETPOINT_BULLET 1
#include <Bullet.glsl>

#define USE_SYSTEM 2
#include <applib/System.glsl>

#define SETPOINT_MAP 3
#define SETPOINT_SCENE 4
#include <Map.glsl>

#define SETPOINT_CAMERA 5
#include <btrlib/Camera.glsl>

layout (local_size_x = 16, local_size_y = 16) in;

void main()
{
	uvec2 index = gl_GlobalInvocationID.xy;
	uvec2 global_num = (gl_WorkGroupSize * gl_NumWorkGroups).xy;
	vec2 coord = index / vec2(global_num);
	coord = coord * 2. - 1.;

	MapDescriptor desc = u_map_info.m_descriptor[0];

	vec3 foward = normalize(u_camera[0].u_target - u_camera[0].u_eye).xyz;
	vec3 side = cross(foward, u_camera[0].u_up.xyz);
	side = dot(side, side) <= 0.1 ? vec3(1., 0., 0.) : normalize(side);
	vec3 up = u_camera[0].u_up.xyz;

	// イメージセンサー上の位置
	float tan_fov_y = tan(u_camera[0].u_fov_y / 2.);

	vec3 position_on_sensor =
		(u_camera[0].u_eye.xyz + foward)
		+ side * -coord.x * tan_fov_y * u_camera[0].u_aspect
		+ up * coord.y * tan_fov_y;
	// レイを飛ばす方向。
	vec3 dir = normalize(position_on_sensor - u_camera[0].u_eye.xyz);
	vec3 pos = u_camera[0].u_eye.xyz;

	Ray ray = MakeRay(pos, dir);
	vec2 area = desc.m_cell_num * desc.m_cell_size;
	vec3 bmin = vec3(0) - 0.1;
	vec3 bmax = vec3(area.x, WALL_HEIGHT*5, area.y) + 0.1;
	Hit hit = marchToAABB(ray, bmin, bmax);

	if(hit.IsHit == 0)
	{
		return;
	}

	pos = hit.HitPoint;
	vec4 color = vec4(0.);
	vec3 normal = vec3(0.);
	ivec3 map_index = calcMapIndex(desc, pos);
	for(;;)
	{
		ivec3 next = marchEx3D(pos, map_index, dir);
		if(any(lessThan(map_index.xz, ivec2(0)))
		|| any(greaterThanEqual(map_index.xz, ivec2(desc.m_cell_num))))
		{
			// Mapの外に出た
			break;
		}
		uint map = imageLoad(t_map, map_index.xz).x;
		vec3 p = pos + next *1.;
		if(next.y != 0)
		{
			// 地面と当たった場合
			if(p.y <= map*WALL_HEIGHT)
			{
				color = vec4(vec3(map*1., 0., 1.) * calcEmission(pos), 1.);
				normal = vec3(0., 1., 0.);
				break;
			}
		}
		else
		{
			if(p.y <= map*WALL_HEIGHT)
			{
				// 壁と当たった場合
				color = vec4(vec3(1., 0., 0.) * calcEmission(pos), 1.);
				normal = vec3(-next);
				break;
			}
		}
	}

	if(dot(color.xyz, color.xyz) >= 0.3)
	{
		LightData light;
		light.m_pos = vec4(pos.xyz, 1);
		light.m_normal = vec4(normal, 0.);
		light.m_emissive = color;
		uint light_index = atomicAdd(b_data_counter, 1);
		b_light[light_index] = light;

	}

}

