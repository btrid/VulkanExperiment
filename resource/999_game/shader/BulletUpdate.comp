#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/ConvertDimension.glsl>

#include </Common.glsl>
#define SETPOINT_BULLET 0
#include </Bullet.glsl>

#define SETPOINT_MAP 1
#include </Map.glsl>

#define USE_SYSTEM 2
#include <applib/System.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_bullet_info.m_max_num){
		return;
	}

	uint src_offset = (1-u_system_data.m_gpu_index) * u_bullet_info.m_max_num;
	uint dst_offset = (u_system_data.m_gpu_index) * u_bullet_info.m_max_num;
	float deltatime = u_system_data.m_deltatime;

	BulletData b = b_bullet[src_offset + index];
	b_bullet[src_offset + index].m_life = -1.;
	b.m_life -= deltatime;

	if(b.m_life <= 0.){
		return;
	}
	MapDescriptor desc = u_map_info.m_descriptor[0];

	vec2 dir = normalize(b.m_vel.xz);
	float progress = length(b.m_vel.xz)*deltatime;
	for(int i = 0; i < 100; i++)
//	for(;;)
	{
		MarchResult result = marchEx(b.m_pos.xz, b.m_map_index, progress, dir);
		if(result.is_end)
		{
			b.m_pos.xz = result.next_pos;
			break;
		}
		progress = result.progress;

		uint map = imageLoad(t_map, result.next_map_index).x;
		b.m_pos.xz = result.next_pos;
		if(map != 0)
		{
			// 壁にぶつかったので反射
			vec2 next = vec2(result.next_map_index - b.m_map_index);
			vec3 wall = vec3(next.x, 0., next.y);
			b.m_vel.xyz = reflect(b.m_vel.xyz, wall);
			dir = normalize(b.m_vel.xz);
			imageAtomicAdd(t_map_damage, result.next_map_index, 255);
		}
		else
		{
			// 何もないのでそのまま進む
			b.m_map_index = result.next_map_index;
		}
	}

	uint dst_index = atomicAdd(b_bullet_draw_cmd.instanceCount, 1);

	uint old = atomicExchange(b_bullet_head[convert2DTo1D(b.m_map_index, desc.m_cell_num.xy)], dst_index);
	b.m_ll_next = old;

	b_bullet[dst_offset + dst_index] = b;

}