#version 450
#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#define USE_LIGHT 0
#include <Light.glsl>

#define SETPOINT_BULLET 1
#include <Bullet.glsl>

#define USE_SYSTEM 2
#include <applib/System.glsl>

layout (local_size_x = 1024) in;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	uint loop_count = (u_bullet_info.m_max_num-1) / 1024 + 1;
	loop_count = uint(min(max(int(b_bullet_draw_cmd.instanceCount - loop_count*index), 0), int(loop_count)));
	if(loop_count == 0){
		return;
	}

	uint light_index = atomicAdd(b_data_counter, loop_count);
	// light_bufferを超えないようにminをとる
	loop_count = uint(min(int(u_light_info.m_max_num-(light_index+loop_count)), int(loop_count)));

	uint bullet_src_offset = u_system_data.m_gpu_index * u_bullet_info.m_max_num;
	for(uint i = 0; i < loop_count; i++)
	{
		uint bullet_index = index * loop_count + i;
		LightData light;
		light.m_pos = vec4(b_bullet[bullet_src_offset + bullet_index].m_pos.xyz, 1);
		light.m_emissive = vec4(1., 1., 1., 1.);
		b_light[light_index++] = light;
	}
}

