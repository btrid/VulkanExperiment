#version 450
#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#define USE_LIGHT 0
#include <Light.glsl>

#define SETPOINT_CAMERA 1
#include <btrlib/Camera.glsl>

layout (local_size_x = 32, local_size_y = 32) in;

shared uint s_counter;
shared CameraFrustom f;
void main()
{

	uvec3 index = uvec3(gl_WorkGroupID.xy, 1);
	uint tiled_1D_index = gl_WorkGroupID.x+ gl_WorkGroupID.y*gl_NumWorkGroups.x; 

	TileInfo tile_info = u_tile_info;
	if(any(greaterThanEqual(index.xy, tile_info.m_tile_num))) { return; }

	if(gl_LocalInvocationID.x == 0)
	{
		s_counter = 0;

		CameraFrustomPoint fp = u_camera_frustom_point[0];
		vec3 n_per_size = vec3(vec2(1.) / tile_info.m_tile_num, 0.) * (fp.m_rbn - fp.m_ltn).xyz;
		vec3 f_per_size = vec3(vec2(1.) / tile_info.m_tile_num, 0.) * (fp.m_rbf - fp.m_ltf).xyz;
		vec3 ltn =fp.m_ltn.xyz + index*n_per_size;
		vec3 lbn =fp.m_ltn.xyz + (index+uvec3(0, 1, 0))*n_per_size;
		vec3 rtn =fp.m_ltn.xyz + (index+uvec3(1, 0, 0))*n_per_size;
		vec3 rbn =fp.m_ltn.xyz + (index+uvec3(1, 1, 0))*n_per_size;
		vec3 ltf =fp.m_ltf.xyz + index*f_per_size;
		vec3 lbf =fp.m_ltf.xyz + (index+uvec3(0, 1, 0))*f_per_size;
		vec3 rtf =fp.m_ltf.xyz + (index+uvec3(1, 0, 0))*f_per_size;
		vec3 rbf =fp.m_ltf.xyz + (index+uvec3(1, 1, 0))*f_per_size;

		f.p[0] = MakePlane(rtn, ltn, ltf);
		f.p[1] = MakePlane(lbn, rbn, rbf);
		f.p[2] = MakePlane(ltn, lbn, lbf);
		f.p[3] = MakePlane(rbn, rtn, rbf);
	}
	barrier();
	memoryBarrierShared();

	uint count_list_offset = tiled_1D_index*tile_info.m_tile_index_map_max;
	for(uint i = 0; i < b_data_counter; i++)
	{
		if(isCullingInf(f, vec4(b_light[i].m_pos))) 
		{
			continue;
		}
		uint tile_list_index = atomicAdd(s_counter, 1);
		b_tile_data_map[count_list_offset+tile_list_index] = i;
	}

	barrier();
	memoryBarrierShared();
	if(gl_LocalInvocationID.x == 0)
	{
		b_tile_data_counter[tiled_1D_index] = s_counter;
	}
}

