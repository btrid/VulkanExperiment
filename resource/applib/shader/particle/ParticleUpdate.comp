#version 450


#extension GL_GOOGLE_cpp_style_line_directive : require
#include <btrlib/Common.glsl>

#define USE_PARTICLE 0
#include </Particle.glsl>

#define USE_SYSTEM 1
#include <applib/System.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_particle_info.m_particle_max_num){
		return;
	}
	float deltatime = u_system_data.m_deltatime;

	uint src_offset = (1-u_system_data.m_gpu_index)*u_particle_info.m_particle_max_num;
	ParticleData p = b_particle[src_offset + index];
	b_particle[src_offset + index].m_life = -1.;
	p.m_life -= deltatime;
	if(p.m_life <= 0.){
		return;
	}

	ParticleUpdateParameter updater = b_particle_update_param[p.m_type];
	vec4 old_pos = p.m_position;
	p.m_velocity += updater.m_velocity_add*deltatime;
	p.m_velocity *= pow(updater.m_velocity_mul, vec4(1.+deltatime));
	p.m_position += p.m_velocity*deltatime;

	p.m_rotate += updater.m_rotate_add*deltatime;
	p.m_rotate *= pow(updater.m_rotate_mul, vec4(1.+deltatime));
	p.m_scale += updater.m_scale_add*deltatime;
	p.m_scale *= pow(updater.m_scale_mul, vec4(1.+deltatime));
//	p.m_color += updater.m_color_add*deltatime;
//	p.m_color *= pow(updater.m_color_mul, vec4(1.+deltatime));
	
	uint dst_index = atomicAdd(b_draw_cmd.instanceCount, 1);
	uint dst_offset = (u_system_data.m_gpu_index)*u_particle_info.m_particle_max_num;
	b_particle[dst_offset + dst_index] = p;
}