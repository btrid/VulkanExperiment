#version 450
#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/Camera.glsl>
#include <applib/model/Light.glsl>

layout (local_size_x = 32, local_size_y = 32) in;

layout(std140, binding=0) uniform LightInfoUniform {
	LightInfo u_light_info;
};
layout(std140, binding=1) uniform FrustomUniform {
	CameraFrustomPoint u_frustom;
};

layout(std430, binding=8) readonly restrict buffer LightBuffer {
	LightParam b_light[];
};
layout(std430, binding=9) restrict buffer LLHeadBuffer {
	uint b_LLhead[];
};
layout(std430, binding=10) writeonly restrict buffer LLBuffer {
	LightLL b_light_LL[];
};
layout(std430, binding=11) coherent restrict buffer LightCounter {
	uint b_light_count;
};


void main()
{
	uvec3 index = uvec3(gl_GlobalInvocationID.xy, 0);
	if(any(greaterThanEqual(index.xy, u_light_info.m_tile_num))) { return; }
	uint index1D = index.x + index.y * u_light_info.m_tile_num.x;

	vec3 n_per_size = vec3(vec2(1.) / u_light_info.m_tile_num, 0.) * (u_frustom.m_rbn - u_frustom.m_ltn).xyz;
	vec3 f_per_size = vec3(vec2(1.) / u_light_info.m_tile_num, 0.) * (u_frustom.m_rbf - u_frustom.m_ltf).xyz;
	vec3 ltn = u_frustom.m_ltn.xyz + index*n_per_size;
	vec3 lbn = u_frustom.m_ltn.xyz + (index+uvec3(0, 1, 0))*n_per_size;
	vec3 rtn = u_frustom.m_ltn.xyz + (index+uvec3(1, 0, 0))*n_per_size;
	vec3 rbn = u_frustom.m_ltn.xyz + (index+uvec3(1, 1, 0))*n_per_size;
	vec3 ltf = u_frustom.m_ltf.xyz + index*f_per_size;
	vec3 lbf = u_frustom.m_ltf.xyz + (index+uvec3(0, 1, 0))*f_per_size;
	vec3 rtf = u_frustom.m_ltf.xyz + (index+uvec3(1, 0, 0))*f_per_size;
	vec3 rbf = u_frustom.m_ltf.xyz + (index+uvec3(1, 1, 0))*f_per_size;
	CameraFrustom f;
	f.p[0] = MakePlane(rtn, ltn, ltf);
	f.p[1] = MakePlane(lbn, rbn, rbf);
	f.p[2] = MakePlane(ltn, lbn, lbf);
	f.p[3] = MakePlane(rbn, rtn, rbf);

	uint head = INVALID_LIGHT_INDEX;
	for(uint i = 0; i < u_light_info.m_active_light_num; i++)
	{
		if(isCullingInf(f, b_light[i].m_position*vec4(1., 1., 1., 2.))) {
			continue;
		}
		uint light_index = atomicAdd(b_light_count, 1);
		b_light_LL[light_index].next = head;
		b_light_LL[light_index].light_index = i;
		head = light_index;
	}
	b_LLhead[index1D] = head;
}

