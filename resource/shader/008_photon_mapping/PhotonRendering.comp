#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_PM 0
#include "PM.glsl"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "Marching.glsl"


layout(push_constant) uniform Constant
{
	vec3 eye;
	vec3 target;
} constant;

struct QueryPhoton
{
	vec3 pos;
	float radius;
	vec3 normal;
//	int use_photon_num;

};

struct ResultPhoton
{
	Photon data;
	float dist;
};
struct QueryResult
{
#define RESULT_PHOTON_NUM (4)
	ResultPhoton photon[RESULT_PHOTON_NUM];
	int num;
	float far_dist;
};

QueryResult queryPhoton(in QueryPhoton query)
{
	QueryResult result;
	result.num = 0;
	result.far_dist = 0.;
	ivec3 org = ivec3((query.pos + u_pm_info.area_min.xyz) / u_pm_info.cell_size.xyz);

#if 0
	// unrollできないので封印。単純に重い
//	for(int x = -1; x <= 1; x++){
//	for(int y = -1; y <= 1; y++){
//	for(int z = -1; z <= 1; z++){
	for(int loop = 0; loop < 27; loop++)
	{{{
		int x = loop/9; int y = (loop/3) % 3; int z = loop % 3;
		

#else
	{{{
		int x = 0; int y = 0; int z = 0;
#endif
		ivec3 index = org + ivec3(x, y, z);
//		if(!isInRange(index, uParam.num1)) { continue; }
		for(uint pIndex = bPhotonLLHead[convert3DTo1D(uvec3(index), u_pm_info.num0.xyz)]; pIndex != 0xFFFFFFFF; pIndex = bPhotonLL[pIndex])
		{
			Photon photon = bPhoton[pIndex];
			float dist = distance(query.pos, photon.Position);
			if(dist >= query.radius){ continue; }
			for(int i = 0; i < RESULT_PHOTON_NUM; i++)
			{
				if(i >= result.num )
				{
					result.photon[result.num].data = photon;
					result.photon[result.num].dist = dist;
					result.num+=1;
					result.far_dist = max(dist, result.far_dist);
				}
				else if(dist < result.photon[i].dist)
				{
					for(int n = result.num-2; n > i; n--)
					{
						result.photon[n+1] = result.photon[n];
					}
					result.photon[i].data = photon;
					result.photon[i].dist = dist;
					result.num = min(result.num+1, RESULT_PHOTON_NUM);
				}
			}
		}
	}}}
	return result;

}

vec3 radiance(in MarchResult marchResult, in Ray ray)
{
	QueryPhoton query;
	query.pos = marchResult.HitResult.HitPoint;
	query.radius = 4.5;

	QueryResult queryResult = queryPhoton(query);

	vec3 accumIndirect = vec3(0.);
	Material material = b_material[marchResult.HitTriangle.a.MaterialIndex];
	float max_dist = queryResult.far_dist;
	float max_dist2 = max_dist*max_dist;
	for (int i = 0; i < queryResult.num; i++)
	{
		float dist = queryResult.photon[i].dist;
		float weight = 1. - (dist / (1.1*max_dist));
//		vec3 brdf = sampling(material, ray.normalized_d, marchResult);
		accumIndirect += queryResult.photon[i].data.Power * /*brdf * */weight;
	}
	accumIndirect = accumIndirect / (1.0 - 2.0 / (3.0 * 1.1));
	return accumIndirect / (3.1415 * max_dist2) + material.Emissive.xyz;

}

void main() 
{
	ivec2 index = ivec2(gl_GlobalInvocationID.xy);

	vec2 resolution = vec2(640., 480.);
	vec3 foward = normalize(constant.target - constant.eye);
	vec3 side = cross(foward, vec3(0., 1., 0.));
	side = dot(side, side) <= 0.1 ? vec3(-1., 0., 0.) : normalize(side);
	vec3 up = normalize(cross(side, foward));

	vec2 r = vec2(0.5);
	// イメージセンサー上の位置。
	vec3 position_on_sensor =
		(foward)
		+ side * (float(r.x + index.x) / resolution.x - 0.5)*2.
		+ up * (float(r.y + index.y) / resolution.y - 0.5)*2.;
	// レイを飛ばす方向。
	vec3 dir = normalize(position_on_sensor);
	Ray ray = MakeRay(position_on_sensor, dir);
	MarchResult result = marching(ray);
	if (result.HitResult.IsHit == 0)
	{
		// 何も当たらなかったら終了
		imageStore(tRender, index, vec4(0., 0., 0., 1.));
		return;
	}

	vec3 color = radiance(result, ray);
	imageStore(tRender, index, vec4(color, 1.));
//	imageStore(tRender, index, vec4(1., 0., 1., 1.));

}

