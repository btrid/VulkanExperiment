#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_PM 0
#include "PM.glsl"

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;


#include "Marching.glsl"

layout(push_constant) uniform Constant
{
	int level;
} constant;


void main() 
{
	int index = int(gl_GlobalInvocationID.x);
	float seed = sqrt(float(index));
	float probabry = rand(vec2(seed, sqrt(seed)));
	BounceData prev = bPhotonBounce[constant.level-1];
	{
		int index = atomicAdd(bPhotonBounce[constant.level].calced, 1);
		if(index >= prev.count)
		{
			// 計算する数を超えた
			return;
		}
		if(probabry <= 0.3)
		{
			// ロシアンルーレット
			return;
		}

		Photon stored = bPhoton[prev.startOffset + index];
		if(dot(stored.Power, stored.Power) <= 0.001)
		{
			// 強度が弱すぎるのでしない
			return;
		}

		TriangleLL tLL = bTriangleLL[stored.TriangleLLIndex];
		Vertex a = b_vertex[tLL.index[0]];
		Vertex b = b_vertex[tLL.index[1]];
		Vertex c = b_vertex[tLL.index[2]];

		vec3 n = normalize(cross(normalize(b.Position-a.Position), normalize(c.Position-a.Position)));
		vec3 d = calcDir(n, seed);
		Ray ray = MakeRay(stored.Position+d*0.001, d);

		MarchResult result = marching(ray);
		if(result.HitResult.IsHit == 0){
			return;
		}

		Photon photon;
		photon.Position = result.HitResult.HitPoint;
		setDirection(photon, ray.d);
		Material material = b_material[result.HitTriangle.a.MaterialIndex];
		vec3 brdf = sampling(material, getDirection(stored), result);
		photon.Power = stored.Power * brdf;
		photon.TriangleLLIndex = result.TriangleLLIndex;
		
		uint photonIndex = atomicAdd(b_photon_counter[0].w, 1);
		bPhoton[photonIndex] = photon;

		uint index0 = convert3DTo1D(uvec3((photon.Position + u_pm_info.area_min.xyz) / u_pm_info.cell_size.xyz), u_pm_info.num0.xyz);
		uint old = atomicExchange(bPhotonLLHead[index0], photonIndex);
		bPhotonLL[photonIndex] = old;

		atomicAdd(bPhotonBounce[constant.level].count, 1);

	}
}