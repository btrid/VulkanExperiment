#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_PathFinding 0
#include "Path.glsl"

#define USE_GI2D 1
#include "GI2D.glsl"

#define USE_RenderTarget 2
#include "applib/System.glsl"

vec3 colors[] = {
	vec3(0., 0., 1.),
	vec3(0., 1., 0.),
	vec3(1., 0., 0.),
	vec3(1., 1., 1.),
};

layout (local_size_x=32, local_size_y=32) in;

void main()
{
	vec3 color = vec3(0.);
	uint hierarchy = 2;

	uvec2 index2 = gl_GlobalInvocationID.xy>>(hierarchy*3+3);
	uint _index = getMemoryOrder(index2);
	SparseMap map = b_sparse_map[_index];
	for(int i = 0; i < 3; i++)
	{
		uvec2 index     = gl_GlobalInvocationID.xy >> ((hierarchy-i)*3);
		uvec2 sub = index - ((index>>3)<<3);
		
		if((map.map & (1ul<<(sub.x+sub.y*8))) == 0ul || map.child_node_index==-1)
		{
			color = colors[i];
			break;
		}
		map = b_sparse_map[map.child_node_index + sub.x+sub.y*8];
//		map = b_sparse_map[map.child_node_index + getMemoryOrder(sub)];
	}

	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));

}
