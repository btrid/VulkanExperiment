#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_PathFinding 0
#include "Path.glsl"

#define USE_GI2D 1
#include "GI2D.glsl"


layout(push_constant) uniform Input
{
	uint level;
} constant;

shared uint s_parent_node_index; 
shared uint s_map_offset; 
shared SparseMap s_parent_node; 
layout (local_size_x=8, local_size_y=8) in;

void main()
{
	uint level = constant.level;
	uint hierarchy = 2-constant.level;
	if(gl_LocalInvocationIndex == 0)
	{
		s_parent_node_index = 0;
		s_map_offset = getFragmentMapHierarchyOffset(hierarchy);
	}
	barrier();
	memoryBarrierShared();

	if(gl_LocalInvocationIndex < level-1)
	{
		atomicAdd(s_parent_node_index, b_sparse_map_hierarchy_counter[gl_LocalInvocationIndex].x);
	}
	barrier();
	memoryBarrierShared();

	if(gl_LocalInvocationIndex == 0)
	{
		s_parent_node = b_sparse_map[s_parent_node_index + gl_WorkGroupID.x];
	}
	barrier();
	memoryBarrierShared();

	if(s_parent_node.child_node_index == -1)
	{
		return;
	}

	uvec2 ni = (uvec2(s_parent_node.norton_index) >> uvec2(0, 16)) & uvec2(0xffff);
	ni = ni*8 + gl_LocalInvocationID.xy;
	uint index = getMemoryOrder(ni);

	SparseMap node;
	node.norton_index = ni.x | (ni.y<<16);
	node.child_node_index = -1;
	node.map = b_diffuse_map[s_map_offset + index];
	if(node.map == 0 || hierarchy == 0)
	{
		// 子は必要ない
	}
	else
	{
		uint child_index = atomicAdd(b_sparse_map_counter, 64);
		node.child_node_index = child_index;

		atomicAdd(b_sparse_map_hierarchy_counter[level].x, 1);
	}
	b_sparse_map[s_parent_node.child_node_index + gl_LocalInvocationID.x+gl_LocalInvocationID.y*8] = node;


}
