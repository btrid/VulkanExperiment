#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_PathFinding 0
#include "Path.glsl"

#define USE_GI2D 1
#include "GI2D.glsl"


layout(push_constant) uniform Input
{
	uint level;
} constant;

layout (local_size_x=8, local_size_y=8) in;
void main()
{
	uint hierarchy = 2-constant.level;

	uvec2 map_reso = u_gi2d_info.m_resolution.zw>>(hierarchy*3);
	if(any(greaterThanEqual(gl_GlobalInvocationID.xy, map_reso))){ return; }

	SparseMap node;
	node.norton_index = gl_GlobalInvocationID.x | (gl_GlobalInvocationID.y<<16);
	node.child_node_index = -1;

	uint map_offset = getFragmentMapHierarchyOffset(hierarchy);
	uint index = getMemoryOrder(gl_GlobalInvocationID.xy);
	node.map = b_diffuse_map[map_offset + index];

	if(node.map == 0 /*|| node.map == -1*/)
	{
		// 子は必要ない
	}
	else
	{
		uint child_index = atomicAdd(b_sparse_map_counter, 64);
		node.child_node_index = child_index;
		atomicAdd(b_sparse_map_hierarchy_counter[1].x, 1);
	}
	b_sparse_map[index] = node;

}
