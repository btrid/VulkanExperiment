#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"


layout (local_size_x = 128, local_size_y = 1) in;
void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	float angle = 6.28 / gl_NumWorkGroups.y;
	angle += angle * (gl_GlobalInvocationID.z / gl_NumWorkGroups.z);
	vec2 dir = rotate(angle * gl_GlobalInvocationID.y);

	vec2 begin;
	vec2 end;
	float d_min, d_max;
	{
		vec2 floorp;
		floorp.x = dir.x >= 0 ? 0. : reso.x;
		floorp.y = dir.y >= 0 ? 0. : reso.y;
		vec2 floordir;
		floordir.x = abs(dir.x) > abs(dir.y) ? 0. : 1.;
		floordir.y = abs(dir.x) > abs(dir.y) ? 1. : 0.;

		vec2 p0 = intersectRayRay(vec2(0, 0), dir, floorp, floordir);
		vec2 p1 = intersectRayRay(vec2(reso.x, 0), dir, floorp, floordir);
		vec2 p2 = intersectRayRay(vec2(0, reso.y), dir, floorp, floordir);
		vec2 p3 = intersectRayRay(vec2(reso.x, reso.y), dir, floorp, floordir);

		vec2 minp = min(min(min(p0, p1), p2), p3);
		minp = minp + floordir * (8.) * gl_LocalInvocationIndex;
		if(!intersectRayAABB(minp, dir, vec2(0.), reso.xy, d_min, d_max)){return;}
		if((d_max-d_min) < 10.1){return;}
		begin = minp + d_min * dir;
		end = minp + d_max * dir;
	}

	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 999999. : abs(1./dir.y);
	float progress = min(inv_dir.x, inv_dir.y);

	float distance = (d_max-d_min) / progress;
	D2Ray ray;
	ray.origin = begin;
	ray.dir = dir * distance;

	int index = atomicAdd(b_ray_counter.w, 1);
	if((index % 512) == 0)
	{
		atomicAdd(b_ray_counter.x, 1);
	}
	b_ray[index] = ray;
}
