#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_Crowd2D 0
#include "Crowd.glsl"

#define USE_SYSTEM 1
#include "applib/System.glsl"

#define USE_GI2D 2
#include "GI2D.glsl"


layout (local_size_x = 1024) in;

float calcAngle2(in vec2 x, in vec2 y)
{
	return acos(clamp(dot(x, y), -1., 1));
}

vec3 normalize_safe(in vec3 v, in vec3 a)
{
	return dot(v, v) >= 0.001 ? normalize(v) : a; 
}

float acos_safe(in float a){ return acos(clamp(a, -1., 1.));}
struct MarchResult
{
	vec2 next_pos;
	ivec2 next_ipos;
	float progress;
	bool is_end;
};

// 軽量版
MarchResult march(in vec2 pos, in vec2 dir, in float progress, in float advance)
{
	pos += dir * clamp(progress, 0., advance);
	progress = max(progress-advance, 0.);

	MarchResult result;
	result.next_pos = pos;
	result.next_ipos = ivec2(pos);
	result.progress = progress;
	result.is_end = progress <= 0.;
	return result;
}

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_crowd_info.unit_data_max){
		return;
	}
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	uvec2 data_offset = ivec2(1-u_system_data.m_gpu_index, u_system_data.m_gpu_index) * u_crowd_info.unit_data_max;
	float deltatime = u_system_data.m_deltatime;

	UnitData unit = b_unit[data_offset.x + index];
//	b_unit[src_offset + index].m_life = -1.;
//	unit.m_life -= deltatime;
//	if(unit.m_life <= 0.){
//		return;
//	}
	CrowdData crowd = b_crowd[unit.crowd_type];
	UnitInfo unit_info = u_unit_info[unit.unit_type];

	vec2 dir = rotate(unit.m_rot);

	vec3 target_dir = vec3(dir, 0.);
	bool is_stop = false;

	float rot_prev = unit.m_rot;
	vec2 idir = dir * abs(inverse_safe(dir));
	const int size = g_crowd_density_cell_size;
	ivec2 ip = ivec2(unit.m_pos + idir) / size;
	int dindex = ip.x + ip.y * (reso.x/size);
	int density0 = b_crowd_density_map[dindex];
	if(density0 >= 2)
	{
		// 障害物を避ける
		ivec4 offset_x = ivec4(-1, 1, -1, 1);
		ivec4 offset_y = ivec4(1, 1, -1, -1);
//		ivec4 offset_x = ivec4(0, 1, 0, 1);
//		ivec4 offset_y = ivec4(1, 1, 0, 0);
		ip = ivec2(unit.m_pos) / size;
		ivec4 dindex_around = (ip.xxxx+offset_x) + (ip.yyyy+offset_y) * (reso.x/size);
		ivec4 density;
		density[0] = b_crowd_density_map[dindex_around.x];
		density[1] = b_crowd_density_map[dindex_around.y];
		density[2] = b_crowd_density_map[dindex_around.z];
		density[3] = b_crowd_density_map[dindex_around.w];

		ivec4 ipressure = density0 - density;

		offset_x = ivec4(-1, 1, -1, 1);
		offset_y = ivec4(1, 1, -1, -1);
		vec2 pdir0 = normalize(vec2(offset_x[0], offset_y[0]));
		vec2 pdir1 = normalize(vec2(offset_x[1], offset_y[1]));
		vec2 pdir2 = normalize(vec2(offset_x[2], offset_y[2]));
		vec2 pdir3 = normalize(vec2(offset_x[3], offset_y[3]));

		vec2 p0 = ipressure[0] / -pdir0;
		vec2 p1 = ipressure[1] / -pdir1;
		vec2 p2 = ipressure[2] / -pdir2;
		vec2 p3 = ipressure[3] / -pdir3;
		vec2 pressure = (p0 + p1 + p2 + p3);
		target_dir = normalize_safe(vec3(pressure, 0.), vec3(dir, 0.));

		unit.user = 1;

//		vec2 side = cross(vec3(idir, 0.), vec3(0., 0., 1.)).xy;
//		is_stop = min(min(min(density.x, density.y), density.z), density.w) >= 5;

	}
	else 
	{
		// 目的地に向かう
		target_dir = normalize_safe(vec3(crowd.target - unit.m_pos, 0.), vec3(dir, 0.));
		unit.user = 0;
	}

	float rotate_rad = dot(vec3(dir, 0.), target_dir);
	if(rotate_rad <= 0.998)
	{
		float rotate_angle = acos(rotate_rad);
		rotate_angle = min(rotate_angle, unit_info.angler_speed);

		float c = cross(vec3(dir, 0.), target_dir).z;
		unit.m_rot += sign(c) * rotate_angle*deltatime;
	}
	{
		if(is_stop)
		{
			unit.m_move = 0;
		}
		else if(rot_prev != unit.m_rot)
		{
			// 方向転換の時は減速する?
//			unit.m_move = clamp(unit.m_move * pow(0.99, 1.+deltatime), unit_info.linear_speed*0.2, unit_info.linear_speed);
		}
		else
		{
			// そうじゃなかったら加速?
			unit.m_move	= min(unit.m_move+deltatime*10., unit_info.linear_speed);
		}

	}

	{
	
//		march(unit.m_pos.xz, unit.m_map_index, unit.m_inertia.xz * deltatime);	
//		unit.m_inertia *= pow(0.92, 1. + deltatime);
	}
	{

		// march
//		vec2 dir = unit.m_dir;

		ivec2 ipos = ivec2(unit.m_pos);
		float progress = unit.m_move*deltatime;
		float advance = progress;
		if(progress != 0.)
		{

			for(int _i = 0; _i < 2000; _i++)
			{
				MarchResult result = march(unit.m_pos, dir, progress, 1.);

				// hit確認
				ivec4 fragment_index = ivec4(result.next_ipos/8, result.next_ipos%8);
				int findex = fragment_index.x + fragment_index.y*reso.z;
				uint64_t fragment_map = b_fragment_map[findex].x;

				ivec2 shift = fragment_index.zw;
				uint64_t bit = 1ul<<(shift.x+shift.y*8);
				if((fragment_map & bit) != 0)
				{
					// 壁にぶつかったので反射
					vec2 next = vec2(result.next_ipos - ipos);
					vec2 wall = vec2(next.x, next.y);
//					unit.m_dir = normalize(reflect(normalize(unit.m_dir), wall)) * advance;
//					unit.m_dir = -unit.m_dir;
					unit.m_rot = mod(3.14+unit.m_rot, 6.28);
					dir = rotate(unit.m_rot);
//					progress *= 0.5;

					// 更新はしない?
					// pos = result.next_pos;

				}
				else
				{
					// 何もないのでそのまま進む
					unit.m_pos = result.next_pos;
					ipos = result.next_ipos;				

				}

				if(result.is_end)
				{
	//				b_pos[p_id*2 + gpu_index()] = pos;
					break;
				}
			}
		}


	}
	uint dst_index = atomicAdd(b_unit_counter.w, 1);

//	uint offset = desc.m_cell_num.x*desc.m_cell_num.y*(u_system_data.m_gpu_index);
//	uint map_index_1D = calcMapIndex1D(unit.m_map_index) + offset;
//	uint old = atomicExchange(b_unit_head[map_index_1D], dst_index);
//	unit.m_ll_next = old;

//	unit.m_pos += vec2(1000.);
	unit.m_rot_prev = rot_prev;
	b_unit[data_offset.y + dst_index] = unit;
}
