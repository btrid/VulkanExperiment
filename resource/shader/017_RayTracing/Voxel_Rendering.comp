#version 460

#extension GL_GOOGLE_include_directive : require
#define USE_Voxel 0
#include "Voxel.glsl"

#define SETPOINT_CAMERA 1
#include "btrlib/camera.glsl"

#define USE_RenderTarget 2
#include "applib/System.glsl"
layout (local_size_x = 8, local_size_y = 8) in;

bool intersection(vec3 aabb_min, vec3 aabb_max, vec3 pos, vec3 inv_dir, out float n, out float f)
{
	// https://tavianator.com/fast-branchless-raybounding-box-intersections/
	vec3 t1 = (aabb_min - pos) * inv_dir;
	vec3 t2 = (aabb_max - pos) * inv_dir;

	vec3 tmin = min(t1, t2);
	vec3 tmax = max(t1, t2);

	n = max(max(tmin.x, tmin.y), tmin.z);
	f = min(min(tmax.x, tmax.y), tmax.z);

	return f > n;
}

void main() 
{
	uvec3 reso = gl_WorkGroupSize * gl_NumWorkGroups;

	vec3 dir,pos;
	{
		Camera cam = u_camera[0];
		vec3 f = normalize(cam.u_target.xyz - cam.u_eye.xyz).xyz;
		vec3 s = normalize(cross(cam.u_up.xyz, f));
		vec3 u = cam.u_up.xyz;

		// イメージセンサー上の位置
		float tan_fov_y = tan(cam.u_fov_y / 2.);
		vec2 screen = (gl_GlobalInvocationID / vec3(reso)).xy * 2. - 1.;

		dir = normalize(f + s * screen.x * tan_fov_y * cam.u_aspect + u * screen.y * tan_fov_y);
		pos = cam.u_eye.xyz;

	}

	vec3 inv_d;
	inv_d.x = abs(dir.x) < 0.00001 ? 99999.f : 1. / dir.x;
	inv_d.y = abs(dir.y) < 0.00001 ? 99999.f : 1. / dir.y;
	inv_d.z = abs(dir.z) < 0.00001 ? 99999.f : 1. / dir.z;

	float n, f;
	intersection(vec3(0), vec3(u_info.reso.xyz), pos, inv_d, n, f);

	pos = ivec3(pos + max(n, 0.) * dir);

	vec4 c = vec4(0.);

	// http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.3443&rep=rep1&type=pdf

#if 1
	int axis = abs(dir.x) > abs(dir.y) ? 0 : 1;
	axis = abs(dir[axis]) > abs(dir.z) ? axis : 2;
	dir *= abs(inv_d[axis]);
	vec3 error = mix(fract(pos), vec3(1.) - fract(pos), step(dir, vec3(0.)));
	while (all(lessThan(pos, u_info.reso.xyz)) && all(greaterThanEqual(pos, vec3(0.f))))
	{
		uvec3 i = uvec3(pos)/u_info.bottom_brick.xyz;
		uvec4 bottom = b_bottom[i.x + i.y*u_info.bottom.x + i.z*u_info.bottom.x*u_info.bottom.y];
		uvec3 bit = uvec3(pos)%u_info.bottom_brick.xyz;
		uint b = bit.x + bit.y*u_info.bottom_brick.x + bit.z*u_info.bottom_brick.x*u_info.bottom_brick.y;

		if((bottom[b/32] & (1<<(b%32))) != 0)
		{
			c = vec4(1.);
			break;
		}
		error += abs(dir);
		pos += sign(dir) * floor(error);
		error -= floor(error);
	}
#else
	vec3 error = mix(vec3(1.)-fract(pos), fract(pos), step(dir, vec3(0.))) * abs(inv_d);
	while (all(lessThan(pos, u_info.reso.xyz)) && all(greaterThanEqual(pos, vec3(0.f))))
	{		
		uvec3 i = uvec3(pos)/u_info.bottom_brick.xyz;
		uvec4 bottom = b_bottom[i.x + i.y*u_info.bottom.x + i.z*u_info.bottom.x*u_info.bottom.y];
		uvec3 bit = uvec3(pos)%u_info.bottom_brick.xyz;
		uint b = bit.x + bit.y*u_info.bottom_brick.x + bit.z*u_info.bottom_brick.x*u_info.bottom_brick.y;

		if((bottom[b/32] & (1<<(b%32))) != 0)
		{
			c = vec4(1.);
			break;
		}

		int axis = (error.x < error.y) ? 0 : 1;
		axis = error[axis] < error.z ? axis : 2;
		pos[axis] += sign(dir[axis]);
		error[axis] += abs(inv_d)[axis];

	}
#endif
	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), c);
}
