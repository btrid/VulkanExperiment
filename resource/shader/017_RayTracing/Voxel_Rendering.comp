#version 460

#extension GL_GOOGLE_include_directive : require
#define USE_Voxel 0
#include "Voxel.glsl"

#define SETPOINT_CAMERA 1
#include "btrlib/camera.glsl"

#define USE_RenderTarget 2
#include "applib/System.glsl"
layout (local_size_x = 8, local_size_y = 8) in;

bool intersection(vec3 aabb_min, vec3 aabb_max, vec3 pos, vec3 inv_dir, out float n, out float f)
{
	// https://tavianator.com/fast-branchless-raybounding-box-intersections/
	vec3 t1 = (aabb_min - pos) * inv_dir;
	vec3 t2 = (aabb_max - pos) * inv_dir;

	vec3 tmin = min(t1, t2);
	vec3 tmax = max(t1, t2);

	n = max(max(tmin.x, tmin.y), tmin.z);
	f = min(min(tmax.x, tmax.y), tmax.z);

	return f > n;
}

void MakeRay(out vec3 pos, out vec3 dir, out vec3 inv_dir)
{
	vec2 screen = (gl_GlobalInvocationID / vec3(gl_WorkGroupSize * gl_NumWorkGroups)).xy * 2. - 1.;
	screen *= tan(u_camera[0].u_fov_y / 2.);

	mat3 axis = transpose(mat3(u_camera[0].u_view));

	dir = normalize(axis[2] + axis[0] * screen.x * u_camera[0].u_aspect + axis[1] * screen.y);
	pos = u_camera[0].u_eye.xyz;
	
	inv_dir.x = abs(dir.x) < 0.0001 ? (step(dir.x, 0)*2.-1.)*10000. : (1./dir.x);
	inv_dir.y = abs(dir.y) < 0.0001 ? (step(dir.x, 0)*2.-1.)*10000. : (1./dir.y);
	inv_dir.z = abs(dir.z) < 0.0001 ? (step(dir.x, 0)*2.-1.)*10000. : (1./dir.z);

	int a = abs(dir.x) > abs(dir.y) ? 0 : 1;
	a = abs(dir[a]) > abs(dir.z) ? a : 2;
	dir *= abs(inv_dir[a]);
	inv_dir /= abs(inv_dir[a]);

}

int To1D(in ivec3 p, in ivec3 s){ return p.x + p.y*s.x + p.z*s.x*s.y; }
int To1D(in ivec3 p, in ivec4 s){ return p.x + p.y*s.x + p.z*s.x*s.y; }

ivec3 ToTopIndex(in ivec3 p){ return p >> 4; }
ivec3 ToMidIndex(in ivec3 p){ return p >> 2; }
ivec3 ToTopBit(in ivec3 p){ return (p>>2)-(p>>4<<2); }
ivec3 ToMidBit(in ivec3 p){ return p - (p>>2<<2); }

void main() 
{	
	vec3 dir,pos, inv_dir;
	MakeRay(pos, dir, inv_dir);

	float n, f;
	intersection(vec3(0.01), vec3(u_info.reso.xyz)-0.01, pos, inv_dir, n, f);
	pos = pos + max(n, 0.) * dir;
	if(!all(lessThan(pos, u_info.reso.xyz)) || !all(greaterThanEqual(pos, ivec3(0))))
	{
		imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), f16vec4(0,0,0,1));
		return;	
	}

	f16vec4 c = f16vec4(0.);
	int count = 0;
	while (all(lessThan(pos, u_info.reso.xyz)) && all(greaterThanEqual(pos, vec3(0))))
	{
		count++;
		ivec3 top_index = ToTopIndex(ivec3(pos));
		int hash = b_hashmap[To1D(top_index, u_info.reso>>4)];

		if(hash<0)
		{
			// skip
			vec3 min = (top_index<<4)-0.01;
			vec3 max = ((top_index+1)<<4)+0.01;
			intersection(min, max, pos, inv_dir, n, f);
			pos = fma(dir, vec3(f), pos);
			continue;
		}


		InteriorNode top = b_interior[hash];
		do
		{
			count++;
			ivec3 mid_index = ToMidIndex(ivec3(pos));
			ivec3 top_bit = ToTopBit(ivec3(pos));
			int tb = top_bit.x+top_bit.y*4+top_bit.z*16;
			if(!isBitOn(top.bitmask, tb))
			{
				vec3 min = (mid_index<<2)-0.01;
				vec3 max = ((mid_index+1)<<2)+0.01;
				intersection(min, max, pos, inv_dir, n, f);
				pos = fma(dir, vec3(f), pos);
				continue;
			}

//		c = f16vec4(1.);
//		pos = vec3(99999);
//		break;

			InteriorNode mid = b_interior[top.child+bitcount(top.bitmask,tb)];
			do
			{
				count++;
				ivec3 mid_bit = ToMidBit(ivec3(pos));
				int bb = mid_bit.x+mid_bit.y*4+mid_bit.z*16;
				if(!isBitOn(mid.bitmask, bb))
				{
					pos += dir;
					continue;
				}

				c = f16vec4(1.);
				pos = vec3(99999);
				break;

			} while(all(greaterThanEqual(pos, vec3(0))) && all(equal(mid_index, ToMidIndex(ivec3(pos)))));
		}
		while(all(greaterThanEqual(pos, vec3(0))) && all(equal(top_index, ToTopIndex(ivec3(pos)))));
	}
	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), c);
}