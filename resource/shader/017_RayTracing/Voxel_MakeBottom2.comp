#version 460

#extension GL_GOOGLE_include_directive : require
#define USE_Voxel 0
#include "Voxel.glsl"

layout (local_size_x = 4, local_size_y = 8, local_size_z = 4) in;
shared uvec4 s_map;

void main() 
{
	if(gl_LocalInvocationIndex==0)
	{
		s_map = uvec4(0);
	}
	memoryBarrierShared();
	barrier();

	bool ok = false;
	{
		vec3 p = vec3(gl_GlobalInvocationID.xyz)+0.5;
		float d = map(p-0.5);
		for(int z = 0; z < 2; z++)
		for(int y = 0; y < 2; y++)
		for(int x = 0; x < 2; x++)
		{
			if(z==0 && y==0 && x==0){continue;}
			if(sign(d) != sign(map(p + vec3(x, y, z)-0.5)))
			{
				ok = true;
				z=2;
				y=2;
				x=2;
			}
		}
	}

	if(ok)
	{
		uint index = gl_LocalInvocationID.x+ gl_LocalInvocationID.y*gl_WorkGroupSize.x+gl_LocalInvocationID.z*gl_WorkGroupSize.x*gl_WorkGroupSize.y;
		atomicOr(s_map[index/32], 1<<(index%32));
	}

	memoryBarrierShared();
	barrier();
	if(gl_LocalInvocationIndex==0)
	{
		int map_index = -1;
		if(any(notEqual(s_map, uvec4(0))))
		{
			map_index = atomicAdd(b_map_index_counter, 1);
			b_bottom[map_index] = s_map;
		}
		uint index = gl_WorkGroupID.x + gl_WorkGroupID.y*gl_NumWorkGroups.x + gl_WorkGroupID.z*gl_NumWorkGroups.x*gl_NumWorkGroups.y;
		b_map_index[index] = map_index;		
	}
}
