#version 460

#extension GL_GOOGLE_include_directive : require

#define USE_DC 0
#define USE_DC_WorkBuffer 1
#include "DualContouring.glsl"

// https://github.com/emilk/Dual-Contouring
/* Solves for x in  A*x = b.
	'A' contains the matrix row-wise.
	'b' and 'x' are column vectors.
Uses cramers rule.
*/
vec3 solve3x3(in f16mat3 A, in f16vec3 b) 
{
	float det = determinant(mat3(A));

	if (abs(det) <= 1e-12) {
		return vec3(127.);
	}

	return vec3 
	(
		determinant(mat3(
			b[0],    A[0][1], A[0][2],
			b[1],    A[1][1], A[1][2],
			b[2],    A[2][1], A[2][2])),

		determinant(mat3(
			A[0][0], b[0],    A[0][2],
			A[1][0], b[1],    A[1][2],
			A[2][0], b[2],    A[2][2])),

		determinant(mat3(
			A[0][0], A[0][1], b[0],
			A[1][0], A[1][1], b[1],
			A[2][0], A[2][1], b[2]))
	) / det;
}

/*
Solves A*x = b for over-determined systems.

Solves using  At*A*x = At*b   trick where At is the transponate of A
*/
vec3 leastSquares(in int N, in f16vec4[15] A)
{
	f16mat3 At_A = f16mat3(0.hf);
	f16vec3 At_b = f16vec3(0.hf);

	for (int k=0; k<N; ++k)
	{
		for (int i=0; i<3; ++i)
		{
			At_A[i] = fma(A[k][i].xxx, A[k].xyz, At_A[i]);
		}
		At_b = fma(A[k].xyz, A[k][3].xxx, At_b);
	}
	return solve3x3(At_A, At_b);
}

layout (local_size_x = 64) in;

void main() 
{

	uvec3 reso = Voxel_Reso;

	uvec3 cell_index = gl_GlobalInvocationID;
	uint idx = cell_index.x + cell_index.y*reso.x + cell_index.z*reso.x*reso.y;
	

	f16vec4 plane[15];
	int plame_num = 0;

	for (int z = 0; z < 2; z++)
	for (int y = 0; y < 2; y++)
	for (int x = 0; x < 2; x++)
	{
		ivec3 p = ivec3(x, y, z);

		uvec3 _i = cell_index+p;
		if(any(greaterThanEqual(_i, reso))){continue;}
		uint _idx = _i.x + _i.y*reso.x + _i.z*reso.x*reso.y;

		
		if((b_dc_cell_hashmap[_idx/32] & (1u<<(_idx%32))) == 0){continue;}

		DCCell cell = b_dc_cell[_idx];
		if(cell.axis_dist == 0){ continue; }

		for (int i = 0; i < 3; i++)
		{
			if((cell.axis_dist&(1<<i)) == 0){ continue; }
			ivec3 n = ivec3(i == 0, i == 1, i == 2);
			if (any(equal(n&p, ivec3(1)))){continue;}

			vec3 normal = unpack_normal_octahedron(cell.normal[i]);
			plane[plame_num] = f16vec4(normal, dot(normal, vec3(n*(float((cell.axis_dist>>(8+8*i)) & 0xff))+p*255.)));
			plame_num++;

		}
	}

	if(plame_num >= 1)
	{
		float n = 0.1;
		plane[plame_num++] = f16vec4(vec3(n, 0., 0.), dot(vec3(n, 0., 0.), vec3(127.5)));
		plane[plame_num++] = f16vec4(vec3(0., n, 0.), dot(vec3(0., n, 0.), vec3(127.5)));
		plane[plame_num++] = f16vec4(vec3(0., 0., n), dot(vec3(0., 0., n), vec3(127.5)));

		vec3 v = clamp(leastSquares(plame_num, plane), 0., 255.);
		b_dc_vertex[idx] = u8vec4(v, 0);

		atomicOr(b_dc_cell_hashmap[idx/32], 1u<<(idx%32));
	}


}