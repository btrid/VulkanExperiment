#version 460

#extension GL_GOOGLE_include_directive : require

#define USE_DC 0
#define USE_DC_WorkBuffer 1
#include "DualContouring.glsl"

/* Solves for x in  A*x = b.
	'A' contains the matrix row-wise.
	'b' and 'x' are column vectors.
Uses cramers rule.
*/
vec3 solve3x3(in float16_t A[3][3], in float16_t b[3]) {
	float det = determinant(mat3(
		A[0][0], A[0][1], A[0][2],
		A[1][0], A[1][1], A[1][2],
		A[2][0], A[2][1], A[2][2]));

	if (abs(det) <= 1e-12) {
		return vec3(0.5);
	}

	return vec3 
	(
		determinant(mat3(
			b[0],    A[0][1], A[0][2],
			b[1],    A[1][1], A[1][2],
			b[2],    A[2][1], A[2][2])),

		determinant(mat3(
			A[0][0], b[0],    A[0][2],
			A[1][0], b[1],    A[1][2],
			A[2][0], b[2],    A[2][2])),

		determinant(mat3(
			A[0][0], A[0][1], b[0],
			A[1][0], A[1][1], b[1],
			A[2][0], A[2][1], b[2]))
	) / det;
}

/*
Solves A*x = b for over-determined systems.

Solves using  At*A*x = At*b   trick where At is the transponate of A
*/
vec3 leastSquares(in int N, in f16vec4[16] A)
{
	float16_t At_A[3][3];
	float16_t At_b[3];

	for (int i=0; i<3; ++i)
	{
		for (int j=0; j<3; ++j)
		{
			float16_t sum = 0.hf;
			for (int k=0; k<N; ++k)
			{
				sum = fma(A[k][i], A[k][j], sum);
//				sum += A[k][i] * A[k][j];
			}
			At_A[i][j] = float16_t(sum);
		}
	}

	for (int i=0; i<3; ++i)
	{
		float16_t sum = 0.hf;
		for (int k=0; k<N; ++k)
		{
			sum = fma(A[k][i], A[k][3], sum);
		}

		At_b[i] = float16_t(sum);
	}
	return solve3x3(At_A, At_b);
}

layout (local_size_x = 64) in;

shared uint s_have_data;
bool init()
{
	if(gl_LocalInvocationIndex == 0)
	{
		s_have_data = 0;
	}

	barrier();
	memoryBarrierShared();

	if(gl_LocalInvocationIndex < 12)
	{
		uvec3 map_reso = Voxel_Reso / uvec3(32, 1, 1);
		uvec3 local = uvec3(gl_LocalInvocationIndex/4, (gl_LocalInvocationIndex/2)%2, gl_LocalInvocationIndex%2);
		uvec3 i = gl_WorkGroupID * uvec3(2, 1, 1) + local;
		if(all(lessThan(i, map_reso)))
		{
			uint idx = i.x + i.y * map_reso.x + i.z* map_reso.x * map_reso.y;
			uint map = b_dc_cell_hashmap[idx];

			if(map != 0) { atomicAdd(s_have_data, 1); }
		}
	}

	barrier();
	memoryBarrierShared();

	return s_have_data != 0;
}

void main() 
{
	if(!init()){ return; }

	vec3 axis[] = {vec3(1., 0., 0.),vec3(0., 1., 0.),vec3(0., 0., 1.),};
	uvec3 reso = Voxel_Reso;

	uvec3 cell_index = gl_GlobalInvocationID;
	uint idx = cell_index.x + cell_index.y*reso.x + cell_index.z*reso.x*reso.y;
	

	f16vec4 plane[16];
	int plame_num = 0;

	for (int z = 0; z < 2; z++)
	for (int y = 0; y < 2; y++)
	for (int x = 0; x < 2; x++)
	{
		ivec3 p = ivec3(x, y, z);

		uvec3 _i = cell_index+p;
		if(any(greaterThanEqual(_i, reso))){continue;}
		uint _idx = _i.x + _i.y*reso.x + _i.z*reso.x*reso.y;

		
		if((b_dc_cell_hashmap[_idx/32] & (1u<<(_idx%32))) == 0){continue;}

		DCCell cell = b_dc_cell[_idx];
		if(cell.axis_dist == 0){ continue; }

		for (int i = 0; i < 3; i++)
		{
			if((cell.axis_dist&(1<<i)) == 0){ continue; }
			ivec3 n = ivec3(i == 0, i == 1, i == 2);
			if (any(equal(n&p, ivec3(1)))){continue;}

			vec3 normal = unpack_normal_octahedron(cell.normal[i]);
			plane[plame_num] = f16vec4(normal, dot(normal, vec3(n*(float((cell.axis_dist>>(8+8*i)) & 0xff))+p*255.)));
			plame_num++;

		}

	}

	if(plame_num >= 1)
	{
		float n = 0.1;
		plane[plame_num++] = f16vec4(axis[0]*n, dot(axis[0]*n, vec3(127.5)));
		plane[plame_num++] = f16vec4(axis[1]*n, dot(axis[1]*n, vec3(127.5)));
		plane[plame_num++] = f16vec4(axis[2]*n, dot(axis[2]*n, vec3(127.5)));

		vec3 v = clamp(leastSquares(plame_num, plane), 0., 255.);
		b_dc_vertex[idx] = u8vec4(v, 0);

		atomicOr(b_dc_cell_hashmap[idx/32], 1u<<(idx%32));
	}


}