#version 460

#extension GL_GOOGLE_include_directive : require

#define USE_Model 0
#define USE_DC 1
#include "DualContouring.glsl"

struct Paylpad
{
	float HitT;
	uint PrimitiveID;
	uint HitKind;
};
layout(location = 0) rayPayloadEXT Paylpad payload;

void main() 
{
	uint grid = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y*gl_LaunchSizeEXT.x + gl_LaunchIDEXT.z*gl_LaunchSizeEXT.x*gl_LaunchSizeEXT.y;
	int head = -1;
	b_ldc_point_link_head[grid] = head;

//	if(gl_LaunchIDEXT.z == 0){ return; }
//	if(gl_LaunchIDEXT.z == 1){ return; }
//	if(gl_LaunchIDEXT.z == 2){ return; }

	vec3 axis[3] = {vec3(1., 0., 0.), vec3(0., 1., 0.),vec3(0., 0., 1.)};
	vec3 f = axis[(gl_LaunchIDEXT.z+0)%3];
	vec3 s = axis[(gl_LaunchIDEXT.z+1)%3]; 
	vec3 u = axis[(gl_LaunchIDEXT.z+2)%3];

	vec3 extent = Voxel_Block_Size;
	vec3 min = u_info.m_aabb_min.xyz;

	vec3 rate = vec3(gl_LaunchIDEXT) / vec3(gl_LaunchSizeEXT);
	vec3 origin = min + (s*rate.x*extent[(gl_LaunchIDEXT.z+1)%3]+u*rate.y*extent[(gl_LaunchIDEXT.z+2)%3]);

	payload.HitT = 0.;
	float tmax = extent[gl_LaunchIDEXT.z];

	for (int i = 0; i<16; i++)
	{
		traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, origin.xyz, payload.HitT, f, tmax, 0);
		if(payload.HitT < -1.)
		{
			break;
		}


		uvec3 i0 = b_index[payload.PrimitiveID];
		vec3 a = b_vertex[i0.x];
		vec3 b = b_vertex[i0.y];
		vec3 c = b_vertex[i0.z];
		vec3 normal = normalize(cross(b - a, c - a));

		LDCPoint point;
		point.p = payload.HitT / tmax;
		point.normal = pack_normal_octahedron(normal);
		point.next = head;
		point.flag = payload.HitKind;

		int index = atomicAdd(b_ldc_counter, 1);
		b_ldc_point[index] = point;

		head = index;
	}
	b_ldc_point_link_head[grid] = head;

}
