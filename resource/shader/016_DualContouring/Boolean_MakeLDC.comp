#version 460

#extension GL_GOOGLE_include_directive : require

#define USE_Boolean 0
#include "Boolean.glsl"

#define USE_DC 1
#include "DualContouring.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

void main() 
{

	vec3 extent = Voxel_Block_Size;

	float t = 0.;
	float tmax = 9999.;

	vec3 rate = vec3(gl_GlobalInvocationID) / vec3(Voxel_Reso);
	vec3 origin = (s*rate.x*extent[(gl_GlobalInvocationID.z+1)%3]+u*rate.y*extent[(gl_GlobalInvocationID.z+2)%3]);

	vec3 pos = constants.pos.xyz;
	origin -= f*pos[(gl_GlobalInvocationID.z+0)%3] + (s*pos[(gl_GlobalInvocationID.z+1)%3]+u*pos[(gl_GlobalInvocationID.z+2)%3]);

	LDCPoint point_b = getLDCPoint(t, tmax*99., origin, f);
	if(!is_valid(point_b)){ return; }

	int grid = int(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*Voxel_Reso.x + gl_GlobalInvocationID.z*Voxel_Reso.x*Voxel_Reso.y);
	int head = -1;

	// loop
	{
		bool is_incident_a = false;
		bool is_incident_b = false;

		for(;is_valid(point_a)||is_valid(point_b);)
		{
			bool is_a = false;
			bool is_b = false;
			LDCPoint point = g_invalid_point;
			if(point_a.p[0]<=point_b.p[0])
			{
				if(!is_incident_a && !is_incident_b)
				{
					// 開始
					point = point_a;
				}
				else if(is_incident_a && !is_incident_b)
				{
					// 終了
					point = point_a;
				}

				is_a = true;

			}
			if(point_a.p[0]>=point_b.p[0])
			{
				if(!is_incident_a && !is_incident_b)
				{
					// 開始
					point = point_b;
				}
				else if(!is_incident_a && is_incident_b)
				{
					// 終了
					point = point_b;
				}

				is_b = true;
			}

			if(is_a)
			{
				is_incident_a = !is_incident_a;
				if(index_a>=0)
				{
					point_a = b_ldc_point[index_a];
					int next = b_ldc_point_link_next[index_a];
					free_ldc_point(index_a);
					index_a = next;
				}
				else
				{
					point_a = g_invalid_point;
				}
			}
			if(is_b)
			{
				is_incident_b = !is_incident_b;
				point_b = getLDCPoint(t, tmax, origin, f);
			}

			if(is_valid(point))
			{
				int index = allocate_ldc_point();
				if(head==-1) { b_ldc_point_link_head[grid] = index; }
				else { b_ldc_point_link_next[head] = index; }
				b_ldc_point[index] = point;
				head = index;
			}
		}

		if(is_incident_b)
		{
			LDCPoint point = {u8vec2(255, 254), LDCFlag_Exit, pack_normal_octahedron(f)};
			int index = allocate_ldc_point();
			if(head==-1) { b_ldc_point_link_head[grid] = index; }
			else { b_ldc_point_link_next[head] = index; }
			b_ldc_point[index] = point;

			head = index;
			is_incident_b = false;
		}

		if(head==-1) { b_ldc_point_link_head[grid] = -1; }
		else { b_ldc_point_link_next[head] = -1; }

	}

	
}