#version 460

#extension GL_GOOGLE_include_directive : require

#define USE_Boolean 0
#include "Boolean.glsl"

#define SETPOINT_CAMERA 1
#include "btrlib/Camera.glsl"

#define USE_RenderTarget 2
#include "applib/System.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

void MakeRayFromScreen(in vec3 eye, in vec3 target, in vec3 up, in vec2 screen, in float fov_y, in float aspect, out vec3 p, out vec3 dir)
{
	vec3 foward = normalize(target - eye).xyz;
	vec3 side = normalize(cross(up, foward));

	// イメージセンサー上の位置
	float tan_fov_y = tan(fov_y / 2.);

	dir = normalize(foward + side * -screen.x * tan_fov_y * aspect + up * screen.y * tan_fov_y);
	p = eye.xyz;
}

void main() 
{
	float t = 0.;
	float tmax = 99999.;

	Camera cam = u_camera[0];
	vec3 origin;
	vec3 ray;
	vec2 screen = (gl_GlobalInvocationID / vec3(gl_NumWorkGroups * gl_WorkGroupSize)).xy * 2. - 1.;
	MakeRayFromScreen(cam.u_eye.xyz, cam.u_target.xyz, cam.u_up.xyz, screen, cam.u_aspect, cam.u_fov_y, origin, ray);

	vec3 color = vec3(0., 0., 0.);
	rayQueryEXT q;
	for(;;)
	{
		rayQueryInitializeEXT(q, u_Boolean_TLAS, gl_RayFlagsOpaqueEXT, 0xFF, origin, t, ray, tmax);
		while(rayQueryProceedEXT(q)) {}

		t = rayQueryGetIntersectionTEXT(q, true);
		if(t >= tmax)
		{ 
			break;
		}

		vec3 normal = rayQueryGetIntersectionObjectRayDirectionEXT(q, true);
		color = normal;
		break;
	}
	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));
}