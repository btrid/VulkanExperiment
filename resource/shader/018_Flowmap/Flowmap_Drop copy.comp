#version 460

#extension GL_GOOGLE_include_directive : require
#define USE_Flowmap 0
#include "Flowmap.glsl"

layout (local_size_x=8, local_size_y=8) in;

layout(push_constant, std430) uniform PC
{
	vec4 point[4];
	int num;
	int seed;
} constant;

float DropMap(vec3 p)
{
	float amplification = 4.;
	p*= 0.2;
	float v = 0.;
	float c = 0.;
	for(int i = 0; i < 4; i++)
	{
		v = v*amplification + noise(p);
		c = c*amplification + 1.;
		p*=1.3;
	}
	return v / c;
}


void main() 
{
	uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_info.reso.x;
	float v = b_value[index];
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	for(int i = 0; i < constant.num; i++)
	{
		vec4 drop = constant.point[i];

		float dist = distance(vec2(uv)+0.5, drop.xy);
		float influence = drop.z/dist;
		if(influence >= 0.5)
		{
			float dropmap = DropMap(vec3(uv, i));
			influence *= smoothstep(0.5, 0.5, influence*dropmap);

			if(influence > 0.001)
				v = influence * drop.w;
		}		
	}

	b_value[index] = v;

	if(index < constant.num)
	{
		b_drop[index].pos = constant.point[index].xy; 
		b_drop[index].size = constant.point[index].z;
		b_drop[index].type = constant.point[index].w; 
		b_drop[index].time = 0.; 
	}

	if(index < 64)
	{
		b_drop[index].time += 1.;
	}

}
