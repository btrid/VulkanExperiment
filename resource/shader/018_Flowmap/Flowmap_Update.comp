#version 460

#extension GL_GOOGLE_include_directive : require
#define USE_Flowmap 0
#include "Flowmap.glsl"

layout (local_size_x=8, local_size_y=8) in;

layout(push_constant, std430) uniform PC
{
	vec4 point[4];
	int num;
	int seed;
} constant;

float DropMap(vec3 p)
{
	float amplification = 1.;
	p*= 0.03;
	float v = 0.;
	float c = 0.;
	for(int i = 0; i < 4; i++)
	{
		v = v*amplification + noise(p);
		c = c*amplification + 1.;
		p*=1.3;
	}
	return v / c;
}


void main() 
{
	uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_info.reso.x;
	float v = b_value[index];
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

/*	{
		float tv = 0.;
		for(int y = -1; y<=1; y++)
		for(int x = -1; x<=1; x++)
		{
			ivec2 target = uv+ivec2(x, y);
			if(any(lessThan(target, ivec2(0))) || any(greaterThanEqual(target, u_info.reso.xy)))
			{
				continue;
			}
			uint ti = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_info.reso.x;
			tv += b_value[ti];
		}
		float is_same = float(v!=0. || sign(v) == sign(tv));
		influence *= ((1.-is_same)*0.5+0.5);
	}
*/
	for(int i = 0; i < constant.num; i++)
	{
		vec4 drop = constant.point[i];

		float dist = distance(vec2(uv)+0.5, drop.xy);
		float influence = drop.z/dist;
		if(influence >= 0.5)
		{
			float dropmap = DropMap(vec3(uv, i));
			influence *= smoothstep(0.5, 0.5, influence*dropmap);

			// 違うところへ塗るには影響力を小さくする?
//			float is_same = float(v!=0. || sign(v) == sign(drop.w));
//			influence *= ((1.-is_same)*0.5+0.5);
			if(influence > 0.001)
				v = influence * drop.w;
		}		
	}


	b_value[index] = v;

}
