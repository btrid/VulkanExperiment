#version 460

#extension GL_GOOGLE_include_directive : require
#define USE_Flowmap 0
#include "Flowmap.glsl"

#define USE_RenderTarget 1
#include "applib/System.glsl"

layout (local_size_x=8, local_size_y=8) in;

layout(push_constant, std430) uniform PC
{
	vec4 point[4];
	int num;
	int seed;
} constant;


float FlowMap(vec3 p)
{
	float amplification = 1.2;
	p*= 0.03;
	float v = 0.;
	float c = 0.;
	for(int i = 0; i < 4; i++)
	{
		v = v*amplification + noise(p);
		c = c*amplification + 1.;
		p*=1.53;
	}
	return (v / c)*2.-1.;
}

vec2 rotate(in vec2 v, in float angle)
{
	float c = cos(angle);
	float s = sin(angle);
	return vec2(c*v.x - s*v.y, s*v.x + c*v.y);
}

vec2 Wind = vec2(1., 0.);

void main()
{
	float flow = FlowMap(vec3(gl_GlobalInvocationID.xy+Wind*constant.seed*0.02, constant.seed*0.005));
	ivec2 target = ivec2(gl_GlobalInvocationID.xy - rotate(Wind,flow*0.4*6.28)*50.);
	int ti = target.x + target.y*u_info.reso.x;
	float v = b_value[ti];
	
	vec3 color1 = vec3(1.0, 0.5, 0.5);
	vec3 color2 = vec3(0.5, 0.5, 1.0);
	vec3 color = mix(color1, color2, step(v, 0.));

	color = texture(t_floor, vec2(target)/u_info.reso.xy).rgb;

	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));
}
