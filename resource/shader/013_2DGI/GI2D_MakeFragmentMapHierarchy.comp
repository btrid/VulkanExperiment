#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#include "GI2D.glsl"

layout(push_constant) uniform InputVertex
{
	int level;
} constant;

layout (local_size_x = 32, local_size_y = 32) in;

shared uint s_bit[64][2];
shared uint s_light_bit[64][2];
void main()
{
	uvec2 reso = u_gi2d_info.m_resolution.xy;
	if(any(greaterThan(gl_GlobalInvocationID.xy, reso.xy>>(constant.level)))){
		return;
	}

	// fragment hierarchy
	int level = constant.level;
	int prev_level = constant.level-1;
	{
		uvec2 index_2d = gl_LocalInvocationID.xy / 8;
		uint index = index_2d.x+index_2d.y*4;
		uvec2 localsub = gl_LocalInvocationID.xy % 8;
		{
			if(all(equal(localsub, uvec2(0))))
			{
				s_bit[index][0] = 0;
				s_bit[index][1] = 0;
				s_light_bit[index][0] = 0;
				s_light_bit[index][1] = 0;
			}
		}
		barrier();
		memoryBarrierShared();

		{
			int foffset = getFragmentMapHierarchyOffset(prev_level);

			uvec2 idx2d = gl_GlobalInvocationID.xy*2;
			uvec4 findex = uvec4(idx2d.xy/8, idx2d.xy%8);
			uvec2 findex_1d = findex.xz + findex.yw*uvec2(reso.x/(8<<prev_level), 8);
			if(findex_1d.x < getFragmentMapHierarchyOffset(level))
			{
				uint64_t diffuse_map = b_fragment_map[findex_1d.x + foffset].x;
				uint64_t light_map = b_fragment_map[findex_1d.x + foffset].y;

				uint64_t bit = 1ul<<findex_1d.y;
				uint64_t is_have = (diffuse_map & bit);
				is_have |= (diffuse_map & (bit<<1));
				is_have |= (diffuse_map & (bit<<8));
				is_have |= (diffuse_map & (bit<<9));
				if(is_have != 0)
				{
					uint bit_offset = localsub.x + localsub.y*8;
					uint hilow = bit_offset/32;
					uint offset = bit_offset%32;
					atomicOr(s_bit[index][hilow], 1<<offset);
				}
				is_have = (light_map & bit);
				is_have |= (light_map & (bit<<1));
				is_have |= (light_map & (bit<<8));
				is_have |= (light_map & (bit<<9));
				if(is_have != 0)
				{
					uint bit_offset = localsub.x + localsub.y*8;
					uint hilow = bit_offset/32;
					uint offset = bit_offset%32;
					atomicOr(s_light_bit[index][hilow], 1<<offset);
				}

			}
		}
		barrier();
		memoryBarrierShared();

		if(all(equal(localsub, uvec2(0))))
		{
			uint64_t bit =  uint64_t(s_bit[index][1]) << 32 | s_bit[index][0];
			uint64_t light_bit =  uint64_t(s_light_bit[index][1]) << 32 | s_light_bit[index][0];
			uvec2 global = gl_GlobalInvocationID.xy/8;
			uint store = global.x + global.y*(reso.x/(8<<level));

			int offset = getFragmentMapHierarchyOffset(level);
			b_fragment_map[store+offset] = u64vec2(bit, light_bit);

		}
	}
}

