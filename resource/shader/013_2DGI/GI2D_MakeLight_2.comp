#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#include "GI2D.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform InputVertex
{
	int level;
} constant;

void makeLight(in int frame)
{
	ivec2 reso = u_gi2d_info.m_resolution;
	uint offset = 0;
	for(int i = 0; i < constant.level-1; i++)
	{
		offset += (reso.x>>i)*(reso.y>>i);
	}
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);
	ivec2 src = ivec2(id*2);
	uvec4 l;
	l.x = b_light[offset + getMemoryOrder(src)];
	l.y = b_light[offset + getMemoryOrder(src+ivec2(1, 0))];
	l.z = b_light[offset + getMemoryOrder(src+ivec2(0, 1))];
	l.w = b_light[offset + getMemoryOrder(src+ivec2(1, 1))];
	uint ll = packEmissive(unpackEmissive4(l));
	offset += (reso.x>>(constant.level-1))*(reso.y>>(constant.level-1));
	b_light[offset+getMemoryOrder(id)] = ll;
}
void main()
{
	makeLight(0);
}

