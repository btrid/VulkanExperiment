#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_PM 0
#define USE_PM_RENDER 1
#include "PM.glsl"


layout(push_constant) uniform BounceInfo
{
	int bounce_count;
	int store_photon_index;
} constant;
#define u16_max (0xffff)
#define fragment_state_non (0)
#define fragment_state_wall (1)
#define fragment_state_light (2)
#define fragment_state_bounce (3)
#define fragment_state_bounce_hit (4)

layout (local_size_x = 32, local_size_y = 32) in;
void main()
{
	const vec2 pixel_size = vec2(1., 1.);
	const vec2 subpixel = pixel_size.xy*(1<<constant.bounce_count);

	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	const ivec2 bounce_reso = ivec2(u_pm_info.m_resolution.xy)>>constant.bounce_count;
	const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy)<<constant.bounce_count;
	int fragment_state = fragment_state_non;
	vec3 albedo = vec3(0.);
	vec3 illuminance = vec3(0.);
	{
		ivec4 fragment_index = ivec4(gl_GlobalInvocationID.xy/8, gl_GlobalInvocationID.xy%8);
		ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z>>constant.bounce_count, 8);
		int offset = getFragmentMapHierarchyOffset(constant.bounce_count);
		uint64_t fragment_map = b_fragment_map[fragment_index_1d.x + offset];
		uint64_t bit = 1ul<<fragment_index_1d.y;

		fragment_state = ((fragment_map & bit) != 0) ? fragment_state_wall : fragment_state_non;
		albedo = (fragment_state == fragment_state_wall) ? b_fragment[pixel.x + pixel.y * reso.x].albedo.xyz : vec3(0., 0., 1.);

	}

	int light_count = -1;
	uint64_t reached = 0;
	const ivec2 tile_index_2d = pixel / ivec2(u_pm_info.m_emission_tile_size.xy);
	const int tile_index = int(tile_index_2d.x + tile_index_2d.y*u_pm_info.m_emission_tile_num.x);
	for(int i = b_emission_tile_linkhead[tile_index]; i != -1; i= b_emission_tile_linklist[i].next)
	{
		light_count++;
		vec2 end = pixel;
		vec2 start;
		vec4 radiance;

		Emission light;
		{
			int emission_index = b_emission_tile_linklist[i].target;
			int eoffset = u_pm_info.m_emission_buffer_offset[constant.bounce_count];
			light = b_emission[emission_index+eoffset];
			radiance = light.emission;
			ivec2 e_index_2d = ivec2(emission_index%bounce_reso.x, emission_index/bounce_reso.x);
			start = vec2(e_index_2d<<constant.bounce_count);
		}
		ivec2 iend = ivec2(end+0.5);
		ivec2 istart = ivec2(start+0.5);
		ivec2 idir = iend - istart;
		if(all(equal(idir, ivec2(0))))
		{
			// ライト自身
//			fragment_state = fragment_state_light;
			illuminance += albedo*radiance.xyz;
			continue;
		}

		const vec2 diff = (end - start);
		const float ray_dist = length(diff.xy);
//		vec3 illumi = radiance.xyz / (1.+ray_dist*ray_dist);
		vec3 illumi = radiance.xyz / (1.+ray_dist);
//		vec3 illumi = radiance.xyz;
		if(dot(illumi, illumi) <= FLT_EPSIRON){
			// 影響範囲外
			continue;
		}

		vec4 l_dir = rotate2(light.dir.xx + vec2(-light.angle, light.angle));
		vec3 a = cross(vec3(l_dir.xy, 0.), vec3(diff, 0.));
		vec3 b = cross(vec3(l_dir.zw, 0.), vec3(diff, 0.));
		if(light.angle>=0. && (a.z > 0. || b.z < 0.))
		{
			// spotlight影響範囲外
			continue;
		}

		int goal_index = abs(idir.x) >= abs(idir.y) ? 0: 1;

		vec2 subpos = sign(idir.xy)*0.5+0.5;
		start = start + subpixel*(subpos.xy);
		end = end + subpixel*(1.-subpos.xy);


		vec2 dir = normalize(end - start);
		dir *= abs(dir.x) >= abs(dir.y) ? abs(1./dir.x) : abs(1./dir.y);
#if 1
		vec2 inv_dir;
		inv_dir.x = dir.x == 0. ? 9999999. : (1./dir.x);
		inv_dir.y = dir.y == 0. ? 9999999. : (1./dir.y);
		inv_dir = abs(inv_dir);
#else
		vec2 inv_dir = abs(1./dir);
#endif
		vec2 pos = start;
		ivec2 map_index = ivec2(pos / pixel_size.xy);

		const ivec2 map_index_origin = ivec2(greaterThanEqual(idir, ivec2(0)));

		float absorb = 0.;
		for(int i = 0; i <50000; i++)
		{
			{
				int hierarchy=7;
				for(; hierarchy>constant.bounce_count; hierarchy--)
				{
#if 1
					ivec2 findex2d = map_index>>hierarchy;
					int findex = findex2d.x + findex2d.y*(reso.x>>hierarchy);
					findex += getFragmentHierarchyOffset(hierarchy);
					uint fragment_map = b_fragment_hierarchy[findex.x];
#else
					ivec2 map_index_hie = map_index>>hierarchy;
					ivec4 fragment_index = ivec4(map_index_hie/8, map_index_hie%8);
					ivec4 findex = fragment_index.xxxx + fragment_index.yyyy*(reso.zzzz>>hierarchy);
					findex +=  getFragmentMapHierarchyOffset(hierarchy);
					uint64_t fragment_map = b_fragment_map[findex.x];

/*					ivec2 cell_origin = map_index_origin<<3;
					ivec2 map_index_sub = fragment_index.zw;
					ivec2 imove = abs(cell_origin - map_index_sub);

					ivec2 r_begin = map_index_sub;
					ivec2 r_end = r_begin+imove;
					ivec2 area_begin = min(r_begin, r_end);
					ivec2 area_end = max(r_begin, r_end);
					ivec2 area = area_end - area_begin+1;
					area = clamp(area, 1, 8);

					uint64_t x_line_mask = ((0x1ul<<area.x)-1);// << area_begin.x;
					uint64_t x_mask = x_line_mask | (x_line_mask << 8) | (x_line_mask << 16) | (x_line_mask << 24) | (x_line_mask << 32) | (x_line_mask << 40) | (x_line_mask << 48) | (x_line_mask << 56);
					uint64_t y_mask = ((0x1ul<<(area.y*8))-1);// << (area_begin.y * 8);
*/
//					fragment_map &= x_mask & y_mask;
#endif					
					if(fragment_map == 0)
					{
						break;
					}
				}

				ivec2 findex2d = map_index>>hierarchy;

				ivec2 cell_origin = map_index_origin<<hierarchy;
				ivec2 map_index_sub = map_index - (findex2d<<hierarchy);
				vec2 cell_p = abs(cell_origin - (map_index_sub+fract(pos))) + pixel_size*0.5;
				vec2 axis = abs(cell_p*inv_dir);
				pos = min(axis.x, axis.y)*dir + pos;
				map_index = ivec2(pos);
			}

			// 終了判定
			if(abs(idir[goal_index]) - abs(map_index[goal_index]-istart[goal_index]) < 1<<constant.bounce_count)
			{
				// 距離を超えたら光がフラグメントにヒット
				illuminance += albedo*illumi;
				if(fragment_state == fragment_state_wall){
					fragment_state = fragment_state_bounce;
				}

				reached |= 1<<light_count;
				break;
			}
			// hit確認
			{
				ivec2 map_index_sub = map_index>>constant.bounce_count;
				ivec4 fragment_index = ivec4(map_index_sub/8, map_index_sub%8);
				ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z>>constant.bounce_count, 8);

				int offset = getFragmentMapHierarchyOffset(constant.bounce_count);
				uint64_t fragment_map = b_fragment_map[fragment_index_1d.x + offset];
				uint64_t bit = 1ul<<fragment_index_1d.y;
				if((fragment_map & bit) != 0)
				{ 
					absorb += 1.34;
					if(absorb >= 1.)
					{
						break;
					}
				}
			}
		}
	}

	// バウンス
#if 0
	if(fragment_state == fragment_state_bounce && constant.store_photon_index>0 && /*illuminance.b !=0.*/ dot(illuminance, illuminance) >= 1.1)
	{
		int store_shift = constant.store_photon_index;
		const ivec2 store_reso = ivec2(u_pm_info.m_resolution.xy)>>store_shift;
		ivec2 store_index_2d = ivec2(gl_GlobalInvocationID.xy)>>store_shift;
		int store_index = store_index_2d.x + store_index_2d.y*store_reso.x;

		int e_offset = u_pm_info.m_emission_buffer_offset[store_shift];
		if(atomicCompSwap(b_emission_map[e_offset + store_index], -1, 0) == -1)
		{
			int list_index = atomicAdd(b_emission_counter[store_shift].x, 1);
			b_emission_list[e_offset+list_index] = store_index;
		}
		b_emission[e_offset+store_index].value = vec4(illuminance.rgb, 1.);
	}
#endif
	// store
	{
		b_emission_reached[gl_GlobalInvocationID.x+gl_GlobalInvocationID.y*reso.x] = reached;
	}

}
