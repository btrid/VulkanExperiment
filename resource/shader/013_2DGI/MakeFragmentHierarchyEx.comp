#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout (local_size_x = 32, local_size_y = 32) in;

shared uint s_bit[16][2];
shared int s_fragment_num[32*32];
void main()
{
	uint tiled_1D_index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_pm_info.m_resolution.x; 
	vec3 albedo = b_fragment[tiled_1D_index].albedo;
	bool is_fragment = dot(albedo, albedo) >= 0.001;

	for(int i = 0; i < 5; i++)
	{
		s_fragment_num[gl_LocalInvocationIndex] = 0;
		barrier();
		memoryBarrierShared();

		uint index = gl_LocalInvocationIndex>>(2*i);
		if(is_fragment)
		{
			atomicAdd(s_fragment_num[index], 1);
		}
		barrier();
		memoryBarrierShared();

		if(all(equal(gl_GlobalInvocationID.xy % (1>>i), uvec2(0))))
		{
			uvec2 idx2d = gl_GlobalInvocationID.xy / (1>>i);
			uint offset = idx2d.x+idx2d.y*(u_pm_info.m_resolution.x / (1>>i));
			b_fragment_map[u_pm_info.m_fragment_map_offset[i] + offset] = s_fragment_num[index];
		}
	}

	uvec2 local = gl_LocalInvocationID.xy / 8;
	uint index = local.x+local.y*4;
	uvec2 localsub = gl_LocalInvocationID.xy % 8;
	if(all(equal(local, uvec2(0))))
	{
		s_bit[index][0] = 0;
		s_bit[index][1] = 0;
	}
	barrier();
	memoryBarrierShared();

	if(is_fragment)
	{
		uint bit_offset = localsub.x + localsub.y*8;
		uint hilow = bit_offset/32;
		uint offset = bit_offset%32;
		atomicOr(s_bit[index][hilow], 1<<offset);
	}
	barrier();
	memoryBarrierShared();

	if(all(equal(local, uvec2(0))))
	{
		uint64_t bit =  uint64_t(s_bit[index][1]) << 32 | s_bit[index][0];
		uint l1_index_1d = gl_WorkGroupID.x + gl_WorkGroupID.y*(u_pm_info.m_resolution.x/8);
		b_fragment_hierarchy[l1_index_1d] = bit;
	}
}

