#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

#define HALF_PI (1.5707963)
#define TWO_PI (6.28318530)
#define QUARTER_PI (0.7853981633)

layout (local_size_x=128) in;

void main()
{
	const ivec4 reso = u_gi2d_info.m_resolution;

	uint ray_index = gl_GlobalInvocationID.x + u_radiosity_info.ray_frame_max*u_gi2d_scene.m_frame;
	D2Ray ray = b_ray[ray_index];
	vec2 dir = calcDir(ray.angle);
	vec2 inv_dir = abs(1./dir);
	int y = int(ray.angle / HALF_PI);
//	if(y == 0) return;
//	if(y == 2) return;
	int fragment_offset = (y%2) * reso.z*reso.w; // 縦ほうこうに進む場合
	vec2 cell_origin = vec2(greaterThanEqual(dir, vec2(0.))) * vec2(8.);

	D2Segment seg;
	seg.ray_index = ray_index;
	seg.begin = 0;
	seg.march = 0;
	seg.radiance = 0;
	int march_count = 0;
	for(; march_count < ray.march; )
	{
		vec2 pos = fma(dir, float(march_count).xx, ray.origin);
		ivec2 map_index = ivec2(pos);

		ivec2 cell = map_index>>3;
		u64vec2 map = b_fragment_map[((y%2)==0) ? (cell.x + cell.y*reso.z) : (cell.y + cell.x*reso.w + fragment_offset)];

		vec2 pos_sub = vec2(pos - vec2(cell << 3));
		vec2 tp = vec2(abs(cell_origin - pos_sub)) * inv_dir;
		int _axis = tp.x < tp.y ? 0 : 1;
		int skip = int(tp[_axis] + 1.);

		if(all(equal(map.xy, u64vec2(0,0))))
		{
			seg.march+=skip;
			march_count+=skip;
			continue;
		}

		for(uint i = 0; i < skip; i++)
		{
			pos = fma(dir, float(march_count).xx, ray.origin);
			map_index = ivec2(pos);
			ivec2 cell_sub = map_index % 8;
			bvec2 attr = notEqual((map & (1ul<<(cell_sub.x+cell_sub.y*8))), u64vec2(0));
			if(attr.y)
			{
				seg.radiance += b_light[getMemoryOrder(map_index)];
			}
			if(attr.x)
			{
				if(seg.march > 1)
				{
					int index = atomicAdd(b_segment_counter.w, 1);
					if(index%1024==0){
						atomicAdd(b_segment_counter.x, 1);
					}
					b_segment[index] = seg;
				}
				seg.begin = march_count;
				seg.march = 0;
				seg.radiance = 0;
			}
			seg.march++;
			march_count++;
		}

	}

	// 行きすぎたら戻す
	seg.march -= march_count-ray.march;
	if(seg.march > 1)
	{
		int index = atomicAdd(b_segment_counter.w, 1);
		if(index%1024==0){
			atomicAdd(b_segment_counter.x, 1);
		}
		b_segment[index] = seg;
	}


}
