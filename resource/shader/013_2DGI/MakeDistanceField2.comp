#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout (local_size_x = 32*32, local_size_y = 1) in;

layout(push_constant) uniform Input
{
	int count;
} constant;

void main()
{
	if(gl_GlobalInvocationID.x >= b_sdf_counter[constant.count*4+3])
	{
		 return;
	}

	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	uint work_index = atomicAdd(b_sdf_counter[9*4+1], 1);

//	SDFWork work;
	uint map_index = b_sdf_work[work_index].map_index;
	uint hierarchy = b_sdf_work[work_index].hierarchy;
	uint fragment_idx_1d = b_sdf_work[work_index].fragment_idx;

	const ivec2 h_reso = ivec2(u_pm_info.m_resolution.xy >> hierarchy);
	uvec2 f_idx_2d = uvec2(fragment_idx_1d % h_reso.x, fragment_idx_1d / h_reso.x);

	uint64_t map[4];
	uvec4 fragment_index;
	{
		hierarchy -= 1;

		f_idx_2d <<= 1;
		ivec2 f_idx_offset = ivec2(1);

		int offset = getFragmentMapHierarchyOffset(hierarchy);
		ivec4 fragment_idx = ivec4(f_idx_2d/8, f_idx_2d%8);
		ivec2 f_idx = fragment_idx.xy + f_idx_offset*ivec2(0, 0);
		fragment_index[0] = f_idx.x + f_idx.y*(reso.z>>hierarchy);
		f_idx = fragment_idx.xy + f_idx_offset*ivec2(0, 1);
		fragment_index[1] = f_idx.x + f_idx.y*(reso.z>>hierarchy);
		f_idx = fragment_idx.xy + f_idx_offset*ivec2(1, 0);
		fragment_index[2] = f_idx.x + f_idx.y*(reso.z>>hierarchy);
		f_idx = fragment_idx.xy + f_idx_offset*ivec2(1, 1);
		fragment_index[3] = f_idx.x + f_idx.y*(reso.z>>hierarchy);

		map[0] = b_fragment_map[fragment_index[0] + offset];
		map[1] = b_fragment_map[fragment_index[1] + offset];
		map[2] = b_fragment_map[fragment_index[2] + offset];
		map[3] = b_fragment_map[fragment_index[3] + offset];
	}

	int next_level = constant.count+1;
	int count_index = hierarchy == 0 ? (8*4+0) : (next_level*4+3);
	int count_work_index = hierarchy == 0 ? (9*4+2) : (9*4+0);
	int work_offset = hierarchy == 0 ? u_pm_info.m_sdf_work_num : 0;
	for(int i = 0; i<4; i++)
	{
		if(map[i] == 0){ continue;}
		int local_index = atomicAdd(b_sdf_counter[count_index], 1);
		if(hierarchy != 0 && local_index%(32*32) == 0)
		{
			atomicAdd(b_sdf_counter[next_level*4+0], 1);
		}
		uint index = atomicAdd(b_sdf_counter[count_work_index], 1);
		SDFWork work;
		work.map_index = map_index;
		work.hierarchy = hierarchy;
		work.fragment_idx = fragment_index[i];
		b_sdf_work[index + work_offset] = work;
	}

}

