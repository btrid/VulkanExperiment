#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_SV 0
#include "SV.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

void main()
{
	uint findex = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_sv_info.m_resolution.x; 
	vec3 albedo = b_fragment[findex].albedo;
	bool is_fragment = dot(albedo, albedo) >= 0.01;
	if(!is_fragment){ return; }

	vec2 fpos = gl_GlobalInvocationID.xy * 1. + 0.5;
	for(int i = 0; i < b_emission_counter.x; i++)
	{
		vec2 pos = b_emission[i].pos;
		vec2 tan_a;
		vec2 tan_b;
		{
			vec2 dir = normalize(fpos - pos);
			float angle = cross(vec3(fpos + vec2(-0.5, -0.5), 0), vec3(pos, 0)).z;
			float a = angle;
			float b = angle;
			tan_a = fpos + vec2(-0.5, -0.5);
			tan_b = fpos + vec2(-0.5, -0.5);

			angle = cross(vec3(fpos + vec2(0.5, -0.5), 0), vec3(pos, 0)).z;
			if(a <= angle){
				a = angle;
				tan_a = fpos + vec2(0.5, -0.5);
			}
			if(b >= angle){
				b = angle;
				tan_b = fpos + vec2(0.5, -0.5);				
			}
			angle = cross(vec3(fpos + vec2(-0.5, 0.5), 0), vec3(pos, 0)).z;
			if(a <= angle){
				a = angle;
				tan_a = fpos + vec2(-0.5, 0.5);
			}
			if(b >= angle){
				b = angle;
				tan_b = fpos + vec2(-0.5, 0.5);				
			}

			angle = cross(vec3(fpos + vec2(0.5, 0.5), 0), vec3(pos, 0)).z;
			if(a <= angle){
				a = angle;
				tan_a = fpos + vec2(0.5, 0.5);
			}
			if(b >= angle){
				b = angle;
				tan_b = fpos + vec2(0.5, 0.5);				
			}
		}
		{
			vec2 dir_a = normalize(tan_a - pos) * 1000.;
			vec2 dir_b = normalize(tan_b - pos) * 1000.;
			uint sv_index = atomicAdd(b_shadow_volume_counter.vertexCount, 6);
			b_shadow_volume[sv_index+0] = tan_a;
			b_shadow_volume[sv_index+1] = tan_a+dir_a;
			b_shadow_volume[sv_index+2] = tan_b;
			b_shadow_volume[sv_index+3] = tan_a;
			b_shadow_volume[sv_index+4] = tan_b+tan_b;
			b_shadow_volume[sv_index+5] = tan_b;
//			b_shadow_volume[0] = vec2(0);
//			b_shadow_volume[1] = vec2(100);
//			b_shadow_volume[2] = vec2(200);
//			b_shadow_volume[3] = vec2(300);
//			b_shadow_volume[4] = vec2(400);
//			b_shadow_volume[5] = vec2(500);
		}
	}



}