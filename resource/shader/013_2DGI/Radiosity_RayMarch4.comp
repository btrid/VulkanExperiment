#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

#define HALF_PI (1.5707963)
#define TWO_PI (6.28318530)
#define QUARTER_PI (0.7853981633)

layout (local_size_x=128) in;

shared u64vec2 s_fragment[17];
shared ivec2 s_base_cell;
void main()
{
	const ivec4 reso = u_gi2d_info.m_resolution;

	uint ray_index = gl_GlobalInvocationID.x + u_radiosity_info.ray_frame_max*u_gi2d_scene.m_frame;
	D2Ray ray = b_ray[ray_index];
	vec2 dir = calcDir(ray.angle);
	vec2 inv_dir = abs(1./dir);
	int y = int(ray.angle / HALF_PI);
	int fragment_offset = (y%2) * reso.z*reso.w; // 縦ほうこうに進む場合
	vec2 cell_origin = vec2(greaterThanEqual(dir, vec2(0.))) * vec2(8.);
	int cell_offset = (y/2 == 0) ? 1 : 0;

	D2Segment seg;
	seg.ray_index = ray_index;
	seg.begin = 0;
	seg.march = 0;
	seg.radiance = 0;
	int march_count = 0;
	for(; march_count < ray.march; )
	{
		vec2 pos = fma(dir, float(march_count).xx, ray.origin);
		ivec2 map_index = ivec2(pos);
		ivec2 cell = map_index>>3;
		if(gl_LocalInvocationIndex == 0)
		{
			s_base_cell = cell;
		}
		memoryBarrierShared();
		barrier();

		if(gl_LocalInvocationIndex < 17)
		{
			s_fragment[gl_LocalInvocationIndex] = b_fragment_map[((y%2)==0) ? (cell.x + cell.y*reso.z) : (cell.y + cell.x*reso.w + fragment_offset) + gl_LocalInvocationIndex - cell_offset];
		}
		memoryBarrierShared();
		barrier();
		
		u64vec2 map = s_fragment[(cell-s_base_cell)[y%2] + cell_offset];
		vec2 pos_sub = vec2(pos - vec2(cell << 3));
		vec2 tp = vec2(abs(cell_origin - pos_sub)) * inv_dir;
		int axis = tp.x < tp.y ? 0 : 1;
		int skip = int(max(tp[axis], 1.));

		if(all(equal(map.xy, u64vec2(0,0))))
		{
			seg.march+=skip;
			march_count+=skip;
		}
		else
		{
			for(uint i = 0; i < skip; i++)
			{
				pos = fma(dir, float(march_count).xx, ray.origin);
				map_index = ivec2(pos);
				ivec2 cell_sub = map_index % 8;
				bvec2 attr = notEqual((map & (1ul<<(cell_sub.x+cell_sub.y*8))), u64vec2(0));
				if(attr.y)
				{
					seg.radiance += b_light[getMemoryOrder(map_index)];
				}
				if(attr.x)
				{
					if(seg.march > 1)
					{
						int index = atomicAdd(b_segment_counter.w, 1);
						if(index%1024==0){
							atomicAdd(b_segment_counter.x, 1);
						}
						b_segment[index] = seg;
					}
					seg.begin = march_count;
					seg.march = 0;
					seg.radiance = 0;
				}
				seg.march++;
				march_count++;
			}
		}

		if(axis == y%2){ continue; }
//		pos = fma(dir, float(march_count).xx, ray.origin);
//		map_index = ivec2(pos);
//		cell = map_index>>3;

		map = s_fragment[(cell-s_base_cell)[y%2] + cell_offset + ((y/2)*2-1)];
		skip = 7-skip;

		if(all(equal(map.xy, u64vec2(0,0))))
		{
			seg.march+=skip;
			march_count+=skip;
		}
		else
		{
			for(uint i = 0; i < skip; i++)
			{
				pos = fma(dir, float(march_count).xx, ray.origin);
				map_index = ivec2(pos);
				ivec2 cell_sub = map_index % 8;
				bvec2 attr = notEqual((map & (1ul<<(cell_sub.x+cell_sub.y*8))), u64vec2(0));
				if(attr.y)
				{
					seg.radiance += b_light[getMemoryOrder(map_index)];
				}
				if(attr.x)
				{
					if(seg.march > 1)
					{
						int index = atomicAdd(b_segment_counter.w, 1);
						if(index%1024==0){
							atomicAdd(b_segment_counter.x, 1);
						}
						b_segment[index] = seg;
					}
					seg.begin = march_count;
					seg.march = 0;
					seg.radiance = 0;
				}
				seg.march++;
				march_count++;
			}
		}


	}

	// 行きすぎたら戻す
	seg.march -= march_count-ray.march;
	if(seg.march > 1)
	{
		int index = atomicAdd(b_segment_counter.w, 1);
		if(index%1024==0){
			atomicAdd(b_segment_counter.x, 1);
		}
		b_segment[index] = seg;
	}


}
