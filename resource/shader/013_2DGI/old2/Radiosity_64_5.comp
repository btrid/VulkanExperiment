#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x = 256*Ray_Density, local_size_y = 1) in;
void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	float a = 6.28318530717958647692528676655900576 / gl_NumWorkGroups.y;
	float angle = a * gl_GlobalInvocationID.y;
//	angle += a * 0.25*u_gi2d_scene.m_frame;

	vec2 dir = rotate(angle);


	vec2 floorp = vec2(lessThan(dir, vec2(0.))) * reso.xy;
	vec2 floordir = abs(dir.x) > abs(dir.y) ? vec2(0., 1.) : vec2(1., 0.);

	vec2 p0 = intersectRayRay(vec2(0, 0), dir, floorp, floordir);
	vec2 p1 = intersectRayRay(vec2(reso.x, 0), dir, floorp, floordir);
	vec2 p2 = intersectRayRay(vec2(0, reso.y), dir, floorp, floordir);
	vec2 p3 = intersectRayRay(vec2(reso.x, reso.y), dir, floorp, floordir);

	vec2 minp = min(min(min(p0, p1), p2), p3);
	vec2 maxp = max(max(max(p0, p1), p2), p3);

	vec2 pos = minp + floordir * (8./Ray_Density) * gl_LocalInvocationIndex;
//	pos += floordir * (8./Ray_Density) * (u_gi2d_scene.m_frame %2);
	if(!marchToAABB(pos, dir, vec2(0.), reso.xy)){return;}

	u64vec4 hit_mask;
	ivec4 offset_x;
	ivec4 offset_y;
	vec4 side_x;
	vec4 side_y;
	{
		vec2 side = normalize(rotateZ(dir, 3.14*0.5));
		{
			vec2 inv_side;
			inv_side.x = side.x == 0. ? 99999. : abs(1./side.x);
			inv_side.y = side.y == 0. ? 99999. : abs(1./side.y);
			side *= min(inv_side.x, inv_side.y);
		}
		vec4 _offset = vec4(1., 3., 5., 7.) / Ray_Density;
		side_x = side.xxxx * _offset;
		side_y = side.yyyy * _offset;
		offset_x = ivec4(side_x / 2);
		offset_y = ivec4(side_y / 2);
		hit_mask = u64vec4(1ul) << (offset_x + offset_y*8);
	}

	int buf_offset = reso.x*reso.y;
	int radiance_offset = (reso.x*reso.y/4)*u_gi2d_scene.m_frame;

	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 999999. : abs(1./dir.y);
	dir = dir*min(inv_dir.x, inv_dir.y);

	uvec4 u_radiance = uvec4(0);
	u64vec4 b;
	u64vec4 l;
	ivec2 old_fi = ivec2(999999);
	ivec4 cell_x_old = ivec4((pos.xxxx+side_x) / 2.);
	ivec4 cell_y_old = ivec4((pos.yyyy+side_y) / 2.);

	ivec2 map_index_sub = ivec2(1) - ivec2(greaterThanEqual(dir, vec2(0.)));
	for(int _i = 0; _i <5000; _i++)
	{
		// march
		{
			pos += dir;
		}
		ivec4 cell_x = ivec4((pos.xxxx+side_x) / 2.);
		ivec4 cell_y = ivec4((pos.yyyy+side_y) / 2.);
		ivec4 map_index_sub_x = abs(cell_x - cell_x_old);
		ivec4 map_index_sub_y = abs(cell_y - cell_y_old);
		cell_x_old = cell_x;
		cell_y_old = cell_y;
		ivec4 bo2 = (buf_offset/4) * (map_index_sub_x + map_index_sub_y*2);
		bo2 = ivec4(0);

		u_radiance[0] += b_light[buf_offset+bo2.x+getMemoryOrder(ivec2(cell_x.x,cell_y.x))];
		u_radiance[1] += b_light[buf_offset+bo2.y+getMemoryOrder(ivec2(cell_x.y,cell_y.y))];
		u_radiance[2] += b_light[buf_offset+bo2.z+getMemoryOrder(ivec2(cell_x.z,cell_y.z))];
		u_radiance[3] += b_light[buf_offset+bo2.w+getMemoryOrder(ivec2(cell_x.w,cell_y.w))];
		// march
		{
			pos += dir;
		}
		cell_x = ivec4((pos.xxxx+side_x) / 2.);
		cell_y = ivec4((pos.yyyy+side_y) / 2.);
		map_index_sub_x = abs(cell_x - cell_x_old);
		map_index_sub_y = abs(cell_y - cell_y_old);
		cell_x_old = cell_x;
		cell_y_old = cell_y;
		bo2 = (buf_offset/4) * (map_index_sub_x + map_index_sub_y*2);
		bo2 = ivec4(0);
		u_radiance[0] += b_light[buf_offset+bo2.x+getMemoryOrder(ivec2(cell_x.x,cell_y.x))];
		u_radiance[1] += b_light[buf_offset+bo2.y+getMemoryOrder(ivec2(cell_x.y,cell_y.y))];
		u_radiance[2] += b_light[buf_offset+bo2.z+getMemoryOrder(ivec2(cell_x.z,cell_y.z))];
		u_radiance[3] += b_light[buf_offset+bo2.w+getMemoryOrder(ivec2(cell_x.w,cell_y.w))];

		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(pos, vec2(reso.xy))) + ivec2(lessThan(pos, vec2(0.)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}

		// hit確認
		{
			u_radiance.x != 0 ? atomicAdd(b_radiance[radiance_offset + getMemoryOrder(ivec2(cell_x.x, cell_y.x))], u_radiance[0]) : 0;
			u_radiance.y != 0 ? atomicAdd(b_radiance[radiance_offset + getMemoryOrder(ivec2(cell_x.y, cell_y.y))], u_radiance[1]) : 0;
			u_radiance.z != 0 ? atomicAdd(b_radiance[radiance_offset + getMemoryOrder(ivec2(cell_x.z, cell_y.z))], u_radiance[2]) : 0;
			u_radiance.w != 0 ? atomicAdd(b_radiance[radiance_offset + getMemoryOrder(ivec2(cell_x.w, cell_y.w))], u_radiance[3]) : 0;

			// 拡散
//			bvec4 is_diffuse = bvec4(notEqual(u64vec4(diffuse_map) & hit_mask, u64vec4(0)));
//			u_radiance *= uvec4(equal(is_diffuse, bvec4(false)));

		}
	}
//	u_radiance.x != 0 ? atomicAdd(b_radiance[0], packEmissive(vec3(100., 100., 100.))) : 0;
}
