#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

#define u16_max (0xffff)
#define fragment_state_non (0)
#define fragment_state_wall (1)
#define fragment_state_light (2)
#define fragment_state_bounce (3)
layout (local_size_x = 32, local_size_y = 32) in;
void main()
{
	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	vec3 illuminance = vec3(0.);

	uint map_index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * reso.x;

	uint sd = b_sdf[map_index];
	illuminance = sd == -1 ? vec3(1., 0., 0.) : vec3(0., 0., (((sd/1000) % 10)*1000.)) ;
	illuminance *= 100.;
	// store
	{
		vec3 store_illuminance = min(illuminance, vec3(65535.));
		uvec2 u_rg = uvec2(store_illuminance.rg) << uvec2(0, 16);
		uint rg = u_rg.r | u_rg.g;
		uvec2 u_ba = uvec2(store_illuminance.b, 0) << uvec2(0, 16);
		uint ba = u_ba.x | u_ba.y;
		ivec2 store_index_2d = ivec2(gl_GlobalInvocationID.xy);
		imageAtomicAdd(t_color[0], ivec3(store_index_2d.xy, 0), rg);
		imageAtomicAdd(t_color[0], ivec3(store_index_2d.xy, 1), ba);
	}

}
