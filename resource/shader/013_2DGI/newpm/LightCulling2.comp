#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout (local_size_x = 32, local_size_y = 1) in;

shared int s_counter;
shared vec4 s_area;
void main()
{
#if 0
	uvec2 index = gl_WorkGroupID.xy;
	uint tiled_1D_index = gl_WorkGroupID.x + gl_WorkGroupID.y*u_pm_info.m_emission_tile_num.x; 

	vec2 left_top = vec2(0., 0.);
	vec2 right_bottom = vec2(u_pm_info.m_resolution.xy);
	if(gl_LocalInvocationID.x == 0)
	{
		s_counter = 0;

		vec2 tile_size = u_pm_info.m_emission_tile_size.xy;
		s_area.xy = left_top + tile_size*index.xy;
		s_area.zw = s_area.xy + tile_size;
	}
	barrier();
	memoryBarrierShared();

	uint data_num = b_emission_counter.x;
	uint count_list_offset = tiled_1D_index*u_pm_info.m_emission_tile_map_max;
	uint loop_count = (data_num-1) / gl_NumWorkGroups.x + 1;
	uint loop_begin = gl_LocalInvocationID.x*loop_count;
	uint loop_end = loop_begin + loop_count;
	for(uint i = loop_begin; i < loop_end; i++)
	{
		if(i >= data_num){
			break;
		}
		vec4 p = b_emission[i].pos;
		if(any(lessThan(p.xz-p.w, left_top)) || any(greaterThanEqual(p.xz+p.w, right_bottom)))
		{
//			continue;
		}
		float DeltaX = p.x - max(s_area.x, min(p.x, s_area.z));
		float DeltaY = p.z - max(s_area.y, min(p.z, s_area.w));
		bool is_contain = (DeltaX * DeltaX + DeltaY * DeltaY) < (p.w*p.w);
		if(!is_contain) 
		{
			continue;
		}
		uint tile_list_index = atomicAdd(s_counter, 1);
		if(tile_list_index < u_pm_info.m_emission_tile_map_max){
			b_emission_tile_map[count_list_offset+tile_list_index] = int(i);
		}
	}

	barrier();
	memoryBarrierShared();
	if(gl_LocalInvocationID.x == 0)
	{
		b_emission_tile_counter[tiled_1D_index] = min(s_counter, u_pm_info.m_emission_tile_map_max);
	}
#endif
}

