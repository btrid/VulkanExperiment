#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout(push_constant) uniform InputVertex
{
	int level;
} constant;

layout (local_size_x = 2, local_size_y = 2) in;

shared int s_fragment_num;
void main()
{
	// fragment hierarchy
	{
		int i = constant.level;
		int prev_level = i-1;
		{
			if(gl_LocalInvocationIndex == 0)
			{
				s_fragment_num = 0;
			}
			barrier();
			memoryBarrierShared();

			{
				uvec2 idx2d = gl_GlobalInvocationID.xy;
				uint prev_store = idx2d.x+idx2d.y*(u_pm_info.m_resolution.x>>prev_level);
				int prev_offset = getFragmentHierarchyOffset(prev_level);
				int fragment = b_fragment_hierarchy[prev_offset + prev_store];

				if(fragment!=0)
				{
					atomicAdd(s_fragment_num, fragment);
				}
				
			}
			barrier();
			memoryBarrierShared();

			if(gl_LocalInvocationIndex == 0)
			{
				uvec2 idx2d = gl_GlobalInvocationID.xy;
				uint store = idx2d.x+idx2d.y*(u_pm_info.m_resolution.x>>i);
				int offset = getFragmentHierarchyOffset(i);
				b_fragment_hierarchy[offset + store] = s_fragment_num;
			}
		}
	}
}

