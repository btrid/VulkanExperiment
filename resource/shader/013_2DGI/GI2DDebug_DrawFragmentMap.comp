#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#include "GI2D.glsl"

#define USE_RenderTarget 1
#include "applib/System.glsl"
layout (local_size_x = 32, local_size_y = 32) in;
void main()
{
	int hierarchy=1;
	vec3 color = vec3(0.);

	{
		int offset = getFragmentMapHierarchyOffset(hierarchy);
		uvec2 map_index = gl_GlobalInvocationID.xy>>3;
		uvec2 index = map_index.xy>>(hierarchy*3);
		uint64_t fragment_map = b_fragment_map[getMemoryOrder(index) + offset];
		if((fragment_map) != 0)
		{ 
			color = vec3(1., 0., 0.);
		}else{
			color = vec3(0., 0., 1.);
		}
	}
	// store
	{
		ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
		imageStore(i_render_target, pixel, vec4(color, 1.));
	}

}
