#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout (local_size_x = 32, local_size_y = 32) in;

#define HierarchyCheckDepth (8)
void main()
{
	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	uvec2 map_2d = gl_GlobalInvocationID.x<<2;
	uint map_index = map_2d.x + map_2d.y*reso.x;

	int hierarchy = 0;
	uint64_t map[4];
	uvec4 fragment_index;

	for(; hierarchy<HierarchyCheckDepth; hierarchy+=3)
	{
		uvec2 map_idx_2d = map_2d>>hierarchy;
		ivec4 fragment_idx = ivec4(map_idx_2d/8, map_idx_2d%8);
		ivec2 f_idx_offset = ivec2(greaterThanEqual(fragment_idx.zw, uvec2(4))) * 2 - 1;

		int offset = getFragmentMapHierarchyOffset(hierarchy);
		for(int i = 0; i < 4; i++)
		{
			ivec2 f_idx = fragment_idx.xy + f_idx_offset*ivec2(i%2, i/2);
			if(any(lessThan(f_idx, ivec2(0))) 
			|| any(greaterThanEqual(f_idx, ivec2(reso.zw>>hierarchy))))
			{
				// エリア外はノーチェック
				map[i] = uint64_t(0);
			}
			else
			{
				int f_idx_1d = f_idx.x + f_idx.y*(reso.z>>hierarchy);
				map[i] = b_fragment_map[f_idx_1d + offset];
				fragment_index[i] = f_idx_1d;
			}
		}

		u64vec4 map_v4 = u64vec4(map[0], map[1], map[2], map[3]);
		if(any(notEqual(map_v4, u64vec4(0))))
		{
			break;
		}
	}

	b_sdf[map_index] = -1;
	if(hierarchy >= HierarchyCheckDepth)
	{
		return;
	}

	int next_level = 1;
	int count_index = hierarchy == 0 ? (8*4+0) : (next_level*4+3);
	int count_work_index = hierarchy == 0 ? (9*4+2) : (9*4+0);
	int work_offset = hierarchy == 0 ? u_pm_info.m_sdf_work_num : 0;
	for(int i = 0; i<4; i++)
	{
		if(map[i] == 0){ continue;}
		int local_index = atomicAdd(b_sdf_counter[count_index], 1);
		if(hierarchy != 0 && local_index%(32*32) == 0)
		{
			atomicAdd(b_sdf_counter[next_level*4+0], 1);
		}
		uint index = atomicAdd(b_sdf_counter[count_work_index], 1);
		SDFWork work;
		work.map_index = map_index;
		work.hierarchy = hierarchy;
		work.fragment_idx = fragment_index[i];
		b_sdf_work[index + work_offset] = work;
	}

}

