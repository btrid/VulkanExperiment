#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_Crowd2D 0
#define USE_SYSTEM 1
#define USE_GI2D 2
#define USE_RenderTarget 3
#include "GI2D/Crowd.glsl"
#include "applib/System.glsl"
#include "GI2D/GI2D.glsl"



layout (local_size_x = 32, local_size_y = 32) in;

void main()
{
	ivec2 index = ivec2(gl_GlobalInvocationID.xy);
	const int color_map_size = 4;
	vec3 color_map[color_map_size] = {
		vec3(1., 1., 1.),
		vec3(0., 0., 1.),
		vec3(0., 1., 0.),
		vec3(1., 0., 0.),
	};
	const int color_scale = 3;

	const ivec4 reso = u_gi2d_info.m_resolution;
	const int size = g_crowd_density_cell_size;
	ivec2 di = index / size;
	int dindex = di.x + di.y * (reso.x/size);
	uint density = b_crowd_density_map[dindex];
	uint density0 = min(density/color_scale, color_map_size-1);
	uint density1 = min(density0+1, color_map_size-1);
	float rate = float(density-density0*color_scale) / color_scale;
	vec3 color = mix(color_map[density0], color_map[density1], rate);
	color = density == 0 ? vec3(0.) : color;

	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));

	
}
