#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

#define u16_max (0xffff)
#define fragment_state_non (0)
#define fragment_state_wall (1)
#define fragment_state_light (2)
#define fragment_state_bounce (3)
layout (local_size_x = 32, local_size_y = 32) in;
void main()
{

	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	vec3 illuminance = vec3(0.);
	ivec2 map_index = ivec2(gl_GlobalInvocationID.xy);

	int hierarchy=7;
	{
		ivec2 findex2d = map_index>>hierarchy;
		int findex = findex2d.x + findex2d.y*(reso.x>>hierarchy);
		int offset = getFragmentHierarchyOffset(hierarchy);
		if(b_fragment_hierarchy[findex+offset] == 0)
		{
			illuminance = vec3(0., 0., 100.);
		}else{
			illuminance = vec3(100., 0., 0.);
		}
	}
	// hit確認
	if(false)
	{
		ivec4 fragment_index = ivec4(map_index/8, map_index%8);
		ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z, 8);
		uint64_t fragment_map = b_fragment_map[fragment_index_1d.x];
		uint64_t bit = 1ul<<fragment_index_1d.y;
		if((fragment_map & bit) != 0)
		{ 
			illuminance = vec3(100., 0., 0.);
		}else{
			illuminance = vec3(0., 0., 100.);
		}
	}
	// store
	{
		vec3 store_illuminance = min(illuminance, vec3(65535.));
		uvec2 u_rg = uvec2(store_illuminance.rg) << uvec2(0, 16);
		uint rg = u_rg.r | u_rg.g;
		uvec2 u_ba = uvec2(store_illuminance.b, 0) << uvec2(0, 16);
		uint ba = u_ba.x | u_ba.y;
		ivec2 store_index_2d = ivec2(gl_GlobalInvocationID.xy);
		imageAtomicAdd(t_color[0], ivec3(store_index_2d.xy, 0), rg);
		imageAtomicAdd(t_color[0], ivec3(store_index_2d.xy, 1), ba);
	}

}
