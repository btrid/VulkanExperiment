#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_PM 0
#include "PM.glsl"


layout (local_size_x = 1, local_size_y = 1) in;

layout(push_constant) uniform InputLight
{
	vec2 pos;
	float dir; // atan
	float angle;
	vec4 emission;
	int level;
} constant;

void main()
{
	ivec2 reso = ivec2(u_pm_info.m_resolution.xy)>>constant.level;
	ivec2 pos = ivec2(constant.pos)>>constant.level;
	if(any(lessThan(pos, ivec2(0))) || any(greaterThanEqual(pos, reso)))
	{
		return;
	}

	int p_index = pos.x + reso.x*pos.y;
	{
		// list登録
		int e_offset = u_pm_info.m_emission_buffer_offset[constant.level];
		if(atomicCompSwap(b_emission_map[e_offset + p_index], -1, 0) == -1)
		{
			int list_index = atomicAdd(b_emission_counter[constant.level].x, 1);
			b_emission_list[e_offset + list_index] = p_index;
		}
		b_emission[e_offset+p_index].emission += constant.emission;
		b_emission[e_offset+p_index].pos = constant.pos;
		b_emission[e_offset+p_index].dir = constant.dir;
		b_emission[e_offset+p_index].angle = constant.angle;
		b_emission[e_offset+p_index].level = constant.level;
	}
}