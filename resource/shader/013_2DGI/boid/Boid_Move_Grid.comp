#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Boid2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Boid2D.glsl"

layout (local_size_x = 1024) in;

void main() 
{

	int p_id = int(gl_GlobalInvocationID.x);

	vec2 acc = b_acc[p_id];// + vec2(0., 0.08)*DT;
	vec2 vel = b_vel[p_id] + acc * DT;//+ vec2(0., 0.08)*DT;

	float _dist = length(vel);

	vec2 pos = b_pos[p_id];
	vec2 dir = vel;

	pos *= Scale;
	dir *= Scale;

	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	if(dot(dir, dir) > 0.1)
	{ 
	float distance = length(dir);

		dir = normalize(dir);
//		dir.x = dir.x == 0. ? 0.000001 : dir.x;
//		dir.y = dir.y == 0. ? 0.000001 : dir.y;
//		dir *= abs(dir.x) >= abs(dir.y) ? abs(1./dir.x) : abs(1./dir.y);
		vec2 inv_dir;
		inv_dir.x = abs(dir.x) <= 0.0001 ? 9999999999. : abs(1./dir.x);
		inv_dir.y = abs(dir.y) <= 0.0001 ? 9999999999. : abs(1./dir.y);
		vec2 offset_dir;
		offset_dir.x = abs(dir.x) <= 0.0001 ? 9999999999. : 0.;
		offset_dir.y = abs(dir.y) <= 0.0001 ? 9999999999. : 0.;

		ivec2 map_index = ivec2(pos);
		ivec2 map_index_origin = ivec2(greaterThanEqual(dir, vec2(0.)));

		// hit確認
		if(false)
		{
			ivec4 fragment_index = ivec4(map_index/8, map_index%8);
			ivec2 shift = fragment_index.zw;

			int findex = fragment_index.x + fragment_index.y*reso.z;
			uint64_t fragment_map = b_diffuse_map[findex];

			uint64_t bit = 1ul<<(shift.x+shift.y*8);
			if((fragment_map & bit) != 0)
			{
//					dir = reflect(normalize(dir), normalize(advance_dir.yx)); 
				dir = reflect(normalize(dir), normalize(dir.yx)); 
				map_index_origin = ivec2(greaterThanEqual(dir, vec2(0.)));
			}
		}

		float progress = 0.;
		for(int _i = 0; _i <500; _i++)
		{
			// march
			vec2 advance_dir = vec2(0.);
			{
				int hierarchy=0;
				for(int hierarchy_=3; hierarchy_>2; hierarchy_--)
				{
					ivec2 map_index_hie = map_index>>hierarchy_;
					ivec4 fragment_index = ivec4(map_index_hie/8, map_index_hie%8);
					ivec4 findex = fragment_index.xxxx + fragment_index.yyyy*(reso.zzzz>>hierarchy_);
					findex +=  getFragmentMapHierarchyOffset(hierarchy_);
					uint64_t fragment_map = b_diffuse_map[findex.x];

					if(fragment_map == 0)
					{
						hierarchy = hierarchy_;
						break;
					}
				}

				ivec2 cell_origin = map_index_origin<<hierarchy;
				ivec2 map_index_sub = map_index - ((map_index>>hierarchy)<<hierarchy);
				vec2 cell_p = abs(cell_origin - (map_index_sub+fract(pos))) + 0.5;
				vec2 axis = abs(cell_p*inv_dir) + offset_dir;
				float prog = min(axis.x, axis.y);
				progress += prog;
				if(progress >= distance)
				{
					pos = pos + (progress - distance)*dir;
					b_pos[p_id] = pos/Scale;
					b_vel[p_id] = 0.95*normalize(dir)*_dist;
					break;
				}
				pos = pos + prog*dir;
				advance_dir = vec2(ivec2(pos) - map_index);
				map_index = ivec2(pos);
			}

			// hit確認
			{
				ivec4 fragment_index = ivec4(map_index/8, map_index%8);
				ivec2 shift = fragment_index.zw;

				int findex = fragment_index.x + fragment_index.y*reso.z;
				uint64_t fragment_map = b_diffuse_map[findex];

				uint64_t bit = 1ul<<(shift.x+shift.y*8);
				if((fragment_map & bit) != 0)
				{
//					dir = reflect(normalize(dir), normalize(advance_dir.yx)); 
					dir = -dir; 
					map_index_origin = ivec2(greaterThanEqual(dir, vec2(0.)));
				}
			}
		}

	}


	vec2 index_grid_f = pos / Grid_Size;
	ivec2 index_grid = ivec2(index_grid_f);
	ivec2 reso_grid = ivec2(reso.xy/Grid_Size);
	if(any(lessThan(index_grid, ivec2(0))) || any(greaterThanEqual(index_grid, reso_grid.xy))){ return; }
	int i = index_grid.x + index_grid.y*reso_grid.x;

	int next = atomicExchange(b_grid_head[i], p_id);
	b_grid_node[p_id] = next;

	atomicAdd(b_grid_counter[i], 1);

}

