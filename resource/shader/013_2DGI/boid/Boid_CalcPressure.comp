#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Boid2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Boid2D.glsl"

layout (local_size_x = 1024) in;

void main() 
{

	int p_id = int(gl_GlobalInvocationID.x);
	const vec2 p_pos = b_pos[p_id]*Scale;
	vec2 index_grid_f = p_pos / Grid_Size;
	ivec2 index_grid = ivec2(index_grid_f);
	ivec2 reso_grid = ivec2(u_gi2d_info.m_resolution/Grid_Size);
	if(any(lessThan(index_grid, ivec2(0))) || any(greaterThanEqual(index_grid, reso_grid))){ return; }

//	vec2 rate = mod(index_grid_f, vec2(Grid_Size)) / vec2(Grid_Size);
	ivec4 neighbor = ivec4(0, 0, 1, 1);
	ivec4 access_list_x = (index_grid.xxxx + neighbor.xxzz);
	ivec4 access_list_y = (index_grid.yyyy + neighbor.ywyw);
	ivec4 access_list = access_list_x + access_list_y * reso_grid.x;

	vec2 w_pos0 = ivec2(p_pos) + neighbor.xy*Grid_Size;
	vec2 w_pos1 = ivec2(p_pos) + neighbor.xw*Grid_Size;
	vec2 w_pos2 = ivec2(p_pos) + neighbor.zy*Grid_Size;
	vec2 w_pos3 = ivec2(p_pos) + neighbor.zw*Grid_Size;

	vec2 d = vec2(0.);
	d += b_grid_counter[access_list[0]] / ((w_pos0 - p_pos) + 1.);
	d += b_grid_counter[access_list[1]] / ((w_pos1 - p_pos) + 1.);
	d += b_grid_counter[access_list[2]] / ((w_pos2 - p_pos) + 1.);
	d += b_grid_counter[access_list[3]] / ((w_pos3 - p_pos) + 1.);

	b_vel[p_id] = d*0.001;
//	b_vel[p_id] = vec2(0.);


}