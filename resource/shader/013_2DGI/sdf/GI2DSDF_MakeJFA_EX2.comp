#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_SDF 1
#define USE_GI2D_SDFEX
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DSDF.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform Input
{
	uint distance;
	uint offset;
} constant;

shared ivec4 s_cell[34][34];

ivec4 isInvalid(in ivec4 a)
{
	return ivec4(notEqual(a & ivec4(0x00008000), ivec4(0)));
}
ivec4 isInner(in ivec4 a)
{
	return ivec4(notEqual(a & ivec4(0x80000000), ivec4(0)));
}

// state.x = invalid cell
// state.y = inner or outer
void nearest(inout vec4 cell_x, inout vec4 cell_y, inout vec4 current_d, in ivec4 state_inner, in vec4 cell_pos_x, in vec4 cell_pos_y, in uvec2 reso, in ivec2 offset)
{
	const ivec2 step = ivec2(constant.distance)>>uvec2(2, 0);
	uvec2 current = ivec2(gl_GlobalInvocationID.xy) * step ;
	current = (current % reso.xy) + (current / reso.xy);

	uvec2 target_index = uvec2(current) + uvec2(offset) * step;

	if(any(greaterThanEqual(target_index, reso.xy))){ return;}

	ivec2 local_target = ivec2(gl_LocalInvocationID.xy) + ivec2(1) + ivec2(offset);
	ivec4 target_cell = s_cell[local_target.y][local_target.x];

	vec4 same = vec4(equal(isInner(target_cell), state_inner));

	vec4 target_cell_x = mix(vec4(target_index.xxxx)*4.+vec4(0.5,1.5,2.5,3.5), (target_cell & 0x00007fff) + 0.5, same);
	vec4 target_cell_y = mix(vec4(target_index.yyyy), ((target_cell>>16) & 0x00007fff) + 0.5, same);

	vec4 x = cell_pos_x-target_cell_x;
	vec4 y = cell_pos_y-target_cell_y;

	vec4 d = length(vec2(offset))*constant.distance.xxxx;
	d = mix(d, vec4(99999999.), same*isInvalid(target_cell));
	d = mix(d, sqrt(x*x+y*y), same*(1.-isInvalid(target_cell)));

	{
		vec4 is_update = vec4(lessThan(d, current_d));
		cell_x = mix(cell_x, target_cell_x, is_update);
		cell_y = mix(cell_y, target_cell_y, is_update);
		current_d = min(current_d,d);
	}
}
void main() 
{
	const uvec2 reso = uvec2(u_gi2d_info.m_resolution.xy)>>uvec2(2,0);
	const uvec2 step = ivec2(constant.distance)>>uvec2(2, 0);
	uvec2 current = ivec2(gl_GlobalInvocationID.xy) * step;
	current = (current % reso.xy) + (current / reso.xy);

	ivec4 cell = b_jfa_ex[current.x + current.y*reso.x];
	s_cell[gl_LocalInvocationID.y+1][gl_LocalInvocationID.x+1] = cell;

	if( gl_LocalInvocationID.y < 2)
	{
		// 上下を埋める
		uint xx = current.x;
		uint yy = gl_WorkGroupID.y*gl_WorkGroupSize.y + (gl_LocalInvocationID.y-1) + gl_LocalInvocationID.y*gl_WorkGroupSize.y;
		yy = yy * step.y;
		yy = (yy % reso.y) + (yy / reso.y);

		ivec4 target_cell = any(greaterThanEqual(uvec2(xx, yy), reso.xy)) ? ivec4(0xffffffff) : b_jfa_ex[xx + yy*reso.x];
		s_cell[gl_LocalInvocationID.y*(gl_WorkGroupSize.y+1)][gl_LocalInvocationID.x+1] = target_cell;
	}

	if( gl_LocalInvocationIndex < (gl_WorkGroupSize.y+2)*2)
	{
		// 左右を埋める
		uint _x = gl_LocalInvocationIndex / (gl_WorkGroupSize.x+2);
		uint _y = gl_LocalInvocationIndex % (gl_WorkGroupSize.y+2);
		uint xx = gl_WorkGroupID.x*gl_WorkGroupSize.x + (_x-1) + _x*gl_WorkGroupSize.x;
		uint yy = gl_WorkGroupID.y*gl_WorkGroupSize.y + (_y-1);
		uvec2 target = uvec2(xx, yy) * step;
		target = (target % u_gi2d_info.m_resolution.xy) + (target / u_gi2d_info.m_resolution.xy);

		ivec4 target_cell = any(greaterThanEqual(target, reso.xy)) ? ivec4(0xffffffff) : b_jfa_ex[target.x + target.y*reso.x];
		s_cell[_y][_x*(gl_WorkGroupSize.y+1)] = target_cell;
	}
	memoryBarrierShared();
	barrier();

	ivec4 state_inner = isInner(cell);

	vec4 cell_pos_x = vec4(current.xxxx)*4.+vec4(0.5,1.5,2.5,3.5);
	vec4 cell_pos_y = current.yyyy + 0.5;

	vec4 cell_x = (cell&0x00007fff) + 0.5;
	vec4 cell_y = ((cell>>16)&0x00007fff) + 0.5;

	vec4 x = vec4(cell_x-cell_pos_x);
	vec4 y = vec4(cell_y-cell_pos_y);
//	vec4 d = (1.-state_invalid)*sqrt(x*x+y*y) + state_invalid*99999999.;
	vec4 d = mix(sqrt(x*x+y*y), vec4(99999999.), isInvalid(cell));
	const vec4 old_d = d;

	const ivec3 offset = ivec3(-1, 0, 1);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.xx);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.yx);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.zx);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.xz);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.yz);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.zz);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.xy);
	nearest(cell_x, cell_y, d, state_inner, cell_pos_x, cell_pos_y, reso, offset.zy);

	ivec4 is_update = ivec4(d != old_d);
	ivec4 write = (ivec4(cell_y)<<16) | ivec4(cell_x) | (state_inner<<31) | ((1-is_update)*(isInvalid(cell)<<15));
//	for(int i = 0; i < 4; i++)
//	{
//		if(is_update[i] != 0){
//			b_jfa_ex[current.x + current.y*reso.x][i] = write[i];
//		}
//	}
	if(any(notEqual(is_update, ivec4(0))))
	{
		b_jfa_ex[current.x + current.y*reso.x + constant.offset] = write;
	}
}
