#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout(push_constant) uniform Input
{
	int bounce;
} constant;

layout (local_size_x = 1024, local_size_y = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= b_vertex_array_counter.instanceCount){ return; }

	u16vec2 pos = b_vertex_array[gl_GlobalInvocationID.x].pos;
	uint pos_index = pos.x+pos.y*u_gi2d_info.m_resolution.x;
//	if(!isDiffuse(b_fragment[pos_index])){ return; }

	uint offset = u_gi2d_info.m_resolution.x*u_gi2d_info.m_resolution.y;

	f16vec3 irradiance = f16vec3(0.);
	for(int i = 0; i < Vertex_Num; i++)
	{
		uint vi = uint(b_vertex_array[gl_GlobalInvocationID.x].vertex[i].z);
		if(vi == -1) { continue; }

		f16vec3 power = b_vertex_array[vi].radiance[constant.bounce];
		f16vec3 albedo = b_vertex_array[vi].albedo;
		f16vec3 irra = power * albedo * f16vec3(0.1); 
		irradiance += dot(irra, irra) >= 0.01 ? irra : f16vec3(0.);
	}

	b_vertex_array[gl_GlobalInvocationID.x].radiance[(1-constant.bounce)] += irradiance;

}
