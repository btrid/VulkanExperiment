#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

#define HALF_PI radians(90.)
#define TWO_PI radians(360.)
#define PI radians(180.)
#define QUARTER_PI radians(45.)

layout (local_size_x=128) in;

bool intersection(in vec4 aabb, in vec2 pos, in vec2 inv_dir, out int n, out int f)
{
	vec4 t = ((aabb - pos.xyxy)*inv_dir.xyxy);
	vec2 tmin = min(t.xy, t.zw);
 	vec2 tmax = max(t.xy, t.zw);
 
	n = int(max(tmin.x, tmin.y));
	f = int(min(tmax.x, tmax.y));

 	return min(tmax.x, tmax.y) > max(max(tmin.x, tmin.y), 0.0);
}

void calcDirEx(in float angle, out vec2 dir, out vec2 inv_dir)
{
	float c = cos(angle);
	float s = sin(angle);
	dir = vec2(c, s);
	dir.x = abs(dir.x)<GI2D_FLT_EPSILON ? 0.0001 : dir.x;
	dir.y = abs(dir.y)<GI2D_FLT_EPSILON ? 0.0001 : dir.y;
	inv_dir = 1./dir;
	dir = dir * min(abs(inv_dir.x), abs(inv_dir.y));
	inv_dir = 1./dir;
}
struct Ray
{
	vec2 origin;
	vec2 dir;
	vec2 inv_dir;
	int march;
};
Ray makeRay(in uint x, in uint y)
{
	const ivec4 reso = u_gi2d_info.m_resolution;
	Ray ray;

	float a = PI / Dir_Num;
	float b = 0.;
	float angle = fma(a, float(y), b);
	uint area = uint(float(y) >= (Dir_Num*0.5));

	angle -= QUARTER_PI;
	calcDirEx(angle, ray.dir, ray.inv_dir);

	ray.origin.x = 0.;
	ray.origin.y = 0.;
	ray.origin.x += (area==1) ? x : 0;
	ray.origin.y += (area==0) ? x : 0;
	ray.origin.x += (area==1&&ray.dir.x>=0.)?-reso.x:0;
	ray.origin.y += (area==0&&ray.dir.y>=0.)?-reso.y:0;

	ray.march = -1;
	int begin, end;
	if(intersection(vec4(vec2(0., 0.), vec2(reso.xy)), ray.origin, ray.inv_dir, begin, end))
	{
		ray.origin = fma(ray.dir, vec2(begin+1), ray.origin);
		ray.march = end - begin+1;
	}
	return ray;
}

void main()
{
	const ivec4 reso = u_gi2d_info.m_resolution;

	Ray ray = makeRay(gl_GlobalInvocationID.x, gl_WorkGroupID.y);

	if(ray.march==-1){ return; }

	uint angle_index = gl_WorkGroupID.y;
	uint angle_dir = angle_index/((Dir_Num/2)+1);
	if(angle_dir == 0)
	{
		angle_index = angle_index*2;
	}
	else
	{
		angle_index = (angle_index-((Dir_Num/2)+1))*2 + 1;
	}

	uvec2 angle_index2 = uvec2((angle_index + angle_dir*Dir_Num), (angle_index + (1-angle_dir)*Dir_Num)) %Vertex_Num;

	vec2 cell_origin = vec2(greaterThanEqual(ray.dir, vec2(0.))) * vec2(8.);

	int begin = 0;
	uint16_t march = uint16_t(0);

	RayEx ray_ex;
	ray_ex.ray_index = uint16_t(gl_GlobalInvocationID.x);
	ray_ex.angle_index = uint16_t(gl_WorkGroupID.y);
	ray_ex.segment_count = uint16_t(0);
	ray_ex.segment[0] = uint16_t(0);

	for(; march < ray.march; )
	{
		vec2 pos = fma(ray.dir, float(march).xx, ray.origin);
		ivec2 map_index = ivec2(pos);
		ivec2 cell = map_index>>3;
		vec2 pos_sub = vec2(pos - vec2(cell << 3));

		vec2 tp = fma(vec2(abs(cell_origin - pos_sub)), abs(ray.inv_dir), float(1.).xx);
		uint16_t skip = uint16_t(min(tp.x, tp.y));

		uint64_t map = b_edge[cell.x + cell.y * reso.z];
		if(map == 0ul)
		{
			march+=skip;
			continue;
		}

		for(uint i = 0; i < skip; i++)
		{
			ivec2 cell_sub = ivec2(pos_sub);
			bool attr = (map & (1ul<<(cell_sub.x+cell_sub.y*8))) != 0ul;
			if(attr)
			{
				ray_ex.segment_count++;
				ray_ex.segment[uint(ray_ex.segment_count)] = march;

				u16vec4 end = u16vec4(fma(ray.dir.xyxy, vec4(float(begin).xx, float(march).xx), ray.origin.xyxy));
				uvec2 index = end.xz + end.yw * reso.xx;
				if(all(notEqual(end.xyxy, uvec4(0, 0, reso.xy-1))))
				{
					b_vertex_array[b_vertex_array_index[index.x]].vertex[angle_index2.y] = end.zw;
//					b_vertex_array[b_vertex_array_index[index.x]].vertex[angle_index2.y] = u16vec2(gl_GlobalInvocationID.x, ray_ex.segment_count);
				}
				if(all(notEqual(end.zwzw, uvec4(0, 0, reso.xy-1))))
				{
					b_vertex_array[b_vertex_array_index[index.x]].vertex[angle_index2.x] = end.xy;
//					b_vertex_array[b_vertex_array_index[index.y]].vertex[angle_index2.x] = u16vec2(gl_GlobalInvocationID.x, ray_ex.segment_count);
				}
				begin = march;
			}
			march++;
			pos_sub = fma(ray.dir, vec2(1.), pos_sub);
		}

	}
	ray_ex.segment_count++;
	ray_ex.segment[uint(ray_ex.segment_count)] = march;

	u16vec4 end = u16vec4(fma(ray.dir.xyxy, vec4(float(begin).xx, float(ray.march).xx), ray.origin.xyxy));
	uvec2 index = end.xz + end.yw * reso.xx;
	if(all(notEqual(end.xyxy, uvec4(0, 0, reso.xy-1))))
	{
//		b_vertex_array[b_vertex_array_index[index.x]].vertex[(angle_index + (1-angle_dir)*Dir_Num)%Vertex_Num] = end.zw;
		b_vertex_array[b_vertex_array_index[index.x]].vertex[angle_index2.y] = u16vec2(gl_GlobalInvocationID.x, ray_ex.segment_count);
	}
}
