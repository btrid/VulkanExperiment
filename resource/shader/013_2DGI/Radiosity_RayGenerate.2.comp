#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

//#define PI (3.1416)
#define TWO_PI (PI*2)
layout (local_size_x=127, local_size_y=1) in;
void main()
{

	const int hierarchy = u_gi2d_scene.m_hierarchy;
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	float a = PI / gl_WorkGroupSize.x;
	float angle = a * (gl_LocalInvocationID.x + 0.5);

	vec2 dir = rotate(angle);
	vec2 inv_dir = abs(1./dir);
	vec2 seg = dir * max(inv_dir.x, inv_dir.y);
	dir *= min(inv_dir.x, inv_dir.y);

	vec2 pos;
	pos.x = (seg.x<-1.) ? reso.x : 0;
	pos.y = (seg.y<-1.) ? reso.y : 0;
	vec2 pdir;
	pdir.x = abs(seg.y)>1. ? 1 : 0;
	pdir.y = abs(seg.x)>1. ? 1 : 0;

	pos += pdir*gl_WorkGroupID.x;
	vec2 begin = pos;
	ivec2 map_index = ivec2(pos);

	int march_count = 1;
	for(; march_count <5000; march_count++)
	{
		// march
		{
			// DDA
			pos = begin + march_count*dir;
			map_index = ivec2(pos);
		}
		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}
	}

	if(march_count <= 1) { return; }
	D2Ray ray;
	ray.origin = begin;
	ray.angle = angle;
	ray.march = march_count;
	
	int buffer_index = atomicAdd(b_ray_counter[gl_WorkGroupID.z].w, 1);
	if(buffer_index >= u_radiosity_info.ray_scene_max){ while(true); }
	uint buffer_offset = u_radiosity_info.ray_scene_max*gl_WorkGroupID.z;
	b_ray[buffer_index+buffer_offset] = ray;

	if(buffer_index%1024 == 0){
		atomicAdd(b_ray_counter[gl_WorkGroupID.z].x, 1);
	}
}
