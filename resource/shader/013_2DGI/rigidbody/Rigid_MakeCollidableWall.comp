#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#define USE_GI2D_SDF 2
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DSDF.glsl"
#include "GI2D/Rigidbody2D.glsl"

layout (local_size_x=8, local_size_y=8) in;

shared uint64_t s_fragment_map;
void main() 
{
	if (gl_LocalInvocationIndex==0) 
	{
		s_fragment_map = b_fragment_map[gl_WorkGroupID.x+gl_WorkGroupID.y*u_gi2d_info.m_resolution.z];
	}

	memoryBarrierShared();
	barrier();

	uint64_t bit = 1ul<<(gl_LocalInvocationID.x+gl_LocalInvocationID.y*8ul);
	uint i = gl_GlobalInvocationID.x+gl_GlobalInvocationID.y*u_gi2d_info.m_resolution.x;		

	rbCollidableWall c;
	vec2 sdf = gl_GlobalInvocationID.xy - vec2(b_jfa[i]);
//	c.sdf = ((s_fragment_map & bit) == 0ul) ? f16vec2(0.) : f16vec2(normalize(sdf) * min(length(sdf) * 0.51, 1.));

	c.sdf = ((s_fragment_map & bit) == 0ul) ? f16vec2(0.) : f16vec2(normalize(sdf));

	b_collidable_wall[i] = c;

	atomicAdd(b_fluid_counter[i], int(length(sdf)*10));

}

