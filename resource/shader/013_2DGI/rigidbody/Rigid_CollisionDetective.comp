#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D/GI2D.glsl"
#include "GI2D/Rigidbody2D.glsl"

layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

#define FLT_EPSIRON (1.19209290e-07)
//#define isZero(_v) (all(lessThan((_v), vec2(FLT_EPSIRON))))
#define isZero(_v) (dot((_v), (_v)) < FLT_EPSIRON)

vec2 calcTangent(in vec2 I, in vec2 N)
{
	return I - N * dot(N, I);
}

void main() 
{
	uint pb_id = b_pb_update_list[b_world.cpu_index*b_manager.pb_list_size+gl_WorkGroupID.x];
	uint p_id = pb_id*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if((b_rbParticle[p_id].flag & RBP_FLAG_ACTIVE) == 0){ return; }

	uint r_id = b_rbParticle_map[pb_id];
	if(((b_rigidbody[r_id].flag & RB_FLAG_FLUID) != 0)){ return; }

	vec2 pos = b_rbParticle[p_id].pos;
	vec2 sdf = b_rbParticle[p_id].local_sdf;
	ivec4 map_index = ivec4(pos.xyxy) + ivec4(ivec2(0), step(vec2(0.5), pos-floor(pos)) * 2. - 1.);
	ivec4 findex = map_index.xzxz + map_index.yyww * u_gi2d_info.m_resolution.x;
	float mass = 1.;
	vec2 vel = pos - b_rbParticle[p_id].pos_old;

	for(uint i = 0; i < 4; i++)
	{
		uint index = findex[i];
		uint count = min(b_collidable_counter[index], COLLIDABLE_NUM);
		for(uint ii = 0; ii < count; ii++)
		{
			uint fj_id = index*COLLIDABLE_NUM + ii;
			if( b_collidable[fj_id].r_id == r_id)
			{
				// 自分とは判定しない
				continue;
			}

			vec2 pos_j = b_collidable[fj_id].pos;
			vec2 rela_pos = pos-pos_j;
			if(dot(rela_pos, rela_pos) >= k_delimiter*k_delimiter)
			{
				// 距離が離れている
				continue;
			}

			vec2 sdf_j = -b_collidable[fj_id].sdf;
			float mass_j = b_collidable[fj_id].mass_inv;
			float c = max(dot(sdf, sdf_j), 0.);
			float s = max(cross(vec3(sdf, 0.0), vec3(sdf_j, 0.0)).z, 0.);
			float total_mass = mass + mass_j;
			{
				vec2 n_vec = pos_j + sdf_j - pos;
				pos += dot(n_vec, sdf_j) * sdf_j * ((mass /total_mass) * c);

				// 摩擦
				vec2 vel_unit = isZero(vel) ? vec2(0.) : normalize(vel);
				vec2 t_vec = calcTangent(vel_unit, sdf_j) * s;
				pos -= t_vec*0.2;
			}
		}
	}

	b_rbParticle[p_id].pos = pos;
	ivec2 pos_integer = ivec2(round((pos-b_rigidbody[r_id].cm) * CM_WORK_PRECISION));
	atomicAdd(b_rigidbody[r_id].cm_work.x, pos_integer.x);
	atomicAdd(b_rigidbody[r_id].cm_work.y, pos_integer.y);


}

