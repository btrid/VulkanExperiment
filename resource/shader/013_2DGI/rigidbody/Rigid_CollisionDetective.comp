#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D/GI2D.glsl"
#include "GI2D/Rigidbody2D.glsl"

layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

#define FLT_EPSIRON (1.19209290e-07)
//#define isZero(_v) (all(lessThan((_v), vec2(FLT_EPSIRON))))
#define isZero(_v) (dot((_v), (_v)) < FLT_EPSIRON)

vec2 calcTangent(in vec2 I, in vec2 N)
{
	return I - N * dot(N, I);
}
vec2 normalize_safe(in vec2 v)
{
	return isZero(v) ? vec2(0.) : normalize(v);
}
float length_safe(in vec2 v)
{
	return isZero(v) ? 0. : length(v);
}

vec2 nearestAABBPoint(in vec4 box, in vec2 p)
{
	return min(max(p, box.xy), box.zw);
}

vec2 intersectionAABBSegment(in vec4 aabb, in vec2 p, in vec2 dir, in vec2 inv_dir)
{
	vec4 t = (aabb - p.xyxy) * inv_dir.xyxy;
//	vec2 tmin = min(t.xy, t.zw);
 	vec2 tmax = max(t.xy, t.zw);

//	float n = max(tmin.x, tmin.y);
	float f = min(tmax.x, tmax.y);

//	return p + (n >= 0. ? n : f) * dir;
	return p + f * dir;
 }

vec2 closestSegmentPoint(in vec4 seg, in vec2 p)
{
	vec2 ab = seg.zw - seg.xy;
	float t = dot(p - seg.xy, ab) / dot(ab, ab);
	return seg.xy + clamp(t, 0., 1.) * ab;
}
void main() 
{
	uint pb_id = b_pb_update_list[b_world.cpu_index*b_manager.pb_list_size+gl_WorkGroupID.x];
	uint p_id = pb_id*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if((b_rbParticle[p_id].flag_color & RBP_FLAG_ACTIVE) == 0){ return; }

	const ivec4 reso = u_gi2d_info.m_resolution;

	uint r_id = b_rbParticle_map[pb_id];

	vec2 pos = b_rbParticle[p_id].pos;
	vec2 pos_old = b_rbParticle[p_id].pos_old;
	vec2 sdf = b_rbParticle[p_id].local_sdf;
	vec2 sdf_n = normalize_safe(b_rbParticle[p_id].local_sdf);
	float mass = 1.;

	vec2 vel = pos - pos_old;
	float len = length_safe(vel);
	vec2 dir = normalize_safe(vel);

	bool is_hit = false;

	// まず壁と判定
	for(uint iter = 0; iter < len+1.; iter++)
	{
		vec2 pos_i = pos_old + dir * min(iter, len);

		uvec2 map_index = uvec2(pos_i);
		if(any(greaterThanEqual(map_index, reso.xy))){ continue; }
		uint findex = map_index.x + map_index.y * reso.x;
		vec2 sdf_j = -b_collidable_wall[findex].sdf;

		// sdfが無いなら壁ではない
		if(dot(sdf_j,sdf_j) <= 0.001){ continue; }

		{
//			vec2 n_vec = pos_i - nearestAABBPoint(vec2(map_index).xyxy+vec4(0,0,1,1), pos_old);
//			pos = pos_i + n_vec;
			vec2 inv_dir;
			inv_dir.x = abs(sdf_j.x)<=0.0001 ? sign(sdf_j.x)*9999. : (1./sdf_j.x);
			inv_dir.y = abs(sdf_j.y)<=0.0001 ? sign(sdf_j.y)*9999. : (1./sdf_j.y);
			pos = intersectionAABBSegment(vec2(map_index).xyxy+vec4(0,0,1,1), pos_i, sdf_j, inv_dir)+sdf_j*0.01;

		}
		is_hit = true;
		break;
	}

	// 壁を抜けないならほかの動的オブジェクトと判定
/*	if(!is_hit)
	{
		ivec2 map_index = ivec2(pos);
		int findex = map_index.x + map_index.y * u_gi2d_info.m_resolution.x;
		int count = int(min(b_collidable_counter[findex], COLLIDABLE_NUM));

		for(uint ii = 0; ii < count; ii++)
		{
			uint fj_id = findex*COLLIDABLE_NUM + ii;
			if( b_collidable[fj_id].r_id == r_id)
			{
				// 自分とは判定しない
				continue;
			}

			vec2 pos_j = vec2(b_collidable[fj_id].grid_relative_pos) + map_index;
			vec2 rela_pos = pos-pos_j;
			if(dot(rela_pos, rela_pos) >= k_delimiter*k_delimiter)
			{
				// 距離が離れている
				continue;
			}

			vec2 sdf_j = -b_collidable[fj_id].sdf;
			float mass_j = float(b_collidable[fj_id].mass_inv);
			float c = max(dot(sdf, sdf_j), 0.);
			float s = max(cross(vec3(sdf, 0.0), vec3(sdf_j, 0.0)).z, 0.);
			float total_mass = mass + mass_j;
			{
				vec2 n_vec = (pos_j - pos) + sdf_j;
//				pos += dot(n_vec, sdf_j) * sdf_j * ((mass /total_mass) * c);

				pos = pos + sdf_j * dot(n_vec, sdf_j);


				// 摩擦
//				vec2 t_vec = calcTangent(dir, normalize_safe(sdf_j)) * s;
//				pos -= t_vec*0.2;
			}
			is_hit = true;
//			break;
		}	
	}
*/
	if(is_hit)
	{
		b_rbParticle[p_id].flag_color |= _RBP_FLAG_COLLIDED;
		b_rbParticle[p_id].pos = pos;
	}
	else
	{
		b_rbParticle[p_id].flag_color &= ~_RBP_FLAG_COLLIDED;
	}

	if(((b_rigidbody[r_id].flag & RB_FLAG_FLUID) == 0))
	{
		ivec2 pos_integer = ivec2(round((pos-b_rigidbody[r_id].cm) * CM_WORK_PRECISION));
		atomicAdd(b_rigidbody[r_id].cm_work.x, pos_integer.x);
		atomicAdd(b_rigidbody[r_id].cm_work.y, pos_integer.y);
	}
	else
	{
		ivec2 index = ivec2(pos);
		uint i = index.x+index.y*u_gi2d_info.m_resolution.x;
		atomicAdd(b_fluid_counter[i], 1);
	}


}

