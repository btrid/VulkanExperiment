#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D/GI2D.glsl"
#include "GI2D/Rigidbody2D.glsl"

layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

#define FLT_EPSIRON (1.19209290e-07)
//#define isZero(_v) (all(lessThan((_v), vec2(FLT_EPSIRON))))
#define isZero(_v) (dot((_v), (_v)) < FLT_EPSIRON)

vec2 calcTangent(in vec2 I, in vec2 N)
{
	return I - N * dot(N, I);
}
vec2 normalize_safe(in vec2 v)
{
	return isZero(v) ? vec2(0.) : normalize(v);
}
float length_safe(in vec2 v)
{
	return isZero(v) ? 0. : length(v);
}

vec2 nearestAABBPoint(in vec4 aabb, in vec2 p)
{
	return min(max(p, aabb.xy), aabb.zw);
}

bool containsAABBPoint(in vec4 aabb, in vec2 p)
{
	return p.x >= aabb.x && p.x <= aabb.z 
		&& p.y >= aabb.y && p.y <= aabb.w;
}

vec2 intersectionAABBSegment(in vec4 aabb, in vec2 p, in vec2 dir, in vec2 inv_dir)
{
	vec4 t = (aabb - p.xyxy) * inv_dir.xyxy;
//	vec2 tmin = min(t.xy, t.zw);
 	vec2 tmax = max(t.xy, t.zw);

//	float n = max(tmin.x, tmin.y);
	float f = min(tmax.x, tmax.y);

//	return p + (n >= 0. ? n : f) * dir;
	return p + f * dir;
//	return p + min(f, fmax) * dir;
 }

/*vec2 intersectionAABBSegment2(in vec4 aabb, in vec2 p, in vec2 dir)
{
	vec4 t = (aabb - p.xyxy) * inv_dir.xyxy;
//	vec2 tmin = min(t.xy, t.zw);
 	vec2 tmax = max(t.xy, t.zw);

//	float n = max(tmin.x, tmin.y);
	float f = min(tmax.x, tmax.y);

//	return p + (n >= 0. ? n : f) * dir;
	return p + f * dir;
//	return p + min(f, fmax) * dir;
 }
*/
vec2 closestSegmentPoint(in vec4 seg, in vec2 p)
{
	vec2 ab = seg.zw - seg.xy;
	float t = dot(p - seg.xy, ab) / dot(ab, ab);
	return seg.xy + clamp(t, 0., 1.) * ab;
}

bool inetsectLineCircle(inout vec2 ap, in vec2 ad, in vec2 bp)
{
//https://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm
//	vec2 result = p;
//	float t1=0.f, t2=0.f;

	float r =0.5;
	float a = dot(ad,ad);
	float b = 2.f * dot(ap-bp, ad);
	float c = dot(ap-bp, ap-bp) - r*r;

	float discriminant = b * b - 4 * a*c;
	if (discriminant < 0)
	{
		// no intersection
	}
	else
	{
		// ray didn't totally miss sphere,
		// so there is a solution to
		// the equation.
		discriminant = sqrt(discriminant);

		// either solution may be on or off the ray so need to test both
		// t1 is always the smaller value, because BOTH discriminant and
		// a are nonnegative.
		float t1 = (-b - discriminant) / (2.f * a);
		float t2 = (-b + discriminant) / (2.f * a);

		// 3x HIT cases:
		//          -o->             --|-->  |            |  --|->
		// Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit), 

		// 3x MISS cases:
		//       ->  o                     o ->              | -> |
		// FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)

		if (t1 >= 0 && t1 <= 1)
		{
			// t1 is the intersection, and it's closer than t2
			// (since t1 uses -b - discriminant)
			// Impale, Poke
			ap = ap + ad * t1;
			return true;
		}

		// here t1 didn't intersect so we are either started
		// inside the sphere or completely past it
		if (t2 >= 0 && t2 <= 1)
		{
			// ExitWound
//			ap = ap + (ad * t2)*0.25;
//			return true;
		}

		// no intn: FallShort, Past, CompletelyInside
//		return false;
	}
	return false;
}

bool inetsectLineCircle(inout vec2 ap, in vec2 ad, in vec2 bp, in vec2 bd)
{
	float r =0.5;
	if(distance(ap, bp)>=r){return false;}

	float a = dot(ad,ad);
	float b = 2.f * dot(ap-bp, ad);
	float c = dot(ap-bp, ap-bp) - r*r;

	float discriminant = b * b - 4 * a*c;
	if (discriminant < 0)
	{
		return false;
	}

	discriminant = sqrt(discriminant);

	float t1 = (-b - discriminant) / (2.f * a);
	float t2 = (-b + discriminant) / (2.f * a);

	if (/*t1 >= 0 &&*/ t1 <= 1)
	{
		ap = ap + ad * t1;
		return true;
	}
	if (t2 >= 0 /*&& t2 <= 1*/)
	{
		// ExitWound
		ap = ap + (ad * t2);
		return true;
	}
}


void main() 
{
	uint pb_id = b_pb_update_list[b_world.cpu_index*b_manager.pb_list_size+gl_WorkGroupID.x];
	uint p_id = pb_id*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if((b_rbParticle[p_id].flag_color & RBP_FLAG_ACTIVE) == 0){ return; }

	const ivec4 reso = u_gi2d_info.m_resolution;

	uint r_id = b_rbParticle_map[pb_id];

	vec2 pos = b_rbParticle[p_id].pos;
	vec2 pos_old = b_rbParticle[p_id].pos_old;
	vec2 sdf = b_rbParticle[p_id].local_sdf;
	vec2 sdf_n = normalize_safe(b_rbParticle[p_id].local_sdf);
	float mass = 1.;

	vec2 vel = pos - pos_old;
	float len = length_safe(vel);
	vec2 dir = normalize_safe(vel);
	vec2 inv_dir;
	inv_dir.x = abs(dir.x)<=0.0001 ? 9999. : (1./dir.x);
	inv_dir.y = abs(dir.y)<=0.0001 ? 9999. : (1./dir.y);

	bool is_hit = false;

	// まず壁と判定
	vec2 pos_prev = pos_old;
	for(uint iter = 0; iter < len+1.; iter++)
	{
		pos_prev = pos;
		pos = pos_old + dir * min(iter, len);

		uvec2 map_index = uvec2(pos);
		if(any(greaterThanEqual(map_index, reso.xy))){ continue; }
		uint findex = map_index.x + map_index.y * reso.x;
		vec2 sdf_j = -b_collidable_wall[findex].sdf;

		if(dot(sdf_j,sdf_j) > 0.001)
		{
			pos = intersectionAABBSegment(vec2(map_index).xyxy+vec4(0,0,1,1), pos, -dir, -inv_dir)+normalize(sdf_j)*len*0.25;

			is_hit = true;
			break;
		}
	}

	if(!is_hit)
	{
//		ivec2 offset = ivec2(greaterThan(fract(pos), vec2(0.5)))-1;
//		ivec4 pos_x = ivec4(pos.xxxx)+offset.xxxx+ivec4(0,0,1,1);
//		ivec4 pos_y = ivec4(pos.yyyy)+offset.yyyy+ivec4(0,1,0,1);

//		for(int i = 0; i<4; i++)
		{
//				ivec2 map_index = ivec2(pos_x[i], pos_y[i]);
			uvec2 map_index = uvec2(pos);
//			if(any(greaterThanEqual(map_index, reso.xy))){ }

			uint findex = map_index.x + map_index.y * reso.x;

			int count = int(min(b_collidable_counter[findex], COLLIDABLE_NUM));
			for(uint ii = 0; ii < count; ii++)
			{
				uint fj_id = findex*COLLIDABLE_NUM + ii;
				if( b_collidable[fj_id].r_id == r_id)
				{
					// 自分とは判定しない
					continue;
				}
				vec2 sdf_j = -b_collidable[fj_id].sdf;
				vec2 p_j = b_collidable[fj_id].grid_relative_pos;
				vec2 inv_sdf;
				inv_sdf.x = abs(sdf_j.x)<=0.0001 ? 9999. : (1./sdf_j.x);
				inv_sdf.y = abs(sdf_j.y)<=0.0001 ? 9999. : (1./sdf_j.y);

				pos = intersectionAABBSegment(vec2(map_index).xyxy+vec4(0.,0.,1.,1.), pos, sdf_j, inv_sdf);
				is_hit = true;
				break;
			}
		}

	}

	if(is_hit)
	{
		b_rbParticle[p_id].flag_color |= _RBP_FLAG_COLLIDED;
		b_rbParticle[p_id].pos = pos;
	}
	else
	{
		b_rbParticle[p_id].flag_color &= ~_RBP_FLAG_COLLIDED;
	}

	if(((b_rigidbody[r_id].flag & RB_FLAG_FLUID) == 0))
	{
		ivec2 pos_integer = ivec2(round((pos-b_rigidbody[r_id].cm) * CM_WORK_PRECISION));
		atomicAdd(b_rigidbody[r_id].cm_work.x, pos_integer.x);
		atomicAdd(b_rigidbody[r_id].cm_work.y, pos_integer.y);
	}
	else
	{
		ivec2 index = ivec2(pos);
		uint i = index.x+index.y*u_gi2d_info.m_resolution.x;
		atomicAdd(b_fluid_counter[i], 1);
	}


}

