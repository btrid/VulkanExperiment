#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"

layout (local_size_x = 1024) in;

struct MarchResult
{
	vec2 next_pos;
	ivec2 next_map_index;
	float progress;
	bool is_end;
};

// 軽量版
MarchResult marchEx(in vec2 pos, in ivec2 map_index, in float progress, in vec2 dir)
{
	pos += dir * clamp(progress, 0., 1.);
	progress = max(progress-1., 0.);

	MarchResult result;
	result.next_pos = pos;
	result.next_map_index = ivec2(pos);
	result.progress = progress;
	result.is_end = progress <= 1.;
	return result;
}

vec2 rotate(in vec2 v, in float angle)
{
	float c = cos(angle);
	float s = sin(angle);

	vec2 Result;
	Result.x = v.x * c - v.y * s;
	Result.y = v.x * s + v.y * c;
	return Result;
}

mat3 rotateMat(in float angle)
{
	float c = cos(angle);
	float s = sin(angle);

	return mat3(c, -s, 0., s, c, 0., 0., 0., 1.);
}

mat3 matrixCross3(in vec3 v)
{
    return mat3(
          0.,  v.z, -v.y, 
        -v.z,   0.,  v.x,
         v.y, -v.x,   0. );
}

vec2 calcTangent(in vec2 normal)
{
	vec3 vec = vec3(0.,0.,1.);
	return normalize(cross(vec3(normal, 0.),vec)).xy;
}

void main() 
{

	int p_id = int(gl_GlobalInvocationID.x);
	if(p_id >= b_rigidbody.pnum){ return; }

	vec2 rela_pos = b_relative_pos[p_id];
	vec2 local_pos = rotate(rela_pos, b_rigidbody.angle);
	vec2 pos = b_rigidbody.pos + local_pos;

	vec2 vel = b_rigidbody.vel;
	vec2 angular_vel = cross(vec3(local_pos, 0.), vec3(0., 0., b_rigidbody.angle_vel*DT)).xy;


	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	vec2 dir = vel + angular_vel;
	if(dot(dir, dir) != 0.)
	{ 
		float advance = length(dir);
		dir = normalize(dir);
		ivec2 map_index = ivec2(pos);
		float progress = advance;
		for(int _i = 0; _i < 500; _i++)
		{
			MarchResult result = marchEx(pos, map_index, progress, dir);
			progress = result.progress;

			// hit確認
			{
				ivec4 fragment_index = ivec4(result.next_map_index/8, result.next_map_index%8);

				int findex = fragment_index.x + fragment_index.y*reso.z;
				uint64_t fragment_map = b_diffuse_map[findex];

				ivec2 shift = fragment_index.zw;
				uint64_t bit = 1ul<<(shift.x+shift.y*8);
				if((fragment_map & bit) != 0)
				{

					// 衝突ペアの計算
					float mass = 1.;
					float mass_inv = 1. / mass;
					float I = 0.1;
//					float I = b_rigidbody.inertia;

					mat3 m = rotateMat(b_rigidbody.angle);
					mat3 I_inv = inverse(mat3(vec3(1.,0.,0.), vec3(0.,1.,0.), vec3(0.,0.,I)));
					I_inv = m * I_inv * transpose(m);
					mat3 a = matrixCross3(vec3(local_pos, 0.));
					mat3 K = mat3(mass_inv) - a * I_inv * a;

					vec2 delta_linear_vel = vec2(0.);
					float delta_angular_vel = 0.;
					float friction = 0.;

					vec2 normal_axis = dir; // 拘束軸
//					vec2 normal_axis = vel; // 拘束軸
					vec2 tangent_axis = calcTangent(normal_axis); // 拘束軸
					{
						// normal
						vec3 axis3 = vec3(normal_axis, 0.);
						float denom = dot(K*axis3, axis3);
						float impulse = 0.;
						impulse -= (1. + 0.2) * dot(dir*advance, normal_axis); // 速度の補正
						impulse -= 1.1*(progress); // 位置の補正
						impulse *= 1. / denom;

						impulse -= 1. / denom * dot(normal_axis,dir*progress);

						delta_linear_vel  += impulse * mass_inv * normal_axis;
						delta_angular_vel += impulse * (I_inv * cross(vec3(local_pos, 0.),vec3(normal_axis, 0.))).z;

						friction = abs(impulse) * 0.6;
					}
					{
						// tangent 
						vec3 axis3 = vec3(tangent_axis, 0.);
						float denom = dot(K*axis3, axis3);
						float impulse = 0.;
						impulse -= dot(dir*advance, tangent_axis); // 速度の補正
						impulse *= 1. / denom;

						impulse = clamp(impulse, -friction, friction);

//						delta_linear_vel  += impulse * mass_inv * tangent_axis;
//						delta_angular_vel += impulse * (I_inv * cross(vec3(local_pos, 0.),vec3(tangent_axis, 0.))).z;

					}

					int aa = atomicAdd(b_rigidbody.solver_count, 1);
					{
						atomicAdd(b_rigidbody.vel_work.x, int(delta_linear_vel.x * 65535.));
						atomicAdd(b_rigidbody.vel_work.y, int(delta_linear_vel.y * 65535.));
						atomicAdd(b_rigidbody.angle_vel_work, int(delta_angular_vel * 65535.));

					}

					break;

				}
				else
				{
					// 何もないのでそのまま進む
					map_index = result.next_map_index;
					pos = result.next_pos;

				}
			}

			if(result.is_end)
			{
				vel = dir * advance * 0.95;

				b_rbpos[p_id] = pos;
				b_rbvel[p_id] = vel;
				break;
			}

		}
	}

	ivec2 reso_grid = ivec2(reso.xy/Grid_Size);
	vec2 index_grid_f = pos / Grid_Size;
	ivec2 index_grid = ivec2(index_grid_f);
	if(any(lessThan(index_grid, ivec2(0))) || any(greaterThanEqual(index_grid, reso_grid.xy))){ return; }
	int i = index_grid.x + index_grid.y*reso_grid.x;

	atomicAdd(b_grid_counter[i], 1);



}

