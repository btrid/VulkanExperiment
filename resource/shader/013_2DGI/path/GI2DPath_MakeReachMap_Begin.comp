#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define USE_GI2D 0
#define USE_GI2D_Path 1
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"

layout (local_size_x = 32) in;

// https://github.com/zerowidth/jps-explained
// https://zerowidth.com/2013/05/05/jump-point-search-explained.html


layout(push_constant, std430) uniform InputVertex
{
	i16vec2 target[10];
	i16vec2 target_num;
	i16vec2 reso;
} constant;


uvec4 neighor_check_list[] =
{
	uvec4(2,6,1,7), // diagonal_path 
	uvec4(3,5,4,4), // diagonal_wall
	uvec4(1,7,4,4), // straight_path
	uvec4(2,6,4,4), // straight_wall
};

void explore(in PathData_Work parent)
{
	uint dir_type = (parent.data>>0)&((1<<4)-1);
	uint cost = (parent.data>>4)&((1<<28)-1);
	uint neighbor = uint(b_neighbor[uint(parent.pos.x + parent.pos.y * constant.reso.x)]);

	// 新しい探索のチェック
	uvec4 path_check = (dir_type.xxxx + neighor_check_list[(dir_type%2)*2]) % u8vec4(8);
	uvec4 wall_check = (dir_type.xxxx + neighor_check_list[(dir_type%2)*2+1]) % u8vec4(8);
	u8vec4 path_bit = u8vec4(1)<<path_check;
	u8vec4 wall_bit = u8vec4(1)<<wall_check;

	bvec4 is_path = notEqual((~neighbor.xxxx) & path_bit, uvec4(0));
	bvec4 is_wall = notEqual(neighbor.xxxx & wall_bit, uvec4(0));
	uvec4 is_open = uvec4(is_path) * uvec4(is_wall.xy, 1-ivec2(dir_type%2));

	{

		for(int i = 0; i < 4; i++)
		{
			if(is_open[i]==0){ continue; }

			ivec2 pos = parent.pos + g_neighbor[path_check[i]];
			int index = pos.x + pos.y * constant.reso.x;
			uint data = path_check[i] | ((cost + 1)<<4);
			if(atomicCompSwap(b_path_data[index].data, -1, data)==-1){ continue; }

			uint active_index = atomicAdd(b_open_counter[0].w, 1);
			if((active_index%64)==0){ atomicAdd(b_open_counter[0].x, 1); }

			b_open[active_index] = i16vec2(pos);
		}
	}
	{
		uint is_advance = uint(((~neighbor) & (1u << dir_type)) != 0) * uint(any(is_path.zw));
		if(is_advance != 0)
		{
			ivec2 pos = parent.pos + g_neighbor[dir_type];
			int index = pos.x + pos.y * constant.reso.x;
			uint data = dir_type | ((cost + 1)<<4);
			if(atomicCompSwap(b_path_data[index].data, -1, data)==-1){ return; }

			uint active_index = atomicAdd(b_open_counter[0].w, 1);
			if((active_index%64)==0){ atomicAdd(b_open_counter[0].x, 1); }

			b_open[active_index] = i16vec2(pos);
		}
	}
}

void main() 
{	
	if(gl_LocalInvocationIndex < constant.target_num.x*8)
	{
		ivec2 pos = ivec2(constant.target[gl_LocalInvocationIndex/8]);
		uint dir_type = gl_LocalInvocationIndex%8;
		int index = pos.x + pos.y * constant.reso.x;
		uint neighbor = uint(b_neighbor[index]);
		OpenNode node;
		node.pos = i16vec2(pos);
		node.data = dir_type;
		if((~neighbor & (1<<dir_type)) != 0)
		{
			explore(node);
		}
		if((gl_LocalInvocationIndex %8) == 0 )
		{
			b_path_data[index].data = 0;
//			b_parent[index] = uint8_t(0);
		}

	}
}
