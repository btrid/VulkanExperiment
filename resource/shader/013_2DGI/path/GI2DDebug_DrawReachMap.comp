#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Path 1
#define USE_RenderTarget 2
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"
#include "applib/System.glsl"
layout (local_size_x = 32, local_size_y = 32) in;

void main() 
{

	uvec2 point = gl_GlobalInvocationID.xy * (u_gi2d_info.m_resolution.xy / u_render_info.m_size.xy);
	uvec2 index = point/8;
	uvec2 bit = point%8;
	uint64_t fragment_map = b_fragment_map[index.x + index.y*u_gi2d_info.m_resolution.z];
	vec3 color = vec3(0.);
	if((fragment_map & (1ul<<(bit.x+bit.y*8))) == 0)
	{ 
		uint i = point.x + point.y*u_gi2d_info.m_resolution.x;
#if 1
	vec3 colors[] ={
		vec3(0., 0., 1.),
		vec3(0., 1., 1.),
		vec3(0., 1., 0.),
		vec3(1., 1., 0.),
		vec3(1., 0., 0.),
		vec3(1., 0., 1.),
	};
		uint cost = b_path_data[i].data;
		cost = (cost>>5)&((1<<27)-1);

		uint color_index1 = (cost / 50) % colors.length();
		uint color_index2 = (color_index1+1) % colors.length();
		float color_rate = (cost % 50) / 50.;
		color = mix(colors[color_index1], colors[color_index2], color_rate);
#else
	vec3 colors[] ={
		vec3(0., 0., 1.),
		vec3(0., 0.33, 0.66),
		vec3(0., 0.66, 0.33),
		vec3(0., 1., 0.),
		vec3(0.33, 0.66, 0.),
		vec3(0.66, 0.33, 0.),
		vec3(1., 0., 0.),
		vec3(0.5, 0., 0.55),
	};
		uint path_dir = PathData_dirtype(b_path_data[i]);
		vec2 target_dir = normalize(vec2(g_neighbor[path_dir]));
		color = vec3(abs(target_dir.yyy));

#endif

	}
	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));
}

//b_diffuse_map[store]

