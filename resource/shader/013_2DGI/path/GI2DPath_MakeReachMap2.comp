#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define USE_GI2D 0
#define USE_GI2D_Path 1
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"

layout (local_size_x = 1024) in;

// https://github.com/zerowidth/jps-explained
// https://zerowidth.com/2013/05/05/jump-point-search-explained.html


layout(push_constant, std430) uniform InputVertex
{
	i16vec2 target[10];
	i16vec2 target_num;
	i16vec2 reso;
} constant;


uvec4 neighor_check_list[] =
{
	uvec4(2,6,1,7), // diagonal_path 
	uvec4(3,5,4,4), // diagonal_wall
	uvec4(1,7,4,4), // straight_path
	uvec4(2,6,4,4), // straight_wall
};

uint g_cost[] = {20, 10};
struct OpenNode
{
	i16vec2 pos;
	uint cost;
	uint dir_type;
};
shared OpenNode s_open[1024*2];
shared uvec2 s_open_counter;

void explore(in OpenNode parent)
{
	ivec2 pos = parent.pos + g_neighor_list[parent.dir_type];
	int index = pos.x + pos.y * constant.reso.x;

	{
		// すでにチェック済みなら終わり
		int bit = 1<<(index % 32);
		if((atomicOr(b_closed[index / 32], bit) & bit) != 0)
		{
			return;
		}
		
		b_closed_node[index] = Node(parent.cost+g_cost[parent.dir_type%2], i16vec2(parent.pos));
	}

	// 新しい探索のチェック
	{
		uint neighbor = uint(b_neighbor[index]);
		uvec4 path_check = (parent.dir_type.xxxx + neighor_check_list[(parent.dir_type%2)*2]) % uvec4(8);
		uvec4 wall_check = (parent.dir_type.xxxx + neighor_check_list[(parent.dir_type%2)*2+1]) % uvec4(8);
		uvec4 path_bit = uvec4(1)<<path_check;
		uvec4 wall_bit = uvec4(1)<<wall_check;

		bvec4 is_path = notEqual((~neighbor.xxxx) & path_bit, uvec4(0));
		bvec4 is_wall = notEqual(neighbor.xxxx & wall_bit, uvec4(0));
		uvec4 is_open = uvec4(is_path) * uvec4(is_wall.xy, 1-ivec2(parent.dir_type%2));

		uint is_advance = uint(((~neighbor) & (1u << parent.dir_type)) != 0) * uint(any(is_path.zw));


		uint num = is_open.x+is_open.y+is_open.z+is_open.w + is_advance;
#if 0
		if(num != 0)
		{
			OpenNode node;
			node.cost = parent.cost+1;
			node.pos = i16vec2(pos);
			
			uint active_index = atomicAdd(s_open_counter[0], num);
			for(int i = 0; i < 4; i++)
			{
				if(is_open[i]==0){ continue; }
				node.dir_type = path_check[i];
				s_open[active_index++ % s_open.length()] = node;
			}

			if(is_advance != 0)
			{
				node.dir_type = parent.dir_type;
				s_open[active_index++ % s_open.length()] = node;
			}
		}

#else
		uint local_index = subgroupExclusiveAdd(num);
		uint global_index = 0;
		if (gl_SubgroupInvocationID == subgroupBallotFindMSB(subgroupBallot(true)))
		{
			global_index = atomicAdd(s_open_counter[0], local_index + num);
		}
		global_index = subgroupMax(global_index);

		OpenNode node;
		node.cost = parent.cost+1;
		node.pos = i16vec2(pos);
		for(int i = 0; i < 4; i++)
		{
			if(is_open[i]==0){ continue; }
			node.dir_type = path_check[i];
			s_open[(global_index + local_index++) % s_open.length()] = node;
		}

		if(is_advance != 0)
		{
			node.dir_type = parent.dir_type;
			s_open[(global_index + local_index++) % s_open.length()] = node;
		}
#endif
	}
}

void main() 
{
	for(uint i = gl_LocalInvocationIndex; i < uint(constant.reso.x)*constant.reso.y/32; i+=gl_WorkGroupSize.x)
	{
		b_closed[i] = 0;
	}
	
	if(gl_LocalInvocationIndex == 0)
	{
		s_open_counter = uvec2(0);
	}

	memoryBarrierBuffer();
	memoryBarrierShared();
	barrier();

	if(gl_LocalInvocationIndex < constant.target_num.x*8)
	{
		ivec2 pos = ivec2(constant.target[gl_LocalInvocationIndex/8]);
		uint dir_type = gl_LocalInvocationIndex%8;
		int index = pos.x + pos.y * constant.reso.x;
		uint neighbor = uint(b_neighbor[index]);
		OpenNode node;
		node.pos = i16vec2(pos);
		node.cost = 0;
		node.dir_type = dir_type;
		if((~neighbor & (1<<dir_type)) != 0)
		{
			explore(node);
		}
		if((gl_LocalInvocationIndex %8) == 0 )
		{
			b_closed_node[index] = Node(0, node.pos);
		}

	}

//	for(int i = 0; i < constant.target_num.y; i++)
	for(int i = 0; i < 5000; i++)
	{
		memoryBarrierShared();
		barrier();

		uint accum = s_open_counter[0];
		uint consume = s_open_counter[1];
		uint count = min(accum-consume, gl_WorkGroupSize.x);
		if(count == 0){ break; }

		bool is_open = gl_LocalInvocationIndex < count;

		barrier();

		if(gl_LocalInvocationIndex == 0)
		{
			s_open_counter[1] += count;
		}

		if(is_open)
		{
			OpenNode node = s_open[(consume+gl_LocalInvocationIndex) % s_open.length()];
			explore(node);
		}
	}
}
