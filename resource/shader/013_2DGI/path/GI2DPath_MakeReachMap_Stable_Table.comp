// 安定的経路探索
#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_EXT_nonuniform_qualifier : enable

#define USE_GI2D 0
#define USE_GI2D_Path 1
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"

layout (local_size_x = 1024) in;

// https://github.com/zerowidth/jps-explained
// https://zerowidth.com/2013/05/05/jump-point-search-explained.html


layout(push_constant, std430) uniform InputVertex
{
	i16vec2 target[10];
	i16vec2 target_num;
	i16vec2 reso;
} constant;

struct Node
{
	i16vec2 pos;
};
shared Node s_active[1024*4];
shared int s_active_counter;

void tryPushOpen(ivec2 pos, uint dir_type, uint data)
{
	pos += g_neighbor[dir_type];
	int index = pos.x + pos.y * constant.reso.x;

	{
		// すでにチェック済みなら終わり
		// 斜めか直線かどっちかを優先する
		uint prev_data = atomicMin(b_path_data[index].data, data);
		if(prev_data == -1)
		{
			uint active_index = atomicAdd(s_active_counter, 1);
			s_active[active_index%s_active.length()].pos = i16vec2(pos);
		}
		else
		{

		}
	}
}

void explore(in ivec2 pos, uint dir_type, uint cost)
{
	int index = pos.x + pos.y * constant.reso.x;
	cost += 1;
	// 新しい探索のチェック
	{
		uint neighbor = uint(b_neighbor[index]);
		int dir_types = u_neighbor_table[int(neighbor+dir_type*256)];
		while(dir_types!=0)
		{
			int dir = findMSB(dir_types);
			dir_types &= ~(1<<dir);
			tryPushOpen(pos, dir, dir|(cost<<4));
		}
	}
}

void main() 
{
	if(gl_LocalInvocationIndex == 0)
	{
		s_active_counter = 0;
	}

	memoryBarrierShared();
	barrier();

	if(gl_LocalInvocationIndex < constant.target_num.x*8)
	{
		ivec2 pos = ivec2(constant.target[gl_LocalInvocationIndex/8]);
		uint dir_type = gl_LocalInvocationIndex%8;
		uint neighbor = uint(b_neighbor[pos.x + pos.y * constant.reso.x]);
		if((~neighbor & (1<<dir_type)) != 0)
		{
			explore(pos, dir_type, 0);
		}
	}

	int consume = 0;
	int accum = 0;
	for(int age = 1; age < 5000; age++)
	{
		memoryBarrierShared();
		barrier();

		consume += accum;
		accum = s_active_counter-consume;
		if(accum == 0){ break; }


		for(int i = int(gl_LocalInvocationIndex); i < accum; i+=int(gl_WorkGroupSize.x))
		{
			Node node = s_active[(i+consume)%s_active.length()];
			ivec2 pos = ivec2(node.pos);
			int index = pos.x + pos.y * constant.reso.x;
			int data = int(b_path_data[index].data);
			int dir_type = (data>>0)&((1<<4)-1);
			explore(pos, dir_type, age);
		}
	}
}