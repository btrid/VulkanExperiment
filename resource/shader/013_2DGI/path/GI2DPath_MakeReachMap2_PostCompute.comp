#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define USE_GI2D 0
#define USE_GI2D_Path 1
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

// https://github.com/zerowidth/jps-explained
// https://zerowidth.com/2013/05/05/jump-point-search-explained.html


layout(push_constant, std430) uniform InputVertex
{
	i16vec2 target[10];
	i16vec2 target_num;
	i16vec2 reso;
} constant;

shared uint s_table[32][32];

void main() 
{	
	s_table[gl_LocalInvocationID.y][gl_LocalInvocationID.x] = 

	memoryBarrierShared();
	barrier();

	if(gl_LocalInvocationIndex < constant.target_num.x*8)
	{
		ivec2 pos = ivec2(constant.target[gl_LocalInvocationIndex/8]);
		uint dir_type = gl_LocalInvocationIndex%8;
		int index = pos.x + pos.y * constant.reso.x;
		uint neighbor = uint(b_neighbor[index]);
		OpenNode node;
		node.pos = i16vec2(pos);
		node.data = dir_type;
		if((~neighbor & (1<<dir_type)) != 0)
		{
			explore(node);
		}
		if((gl_LocalInvocationIndex %8) == 0 )
		{
			b_path_data[index].data = 0;
//			b_parent[index] = uint8_t(0);
		}

	}

	for(int i = 0; i < constant.target_num.y; i++)
//	for(int i = 0; i < 5000; i++)
	{
		memoryBarrierShared();
		memoryBarrierBuffer();
		barrier();

		uint accum = s_open_counter[0];
		uint consume = s_open_counter[1];
		uint count = min(accum-consume, gl_WorkGroupSize.x);
		if(count == 0){ break; }

		bool is_open = gl_LocalInvocationIndex < count;

		barrier();

		if(gl_LocalInvocationIndex == 0)
		{
			s_open_counter[1] += count;

			// 調査用
			atomicMax(b_connect, accum-consume);
		}

		if(is_open)
		{
			OpenNode node = s_open[(consume+gl_LocalInvocationIndex) % s_open.length()];
			explore(node);
		}
	}
}
