#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define USE_GI2D 0
#define USE_GI2D_Path 1
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"

layout (local_size_x = 1024) in;

// https://github.com/zerowidth/jps-explained
// https://zerowidth.com/2013/05/05/jump-point-search-explained.html


layout(push_constant, std430) uniform InputVertex
{
	i16vec2 target[10];
	i16vec2 target_num;
	i16vec2 reso;
} constant;


uvec4 neighor_check_list[] =
{
	uvec4(2,6,1,7), // diagonal_path 
	uvec4(3,5,4,4), // diagonal_wall
	uvec4(1,7,4,4), // straight_path
	uvec4(2,6,4,4), // straight_wall
};


const ivec2 g_neighbor[8] = 
{
	ivec2(-1,-1), 
	ivec2( 0,-1),
	ivec2( 1,-1),
	ivec2( 1, 0),
	ivec2( 1, 1),
	ivec2( 0, 1),
	ivec2(-1, 1),
	ivec2(-1, 0),
};

struct OpenNode
{
	ivec2 index;
};

shared OpenNode s_open[1024*8];
shared ivec2 s_neighbor_index[8];
shared uvec2 s_open_counter;

void explore(in OpenNode parent)
{
	uint dir_type = (parent.data>>28)&((1<<4)-1);
	uint cost = parent.data&((1<<28)-1);
	ivec2 pos = parent.pos + g_neighbor[dir_type];
	int index = pos.x + pos.y * constant.reso.x;

	{
		uint prev_cost = atomicMin(b_cost[index], cost);
		if(prev_cost <= cost)
		{
			return;
		}
		b_parent[index] = i16vec2(pos);
	}

	// 新しい探索のチェック
	{
		uint neighbor = uint(b_neighbor[index]);
//		u8vec4 path_check = u8vec4((dir_type.xxxx + neighor_check_list[(dir_type%2)*2]) % u8vec4(8u));
//		u8vec4 wall_check = u8vec4((dir_type.xxxx + neighor_check_list[(dir_type%2)*2+1]) % u8vec4(8u));
		uvec4 path_check = (dir_type.xxxx + neighor_check_list[(dir_type%2)*2]) % u8vec4(8);
		uvec4 wall_check = (dir_type.xxxx + neighor_check_list[(dir_type%2)*2+1]) % u8vec4(8);
		u8vec4 path_bit = u8vec4(1)<<path_check;
		u8vec4 wall_bit = u8vec4(1)<<wall_check;

		bvec4 is_path = notEqual((~neighbor.xxxx) & path_bit, uvec4(0));
		bvec4 is_wall = notEqual(neighbor.xxxx & wall_bit, uvec4(0));
		uvec4 is_open = uvec4(is_path) * uvec4(is_wall.xy, 1-ivec2(dir_type%2));

		uint is_advance = uint(((~neighbor) & (1u << dir_type)) != 0) * uint(any(is_path.zw));


		uint num = is_open.x+is_open.y+is_open.z+is_open.w + is_advance;
		if(num != 0)
		{
			PathNode node;
			uint active_index = atomicAdd(s_open_counter[0], num);
			for(int i = 0; i < 4; i++)
			{
				if(is_open[i]==0){ continue; }
				node.data = (path_check[i]<<28) | (cost + ((path_check[i]%2)==0 ? 14 : 10));
				s_open[active_index++ % s_open.length()].index = index + s_neighbor_index[path_check[i]];
				b_node[index + ]
			}

			if(is_advance != 0)
			{
				node.data = (dir_type<<28) | (cost + ((dir_type%2)==0 ? 14 : 10));
				s_open[active_index++ % s_open.length()].index = index + s_neighbor_index[dir_type];
			}
		}
	}
}

void main() 
{	
	if(gl_LocalInvocationIndex == 0)
	{
		s_open_counter = uvec2(0);
		s_neighbor_index[0] = -1+-1*constant.reso.x;
		s_neighbor_index[1] =  0+-1*constant.reso.x;
		s_neighbor_index[2] =  1+-1*constant.reso.x;
		s_neighbor_index[3] =  1+ 0*constant.reso.x;
		s_neighbor_index[4] =  1+ 1*constant.reso.x;
		s_neighbor_index[5] =  0+ 1*constant.reso.x;
		s_neighbor_index[6] = -1+ 1*constant.reso.x;
		s_neighbor_index[7] = -1+ 0*constant.reso.x;
	}

	memoryBarrierShared();
	barrier();

	if(gl_LocalInvocationIndex < constant.target_num.x*8)
	{
		ivec2 pos = ivec2(constant.target[gl_LocalInvocationIndex/8]);
		uint dir_type = gl_LocalInvocationIndex%8;
		int index = pos.x + pos.y * constant.reso.x;
		uint neighbor = uint(b_neighbor[index]);
		OpenNode node;
		node.pos = i16vec2(pos);
		node.data = (dir_type<<28);
		if((~neighbor & (1<<dir_type)) != 0)
		{
			explore(node);
		}
		if((gl_LocalInvocationIndex %8) == 0 )
		{
			b_cost[index] = 0;
			b_parent[index] = node.pos;
		}

	}

	for(int i = 0; i < constant.target_num.y; i++)
//	for(int i = 0; i < 5000; i++)
	{
		memoryBarrierShared();
		memoryBarrierBuffer();
		barrier();

		uint accum = s_open_counter[0];
		uint consume = s_open_counter[1];
		uint count = min(accum-consume, gl_WorkGroupSize.x);
		if(count == 0){ break; }

		bool is_open = gl_LocalInvocationIndex < count;

		barrier();

		if(gl_LocalInvocationIndex == 0)
		{
			s_open_counter[1] += count;

			// 調査用
			atomicMax(b_connect, accum-consume);
		}

		if(is_open)
		{
			OpenNode node = s_open[(consume+gl_LocalInvocationIndex) % s_open.length()];
			explore(node);
		}
	}
}
