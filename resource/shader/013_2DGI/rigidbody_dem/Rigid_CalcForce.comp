#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"

layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

vec2 calcTangent(in vec2 I, in vec2 N)
{
	return I - N * dot(N, I);
}

const float k_radius = 0.5;
const float k_delimiter = 1.;

void main() 
{
	uint r_id = b_rbParticle_map[gl_WorkGroupID.x];
	uint p_id = gl_WorkGroupID.x*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if(b_rbParticle[p_id].contact_index == -1){ return; }

	vec2 pos = b_rbParticle[p_id].pos;
	ivec4 map_index = ivec4(pos.xyxy) + ivec4(ivec2(0), step(vec2(0.5), pos-floor(pos) * 2. - 1.));
	ivec4 findex = map_index.xzxz + map_index.yyww * u_gi2d_info.m_resolution.x;

	int hit = 0;
	vec2 ex = vec2(0.);
	for(uint i = 0; i < 4; i++)
	{
		uint index = findex[i];
		uint count = min(b_fluid_count[index], FLUID_NUM);
		for(uint ii = 0; ii < count; ii++)
		{
			if( b_fluid[index*FLUID_NUM + ii].id == r_id)
			{
				// 自分とは判定しない
				continue;
			}
			vec2 pos_j = b_fluid[index*FLUID_NUM + ii].pos;

			vec2 rela_pos = pos_j - pos;
			if(dot(rela_pos, rela_pos) >= k_delimiter*k_delimiter)
			{
				// 
				continue;
			}
//			float dist = length(rela_pos);
			vec2 sdf = b_fluid[index*FLUID_NUM + ii].sdf;
			sdf -= rela_pos;
			ex += sdf;
			hit++;
		}
	}

	if(hit!=0)
	{
		b_rbParticle[p_id].pos += ex / float(hit);
	}
}

