#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"

layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

vec2 calcTangent(in vec2 I, in vec2 N)
{
	return I - N * dot(N, I);
}

void main() 
{
	uint r_id = b_rbParticle_map[gl_WorkGroupID.x];
	uint p_id = gl_WorkGroupID.x*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if(b_rbParticle[p_id].contact_index == -1){ return; }

	vec2 pos = b_rbParticle[p_id].pos;
	vec2 pos_old = b_rbParticle[p_id].pos_old;
	vec2 vel = b_rbParticle[p_id].vel;
	ivec4 map_index = ivec4(pos.xyxy) + ivec4(ivec2(0), step(vec2(0.5), pos-floor(pos)));
	ivec4 findex = map_index.xzxz + map_index.yyww * u_gi2d_info.m_resolution.x;

	vec2 delta_linear_vel = vec2(0.0);
	float delta_angular_vel = 0.0;
	bool ishit = false;
	for(uint i = 0; i < 4; i++)
	{
		uint index = findex[i];
		uint count = min(b_fluid_count[index], FLUID_NUM);
		for(uint ii = 0; ii < count; ii++)
		{
			if( b_fluid[index*FLUID_NUM + ii].id == r_id)
			{
				// 自分とは判定しない
				continue;
			}
			vec2 Pj = b_fluid[index*FLUID_NUM + ii].pos;
			float k_radius = 1.;

			vec2 rela_pos = Pj - pos;
			if(dot(rela_pos, rela_pos) >= k_radius*2.*k_radius*2.)
			{
				// 
				continue;
			}
			rela_pos = normalize(rela_pos);
			vec2 rela_vel = b_fluid[index*FLUID_NUM + ii].vel - vel;
			vec2 rela_dir = normalize(rela_vel);

			float k_spring = 0.15;
			float k_spring_t = 0.15;
			{
				vec2 restitution = rela_vel*k_spring; // 反発力
				vec2 restitution_t = calcTangent(rela_vel, rela_pos) *k_spring_t;
				delta_linear_vel += restitution + restitution_t;
				delta_angular_vel += cross(vec3(b_rbParticle[p_id].local_pos, 0.), vec3(restitution + restitution_t, 0.)).z;

			}
			ishit = true;
		}
	}

	if(ishit)
	{
		uint index = atomicAdd(b_rigidbody[r_id].solver_count, 1);
		atomicAdd(b_rigidbody[r_id].vel_work.x, int(round(delta_linear_vel.x * 65535.)));
		atomicAdd(b_rigidbody[r_id].vel_work.y, int(round(delta_linear_vel.y * 65535.)));
		atomicAdd(b_rigidbody[r_id].angle_vel_work, int(round(delta_angular_vel * 65535.*255.)));
	}
}

