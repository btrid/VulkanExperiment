#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"


layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

void main() 
{
	uint p_id = gl_WorkGroupID.x*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if(b_rbParticle[p_id].contact_index == -1){ return; }


	uint r_id = b_rbParticle_map[gl_WorkGroupID.x];
//	vec2 pos = b_rbParticle[p_id].pos;
	vec2 pos = b_rigidbody[r_id].R * b_rbParticle[p_id].relative_pos + b_rigidbody[r_id].cm;
	vec2 pos_old = b_rbParticle[p_id].pos_old;
	vec2 pos_predict = b_rbParticle[p_id].pos_predict;
	vec2 vel = pos - pos_old + RB_GRAVITY_DT;
//	vel += (pos - pos_predict) * RB_DT;

	b_rbParticle[p_id].pos_old = pos;
//	pos += vel;
	b_rbParticle[p_id].pos = pos;
	b_rbParticle[p_id].pos_predict = pos;
	b_rbParticle[p_id].f_id = -1;
	b_rbParticle[p_id].is_contact = 0;

	b_rbParticle[p_id].local_sdf = b_rigidbody[r_id].R * b_rbParticle[p_id].sdf;
//	ivec2 pos_integer = ivec2(round(pos / b_rigidbody[r_id].pnum * 65535.));
//	atomicAdd(b_rigidbody[r_id].cm_work.x, pos_integer.x);
//	atomicAdd(b_rigidbody[r_id].cm_work.y, pos_integer.y);


}

