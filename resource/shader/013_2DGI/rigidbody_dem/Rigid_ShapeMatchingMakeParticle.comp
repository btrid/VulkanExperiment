#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"


layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;

void main() 
{
	uint p_id = gl_WorkGroupID.x*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if(b_rbParticle[p_id].contact_index == -1){ return; }


	uint r_id = b_rbParticle_map[gl_WorkGroupID.x];
//	vec2 local_pos = rotateRBParticle(b_rbParticle[p_id].relative_pos, s_rb.angle);
//	vec2 pos = s_rb.pos + local_pos;
	vec2 pos = b_rbParticle[p_id].pos;
	vec2 pos_old = b_rbParticle[p_id].pos_old;

	vec2 vel = pos - pos_old + RB_GRAVITY_DT;

	b_rbParticle[p_id].pos_old = pos;
	pos += vel;
	b_rbParticle[p_id].pos = pos;
	b_rbParticle[p_id].pos_predict = pos;
//	b_rbParticle[p_id].local_pos = local_pos;
//	b_rbParticle[p_id].local_sdf = rotateRBParticle(b_rbParticle[p_id].sdf, s_rb.angle);
	b_rbParticle[p_id].f_id = -1;
	b_rbParticle[p_id].is_contact = 0;



	ivec2 pos_integer = ivec2(round(pos*255.));
	ivec2 pos_decimal = ivec2(pos-trunc(pos)*1024.);
	atomicAdd(b_rigidbody[r_id].cm_integral.x, pos_integer.x);
	atomicAdd(b_rigidbody[r_id].cm_integral.y, pos_integer.y);
	atomicAdd(b_rigidbody[r_id].cm_decimal.x, pos_decimal.x);
	atomicAdd(b_rigidbody[r_id].cm_decimal.y, pos_decimal.y);


}

