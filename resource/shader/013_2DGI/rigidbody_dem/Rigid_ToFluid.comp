#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"



layout (local_size_x = RB_PARTICLE_BLOCK_SIZE) in;
shared Rigidbody s_rb;

void main() 
{
	uint p_id = gl_WorkGroupID.x*RB_PARTICLE_BLOCK_SIZE + gl_LocalInvocationID.x;
	if(b_rbParticle[p_id].contact_index == -1){ return; }

	uint r_id = b_rbParticle_map[gl_WorkGroupID.x];
	if(gl_LocalInvocationID.x == 0)
	{
		s_rb = b_rigidbody[r_id];
	}

	barrier();
	memoryBarrierShared();

	vec2 rela_pos = b_rbParticle[p_id].relative_pos;
	vec2 local_pos = rotateRBParticle(rela_pos, s_rb.angle);
	vec2 pos = s_rb.pos + local_pos;
		
	ivec2 index = ivec2(pos);
	if(any(lessThan(index, ivec2(0))) || any(greaterThanEqual(index, u_gi2d_info.m_resolution.xy))){ return; }

	rbFluid f;
	f.r_id = r_id;
	f.p_id = p_id;
	f.pos = pos;
	f.sdf = vec2(0.);

	uint i = index.x+index.y*u_gi2d_info.m_resolution.x;
	uint ii = atomicAdd(b_fluid_count[i], 1);
	b_fluid[i*FLUID_NUM + ii] = f;
}
