#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#define USE_MakeRigidbody 2
#include "GI2D.glsl"
#include "Rigidbody2D.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout(push_constant) uniform Input
{
	int distance;
	int p;
	uvec2 _p;
} constant;


void nearest(inout i16vec2 new_cell, inout float current_d, in i16vec2 offset, in ivec2 reso)
{
	i16vec2 target = i16vec2(gl_GlobalInvocationID) + offset;
	if(all(greaterThanEqual(target, i16vec2(0))) && all(lessThan(target, reso)))
	{
		i16vec2 cell = b_make_jfa_cell[target.x + target.y*reso.x];
		if(cell.x == 0xfffe){ return; }
		if(cell.x != 0xffff){ target = cell; }
	}

	{
		float d = distance(vec2(target), vec2(gl_GlobalInvocationID));
		if(d < current_d)
		{
			current_d = d;
			new_cell = target;
		}
	}
}
void main() 
{
	const ivec2 reso = b_make_param.rb_aabb.zw-b_make_param.rb_aabb.xy;
	if(any(greaterThanEqual(gl_GlobalInvocationID.xy, reso))){ return; }
	i16vec2 cell = b_make_jfa_cell[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*reso.x];
	if(cell.x == 0xffff){ return; } // particleじゃないのでしない

	float d = (cell.x >= -32000) ? distance(vec2(gl_GlobalInvocationID), vec2(cell)) : 99999999.;
	const float old_d = d;
	// 重力のY方向優先
	const i16vec3 cd = i16vec3(constant.distance) * i16vec3(-1, 0, 1);
	nearest(cell, d, cd.xy, reso);
	nearest(cell, d, cd.xx, reso);
	nearest(cell, d, cd.xz, reso);
	nearest(cell, d, cd.zx, reso);
	nearest(cell, d, cd.zy, reso);
	nearest(cell, d, cd.zz, reso);
	nearest(cell, d, cd.yx, reso);
	//nearest(new_cell, d, cd.yy, reso);
	nearest(cell, d, cd.yz, reso);

	if(d != old_d)
	{
		b_make_jfa_cell[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*reso.x] = cell;
	}
}
