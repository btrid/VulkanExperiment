#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Rigidbody2D 0
#define USE_GI2D 1
#define USE_GI2D_SDF 2
#include "GI2D.glsl"
#include "GI2DSDF.glsl"
#include "Rigidbody2D.glsl"

layout (local_size_x=8, local_size_y=8) in;

void main() 
{
	uint64_t fragment_map = b_diffuse_map[getMemoryOrder(gl_WorkGroupID.xy)];
	uint64_t bit = 1ul<<(gl_LocalInvocationID.x+gl_LocalInvocationID.y*8);
	if((fragment_map & bit) == 0)
	{
		return;
	}
		
	uint i = gl_GlobalInvocationID.x+gl_GlobalInvocationID.y*u_gi2d_info.m_resolution.x;

	rbFluid f;
	f.r_id = -1;
	f.mass = 0.;
	f.pos = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
//	f.sdf = normalize(vec2(b_jfa[i].nearest[0] - gl_GlobalInvocationID.xy));
//	f.sdf = normalize(vec2(b_jfa[i].nearest[1] - gl_GlobalInvocationID.xy));
	f.sdf = b_sdf[i];
//	D2JFACell cell = b_jfa[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_gi2d_info.m_resolution.x];
//	ivec2 v = ivec2(cell.nearest - gl_GlobalInvocationID.xy);
//	f.sdf = all(notEqual(v, ivec2(0))) ? normalize(vec2(v)) : vec2(0., -1);

	f.vel = vec2(0.);

	uint ii = atomicAdd(b_fluid_count[i], 1);
	b_fluid[i*FLUID_NUM + ii] = f;
}

