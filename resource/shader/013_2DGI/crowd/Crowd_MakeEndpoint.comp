#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_Crowd2D 0
#include "Crowd.glsl"

#define USE_GI2D 1
#include "GI2D.glsl"

#define TWO_PI (6.28318530)
layout (local_size_x=256) in;
void main()
{
	vec2 begin = b_crowd[0].target;
	ivec4 reso = u_gi2d_info.m_resolution;

	vec2 dir = MakeRayDir((TWO_PI / gl_WorkGroupSize.x) * (gl_GlobalInvocationID.x+0.5));
	vec2 inv_dir = abs(1./dir);
	dir *= min(inv_dir.x, inv_dir.y);

	vec2 pos = begin;
	ivec2 map_index = ivec2(pos);
	if(gl_GlobalInvocationID.x == 0)
	{
		// 初期位置に印
		atomicMin(b_node[getMemoryOrder(map_index.xy)].value, 0);
	}

	uint64_t map;
	uint old_map_index = -1;
	vec2 cell_origin = vec2(greaterThanEqual(dir, vec2(0.))) * vec2(8.);

	for(uint march_count = 0; march_count < 10000; )
	{
		int skip = 1;
		{
			ivec2 cell = map_index>>3;
			ivec2 cell_sub = map_index%8;
			uint dindex = cell.x + cell.y*reso.z;
			if(old_map_index != dindex)
			{
				map.x = b_diffuse_map[dindex];
				old_map_index = dindex;

				if(map == 0ul)
				{
					vec2 pos_sub = vec2(pos - vec2(cell << 3));
					vec2 tp = vec2(abs(cell_origin - pos_sub)) / abs(dir);
					int _axis = tp.x < tp.y ? 0 : 1;
//					skip = int(max(tp[_axis], 1.));
				}
			}

			bool attr = (map & (1ul<<(cell_sub.x+cell_sub.y*8))) != 0ul;
			if(attr.x)
			{
				// 当たったところに印
				atomicMin(b_node[getMemoryOrder(map_index.xy)].value, march_count);
				break;
			}
			atomicMin(b_node[getMemoryOrder(map_index.xy)].value, march_count);
		}
		{
			march_count += skip;
			pos = begin + dir*march_count;
			map_index = ivec2(pos);

			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}
	}
}
