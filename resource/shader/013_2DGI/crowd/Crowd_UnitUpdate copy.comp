#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Crowd2D 0
#include "GI2D/Crowd.glsl"
#define USE_GI2D 1
#include "GI2D/GI2D.glsl"
#define USE_GI2D_Path 2
#include "GI2D/GI2DPath.glsl"


layout (local_size_x = 64) in;

vec3 normalize_safe(in vec3 v, in vec3 a){ return dot(v, v) >= 0.001 ? normalize(v) : a;}
vec2 normalize_safe(in vec2 v, in vec2 a){ return dot(v, v) >= 0.001 ? normalize(v) : a;}

float acos_safe(in float a){ return acos(clamp(a, -1., 1.)); }
float atan2(in float y, in float x){ return x==0.0 ? sign(y)*(3.1415/2.) : atan(y, x); }
float remap(float original_value, float original_min, float original_max, float new_min, float new_max){ return (original_value - original_min) / (original_max - original_min) * (new_max - new_min) + new_min; }

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_crowd_info.unit_data_max)
	{
		return;
	}

	const ivec4 reso = u_gi2d_info.m_resolution;
	float deltatime = u_crowd_scene.m_deltatime;

	vec4 pos = b_unit_pos[index];
	vec2 inertia = b_unit_move[index];
	UnitInfo unit_info = u_unit_info[0];

	ivec2 ipos = ivec2(pos.xy);
	PathData path = b_path_data[ipos.x+ipos.y*reso.x];

	inertia = max(inertia * pow(0.999, 1.+deltatime), unit_info.linear_speed*0.2);
	vec2 dir = rotate(pos.z);
	{
		// 目的地に向かう
		uint path_dir = PathData_dirtype(path);
		vec2 target_dir = normalize(vec2(g_neighbor[path_dir%8]));
		float d = dot(dir, target_dir);
		if(d <= 0.98)
		{
			float rotate_angle = acos(d);
			rotate_angle = min(rotate_angle, unit_info.angler_speed);

			float c = cross(vec3(dir, 0.), vec3(target_dir, 0.)).z;
			pos.z += sign(c) * rotate_angle*deltatime;

		}
		else
		{
			inertia += dir * pow(1.01, 1.+deltatime);
			inertia = min(inertia, unit_info.linear_speed);
		}

//		pos.w = move;
	}
//	dir = rotate(remap(pos.z, 0., 6.283, -3.1415, 3.1415));

	
	float move = length(inertia*deltatime);
	dir = normalize_safe(inertia, vec2(0.));
	float advance = 0.;
	{

		// march
		while(advance<move)
		{
//			ivec2 ipos = 
			ipos = ivec2(pos.xy);
			vec2 pos_next = pos.xy + dir * clamp(move-advance, 0., 1.);
			advance += 1.;
			ivec2 ipos_next = ivec2(pos_next);

			// hit確認
/*			uint8_t wall = b_neighbor[ipos_next.x+ipos_next.y*reso.x];
			ivec2 diff = ipos_next-ipos;
			bool wall_x = diff.x == 1 ? (wall&(1<<3))!=0 : diff.x==-1?(wall&(1<<7))!=0 : false;
			bool wall_y = diff.y == 1 ? (wall&(1<<1))!=0 : diff.y==-1?(wall&(1<<5))!=0 : false;
			vec2 n = normalize_safe(vec2(wall_x, wall_y) * sign(dir), vec2(0.));
*/

			ivec4 fragment_index = ivec4(ipos_next/8, ipos_next%8);
			int findex = fragment_index.x + fragment_index.y*reso.z;
			uint64_t fragment_map = b_fragment_map[findex].x;

			ivec2 shift = fragment_index.zw;
			uint64_t bit = 1ul<<(shift.x+shift.y*8);
			if((fragment_map & bit) != 0)

//			if(any(notEqual(ipos_next, ipos)) && (wall_x||wall_y))
			{

				// 壁にぶつかったので反射
				vec2 wall = normalize(vec2(pos_next-ivec2(pos.xy)));
				inertia = reflect(inertia, wall);
				dir = reflect(dir, wall);
//				move = length(inertia*deltatime);
//				inertia +=  -wall;

				// 更新はしない?
//				pos.xy = pos_next-dir*0.1;
				
//				break;

			}
			else
			{
				// 何もないのでそのまま進む
				pos.xy = pos_next;
			}
		}
	}
	pos.z = mod(pos.z+3.1415, 6.283);
	b_unit_pos[index] = pos;
	b_unit_move[index] = inertia;
}
