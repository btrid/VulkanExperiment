#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 2
#include "GI2D.glsl"

#define USE_Crowd2D 0
#include "Crowd.glsl"

#define USE_SYSTEM 1
#include "applib/System.glsl"

#define TWO_PI (6.28318530)
#define QUARTER_PI (0.7853981633)

layout(push_constant) uniform Input
{
	int distance;
} constant;

layout (local_size_x=255, local_size_y=1) in;
void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution);

	float a = TWO_PI / gl_WorkGroupSize.x;
	float angle = a * (gl_LocalInvocationID.x+0.5);

	uint y = uint(angle / HALF_PI);

	angle -= QUARTER_PI;
	angle += HALF_PI;
	vec2 dir = rotate(angle);
	vec2 inv_dir = abs(1./dir);
	dir *= min(inv_dir.x, inv_dir.y);

	vec2 pos;
	pos.x = (y==0) ? reso.x-0.1 : 0.1;
	pos.y = (y==1) ? reso.y-0.1 : 0.1;
	vec2 pdir;
	pdir.x = (y%2==1) ? 1 : 0;
	pdir.y = (y%2==0) ? 1 : 0;

	pos += pdir*(gl_WorkGroupID.x);
	vec2 begin = pos;
	ivec2 map_index = ivec2(pos);


	int march_count = 1;
	for(; march_count <5000; march_count++)
	{
		// march
		{
			// DDA
			pos = begin + march_count*dir;
			map_index = ivec2(pos);
		}
		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}
	}

	// 2重になるのを禁止
	switch(y)
	{
		case 2:
//			if(map_index.x==reso.x){ return; }
			if(map_index.y>=reso.y-1||map_index.y<=0){}else{ return; }
			break;
		case 3:
//			if(map_index.y==reso.y){ return; }
			if(map_index.x>=reso.x-1||map_index.x<=0){}else{ return; }
			break;
	}

	D2Ray ray;
	ray.origin = begin;
	ray.angle = angle;
	ray.march = march_count;
	
	int buffer_index = atomicAdd(b_ray_counter.w, 1);
	b_ray[buffer_index] = ray;
	if(buffer_index%1024 == 0){
		atomicAdd(b_ray_counter.x, 1);
	}
}
