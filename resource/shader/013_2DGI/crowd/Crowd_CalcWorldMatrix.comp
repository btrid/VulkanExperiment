#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_Crowd2D 0
#include "Crowd.glsl"

#define USE_SYSTEM 1
#include "applib/System.glsl"

#define USE_AppModel_Update 2
#include "AppModel.glsl"

layout (local_size_x = 1024, local_size_y = 1) in;

mat4 RotateZ(in float angle)
{
	float s = sin(angle);
	float c = cos(angle);
	return mat4(
		vec4(  c, -s,  0., 0.),
        vec4(  s,  c,  0., 0.),
        vec4( 0., 0.,  1., 0.),
        vec4( 0., 0.,  0., 1.));
}
void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_crowd_info.unit_max){
		return;
	}
	uvec2 data_offset = ivec2(1-u_system_data.m_gpu_index, u_system_data.m_gpu_index) * u_crowd_info.unit_max;

	UnitData unit = b_unit[data_offset.y + index];
	unit.m_pos;
	vec2 dir = unit.m_dir;
	dir = dot(dir, dir) == 0. ? vec2(0., 1.) : normalize(dir);
	float angle = atan(dir.y, dir.x);
	
	mat4 mat = mat4(0.05);
	mat *= RotateZ(angle);	
	mat[3].xz = unit.m_pos;

	b_world[index] = mat;
}
