#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_Crowd2D 0
#include "Crowd.glsl"

#define TWO_PI (6.28318530)
#define QUARTER_PI (0.7853981633)


layout(push_constant) uniform Input
{
	ivec2 reso;
	float pos_scale;
	uint rot_num;
} constant;


layout (local_size_x=64, local_size_y=16) in;
void main()
{

	if(gl_GlobalInvocationID.y >= constant.rot_num){ return; }
	ivec2 reso = constant.reso;

	float a = TWO_PI / constant.rot_num;
	float angle = a * (gl_GlobalInvocationID.y+0.5);

	uint y = uint(angle / HALF_PI);

	angle -= QUARTER_PI;
	angle += HALF_PI;
	vec2 dir = MakeRayDir(angle);
	vec2 inv_dir = abs(1./dir);
	dir *= min(inv_dir.x, inv_dir.y);

	vec2 pos;
	pos.x = (y==0) ? (reso.x-0.5) : 0.5;
	pos.y = (y==1) ? (reso.y-0.5) : 0.5;
	vec2 pdir;
	pdir.x = (y%2==1) ? 1 : 0;
	pdir.y = (y%2==0) ? 1 : 0;

	pos += pdir*gl_GlobalInvocationID.x*constant.pos_scale;
	vec2 begin = pos;
	ivec2 map_index = ivec2(pos);


	int march_count = 1;
	for(; march_count <5000; march_count++)
	{
		// march
		{
			// DDA
			pos = begin + march_count*dir;
			map_index = ivec2(pos);
		}
		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}
	}

	if(march_count <= 1) { return; }
	// 2重になるのを禁止
	switch(y)
	{
		case 2:
			if(map_index.x==reso.x){ return; }
			break;
		case 3:
			if(map_index.y==reso.y){ return; }
			break;
	}

	CrowdRay ray;
	ray.origin = begin;
	ray.angle = angle;
	ray.march = march_count;
	
	int buffer_index = atomicAdd(b_ray_counter[gl_WorkGroupID.z].w, 1);
	if(buffer_index >= u_crowd_info.ray_frame_max){ return; }
	uint buffer_offset = u_crowd_info.ray_frame_max*gl_WorkGroupID.z;
	b_ray[buffer_index+buffer_offset] = ray;
	if(buffer_index%1024 == 0){
		atomicAdd(b_ray_counter[gl_WorkGroupID.z].x, 1);
	}
}
