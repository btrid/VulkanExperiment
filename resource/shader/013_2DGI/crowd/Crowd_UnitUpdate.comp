#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Crowd2D 0
#include "GI2D/Crowd.glsl"
#define USE_GI2D 1
#include "GI2D/GI2D.glsl"
#define USE_GI2D_Path 2
#include "GI2D/GI2DPath.glsl"

float remap(float original_value, float original_min, float original_max, float new_min, float new_max){ return (original_value - original_min) / (original_max - original_min) * (new_max - new_min) + new_min; }

layout (local_size_x = 64) in;

float calcAngle2(in vec2 x, in vec2 y)
{
	return acos(clamp(dot(x, y), -1., 1));
}

vec3 normalize_safe(in vec3 v, in vec3 a)
{
	return dot(v, v) >= 0.001 ? normalize(v) : a; 
}

float acos_safe(in float a){ return acos(clamp(a, -1., 1.)); }
float atan2(in float y, in float x){ return x==0.0 ? sign(y)*(3.1415/2.) : atan(y, x); }

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_crowd_info.unit_data_max)
	{
		return;
	}

	const ivec4 reso = u_gi2d_info.m_resolution;
	float deltatime = u_crowd_scene.m_deltatime;
	vec4 pos = b_unit_pos[index];
	UnitInfo unit_info = u_unit_info[0];


	const int size = g_crowd_density_cell_size;


	float move = pos.w;
	vec2 dir = rotate(pos.z);
	{
		// 目的地に向かう
		ivec2 ipos = ivec2(pos.xy);
		uint path_dir = PathData_dirtype(b_path_data[ipos.x+ipos.y*reso.x]);
		vec2 target_dir = normalize(vec2(g_neighbor[path_dir%8]));
		float d = dot(dir, target_dir);
		if(d <= 0.998)
		{
			float rotate_angle = acos(d);
			rotate_angle = min(rotate_angle, unit_info.angler_speed);

			float c = cross(vec3(dir, 0.), vec3(target_dir, 0.)).z;
			pos.z += sign(c) * rotate_angle*deltatime;
			move = clamp(move * pow(0.99, 1.+deltatime), unit_info.linear_speed*0.2, unit_info.linear_speed);
		}
		else
		{
			move = min(move+pow(1.01, 1.+deltatime), unit_info.linear_speed);
		}
		pos.w = move;
	}

	if(false)
	{

		// march
		move*=deltatime;
		for(int _i = 0; move>0. && _i<2000; _i++)
		{
			ivec2 ipos = ivec2(pos.xy);
			vec2 pos_next = pos.xy + dir * clamp(move-1., 0., 1.);
			move -= 1.;

			// hit確認
			ivec2 ipos_next = ivec2(pos_next);
			ivec4 fragment_index = ivec4(ipos_next/8, ipos_next%8);
			int findex = fragment_index.x + fragment_index.y*reso.z;
			uint64_t fragment_map = b_fragment_map[findex].x;

			ivec2 shift = fragment_index.zw;
			uint64_t bit = 1ul<<(shift.x+shift.y*8);
			if((fragment_map & bit) != 0)
			{
				// 壁にぶつかったので反射
//				pos.z = mod(3.14+pos.z, 6.28);
//				dir = rotate(pos.z);

				// 更新はしない?
//				pos.xy = pos_next;
				break;

			}
			else
			{
				// 何もないのでそのまま進む
				pos.xy = pos_next;

			}
		}
	}
	dir = rotate(remap(pos.z, 0., 6.283, -3.1415, 3.1415));
	pos.xy+=dir*move*deltatime;
	pos.z=mod(pos.z, 6.283);
	b_unit_pos[index] = pos;
}
