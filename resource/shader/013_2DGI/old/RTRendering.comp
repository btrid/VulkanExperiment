#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_RT 1
#include "GI2D.glsl"

layout(push_constant) uniform BounceInfo
{
	int start_id;
	int frame;
} constant;

layout (local_size_x = 32, local_size_y = 32) in;

shared uint64_t s_light_map[512];
shared uint64_t s_rt_map[512];
void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);
	const ivec2 rt_reso = reso.zw / 2;
	uint rt_map_size = reso.z*reso.w;

	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	ivec4 fragment_index = ivec4(pixel/8, pixel%8);
	ivec4 offset = ivec4(-1,0,-1,0) + ivec4(greaterThanEqual(gl_LocalInvocationID.xxyy%8, uvec4(4)));
	ivec4 findex = fragment_index.xxxx + offset.xxyy + (fragment_index.yyyy + offset.zwzw)*(reso.zzzz);
	ivec2 shift = (ivec2(4) + ivec2(gl_LocalInvocationID.xy)) % ivec2(8);
	uint64_t bit_mask = 1ul << (8*4+4);

	uint64_t x_line_mask = 0xfful & ((1ul << (shift.x)) - 1ul);
	uint64_t x_mask = ~(x_line_mask | (x_line_mask << 8) | (x_line_mask << 16) | (x_line_mask << 24) | (x_line_mask << 32) | (x_line_mask << 40) | (x_line_mask << 48) | (x_line_mask << 56));
	uint64_t y_mask = ~(0xfffffffffffffffful & ((1ul << ((shift.y) * 8)) - 1));
	u64vec4 map_mask = u64vec4(x_mask & y_mask, x_mask & ~y_mask, ~x_mask & y_mask, ~x_mask & ~y_mask);
	ivec4 right_shift = shift.yyyy*ivec4(8,0,8,0) + shift.xxxx*ivec4(1,1,0,0);
	ivec4 left_shift = (8-shift.yyyy)*ivec4(0,8,0,8) + (8-shift.xxxx)*ivec4(0,0,1,1);

	vec4 illuminance = vec4(0.);

	// 2x2マスずつ
	for(int y = 0; y < reso.w; y++)
	{
		barrier();
		memoryBarrierShared();

		if(gl_LocalInvocationIndex < reso.z)
		{
			s_light_map[gl_LocalInvocationIndex] = b_light_map[gl_LocalInvocationIndex + y*reso.z];
		}

		uvec2 rt_area = uvec2(4+2);
		uint rt_i = rt_area.x + rt_area.y*reso.z;
//		if(all(lessThan(gl_LocalInvocationID.xy, rt_area)))
		if(gl_LocalInvocationIndex < rt_i)
		{
//			ivec2 index_offset_2d = (ivec2(gl_WorkGroupID*gl_WorkGroupSize).xy/8) -1 + ivec2(gl_LocalInvocationID.xy);
//			index_offset_2d = clamp(index_offset_2d, ivec2(0), reso.zw);
//			int index_offset = index_offset_2d.x+ index_offset_2d.y*reso.z;

//			uint rt_offset = rt_map_size*(y*reso.z);
//			int index_offset = index_offset_2d.x+ index_offset_2d.y*reso.z;
//			uint64_t rt = b_rt_map[rt_offset + index_offset];

//			uint i = gl_LocalInvocationID.x + gl_LocalInvocationID.y*rt_area.x;
//			s_rt_map[gl_LocalInvocationIndex] = rt;
		}

		barrier();
		memoryBarrierShared();

		for(int x = 0; x < reso.z; x++)
		{
			u64vec4 light_map;
			light_map.x = s_light_map[x];
//			light_map.y = s_light_map[x+1];
//			light_map.z = s_light_map[x   + reso.z];
//			light_map.w = s_light_map[x+1 + reso.z];

//			light_map.x = b_light_map[x + y*reso.z];
			uvec4 light_power = uvec4(popcnt(light_map.x));
			if(light_power.x == 0){ continue; }

//			ivec2 rt_local_index = ivec2(gl_LocalInvocationID.xy+4)/8;
//			uint64_t x0 = s_rt_map[rt_local_index.x   + rt_local_index.y*rt_area.x];
//			uint64_t x1 = s_rt_map[rt_local_index.x+1 + rt_local_index.y*rt_area.x];
//			uint64_t y0 = s_rt_map[rt_local_index.x   + (rt_local_index.y+1)*rt_area.x];
//			uint64_t y1 = s_rt_map[rt_local_index.x+1 + (rt_local_index.y+1)*rt_area.x];

			uint rt_map_offset = rt_map_size * (x+y*reso.z);
			uint64_t x0 = b_rt_map[rt_map_offset + findex.x];
			uint64_t x1 = b_rt_map[rt_map_offset + findex.y];
			uint64_t y0 = b_rt_map[rt_map_offset + findex.z];
			uint64_t y1 = b_rt_map[rt_map_offset + findex.w];

			u64vec4 rt = u64vec4(x0, x1, y0, y1);
			rt &= map_mask;
			rt >>= right_shift;
			rt <<= left_shift;
			uint64_t rt_power = rt.x|rt.y|rt.z|rt.w;
			vec4 lp = vec4(light_power) * float(popcnt(rt_power));

			vec2 pos = vec2(x, y) * 16. + 8.;
			float dist = distance(pos, pixel);
			illuminance += vec4(lp);// /(64.*2.);
		}
	}

//	ivec4 findex = fragment_index.xxxx + offset.xxyy + (fragment_index.yyyy + offset.zwzw)*(reso.zzzz);
//	uint64_t light_map = b_light_map[findex.x];
//	bool is_light = (light_map & bit_mask) != 0;
//	vec3 illumi = vec3(length(illuminance+0.01));
	vec3 illumi = illuminance.xyz;
//	illumi = is_light ? vec3(1., 0., 0.) : illumi;
//	illumi = all(equal(pixel/16, ivec2(x, y)*8/16)) ? vec3(0., 0., 1.) : illumi;
	imageStore(t_color, pixel, vec4(illumi, 1.));

}
