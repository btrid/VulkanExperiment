#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x=64) in;

shared u64vec2 s_fragment[17];
void main()
{

	const int hierarchy = u_gi2d_scene.m_hierarchy;
	const ivec4 reso = u_gi2d_info.m_resolution;

	uint ray_index = gl_GlobalInvocationID.x;
	D2Ray ray = b_ray[ray_index];
	vec2 dir = calcDir(ray.angle);

//	u64vec2 map;
//	uint old_map_index = -1;
//	vec2 cell_origin = vec2(greaterThanEqual(dir, vec2(0.))) * vec2(8.);

	D2Segment seg;
	seg.ray_index = ray_index;
	seg.begin = 0;
	seg.march = 0;
	seg.radiance = 0;
	int march_count = 0;
	for(; march_count < ray.march; )
	{

		vec2 pos = fma(dir, float(march_count).xx, ray.origin);
		ivec2 index = ivec2(pos);
		ivec2 map_index = index >> 3;
		if(gl_LocalInvocationIndex < 17)
		{
			int mi = map_index.x + map_index.y*reso.z + gl_LocalInvocationIndex;
			s_fragment[gl_LocalInvocationIndex] = b_fragment_map[mi];
		}
		
		memoryBarrierShared();
		barrier();

		for(uint i = 0; i < 8; i++)
		{
			s_fragment[];
			bvec2 attr = notEqual((map & (1ul<<(cell_sub.x+cell_sub.y*8))), u64vec2(0));
			if(attr.y)
			{
				seg.radiance += b_light[getMemoryOrder(uvec2(fma(dir, float(march_count+i).xx, ray.origin)))];
			}
			if(attr.x)
			{
				if(seg.march > 1)
				{
					int index = atomicAdd(b_segment_counter.w, 1);
					if(index%1024==0){
						atomicAdd(b_segment_counter.x, 1);
					}
					b_segment[index] = seg;
				}
				seg.begin = march_count;
				seg.march = 0;
				seg.radiance = 0;
			}
			seg.march++;


		}
		// march
		{
			// DDA
			march_count+=8;
		}
	}

	// 行きすぎたら戻す
	seg.march -= march_count-ray.march;
	if(seg.march > 1)
	{
		int index = atomicAdd(b_segment_counter.w, 1);
		if(index%1024==0){
			atomicAdd(b_segment_counter.x, 1);
		}
		b_segment[index] = seg;
	}


}
