#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

struct Seg
{
	uint begin;
	uint march;
};
layout (local_size_x=1024) in;
void main()
{
	if(b_ray_counter.w >= u_radiosity_info.ray_num_max){ return; }

	const int hierarchy = u_gi2d_scene.m_hierarchy;
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	D2Segment seg = b_segment[gl_GlobalInvocationID.x];
	D2Ray ray = b_ray[seg.ray_index];
	vec2 dir = rotate(ray.angle);
	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 99999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 99999999. : abs(1./dir.y);
	dir *= min(inv_dir.x, inv_dir.y);
	vec2 pos = ray.origin + dir*seg.begin;
	ivec2 map_index = ivec2(pos);

	u64vec2 dl;
	uint old_diffuse_index = -1;
	uint radiance = 0;
	D2Segment light_seg;
	light_seg.ray_index = seg.ray_index;
	light_seg.begin = -1;
	light_seg.march = 0;
	light_seg.radiance = 0;
	D2Segment seglist[512];
	uint segcount = 0;

	for(int march_count = 0; march_count < seg.march; march_count++)
	{
		{
			ivec2 cell = map_index>>3;
			uint dindex = cell.x + cell.y*reso.z;
			if(old_diffuse_index != dindex)
			{
				dl.y = b_emissive_map[dindex];
				old_diffuse_index = dindex;
			}
			ivec2 cell_sub = map_index - cell*8;
			bvec2 attr = notEqual((dl & (1ul<<(cell_sub.x+cell_sub.y*8))), u64vec2(0));
			if(attr.y)
			{
				if(seg.march >= 0 && light_seg.radiance != 0)
				{
					seglist[segcount++] = light_seg;
				}
				light_seg.radiance += b_light[getMemoryOrder(map_index)];
				light_seg.begin = seg.begin+march_count+1;
				light_seg.march = -1;
			}
			else
			{
				seg.march++;
			}

		}
		// march
		{
			// DDA
			pos += dir;
			map_index = ivec2(pos);
		}
	}

	for(uint i = segcount-1; i > 0; i--)
	{
		seglist[i-1].radiance += seglist[i].radiance - seglist[i-1].radiance;
	}
}
