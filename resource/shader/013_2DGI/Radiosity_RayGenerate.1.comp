#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"


layout (local_size_x = 256, local_size_y = 4) in;
void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);
	int hierarchy = 0;

	float a = 6.28318530717958647692528676655900576 / gl_NumWorkGroups.x;
	float angle = a * gl_WorkGroupID.x;

	vec2 dir = rotate(angle);
	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 999999. : abs(1./dir.y);

	vec2 pos;
	pos.x = gl_LocalInvocationID.y==3 ? reso.x-1 : 0;
	pos.y = gl_LocalInvocationID.y==1 ? reso.y-1 : 0;
//	pos += 0.5;
	vec2 pdir;
	pdir.x = gl_LocalInvocationID.y%2==0 ? 1 : 0;
	pdir.y = gl_LocalInvocationID.y%2==1 ? 1 : 0;

	pos += pdir * gl_LocalInvocationID.x * 8;
	vec2 begin = pos;


	// raymarch用事前計算
	ivec2 map_index = ivec2(pos);
	ivec2 cell_origin = (ivec2(greaterThanEqual(dir, vec2(0.)))<<hierarchy);
	ivec2 map_index_sub = map_index - ((map_index>>hierarchy)<<hierarchy);
	vec2 tp = abs(cell_origin - (map_index_sub+fract(pos)));
	tp = tp + (0.5*(1<<hierarchy));
	tp *= inv_dir;
	vec3 delta = vec3(abs((1<<hierarchy)*inv_dir), 0.);
	ivec3 next = ivec3(ivec2(greaterThanEqual(dir, vec2(0.))) * 2 - 1, 0);

	int march_count = 0;
	for(; march_count <5000; march_count++)
	{
		// march
		{
#if 1
			// ちゃんとしたレイマーチ
			bool axis = tp.x < tp.y;
			tp += axis ? delta.xz : delta.zy;
			map_index += (axis ? next.xz : next.zy) * (1<<hierarchy);
#else
			// DDA
			pos += dir * min(inv_dir.x, inv_dir.y) * (1<<hierarchy);
			map_index = ivec2(pos);

#endif
		}
		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}
	}

	if(march_count < 5) { return; }
	D2Ray ray;
	ray.origin = begin;
	ray.angle = angle;
	ray.march = march_count;

	int index = atomicAdd(b_ray_counter.w, 1);
	if((index % 512) == 0)
	{
		atomicAdd(b_ray_counter.x, 1);
	}
	b_ray[index] = ray;
}
