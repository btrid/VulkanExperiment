#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#include "GI2D.glsl"
#define USE_GI2D_SDF 1
#include "GI2DSDF.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout(push_constant) uniform Input
{
	uint distance;
	uint offset;
} constant;


void nearest(inout i16vec2 cell, inout float current_d, in uvec2 reso, in ivec2 current, in ivec2 target)
{
	if(any(lessThan(target, ivec2(0))) || any(greaterThanEqual(target, reso.xy))){ return; }

	i16vec2 target_cell = b_jfa[target.x + target.y*reso.x/* + constant.offset*/].nearest;
	if((target_cell.y & 0x8000) != (cell.y & 0x8000))
	{
	}
	else if((target_cell.x & 0x8000) == 0)
	{
		target = target_cell & i16vec2(0x7fff);
	}
	else
	{
		return;
	}

	{
		float d = distance(vec2(target), vec2(current));
		if(d < current_d)
		{
			current_d = d;
			cell = i16vec2(target) | i16vec2(0, cell.y & 0x8000);
		}
	}

}
void main() 
{
	const uvec2 reso = uvec2(u_gi2d_info.m_resolution.xy);
	const ivec2 current = ivec2(gl_GlobalInvocationID.xy);
	const ivec3 cd = ivec3(constant.distance) * ivec3(-1, 0, 1);
	i16vec2 cell = b_jfa[current.x + current.y*reso.x/* + constant.offset*/].nearest;

//	if(all(equal(current, (cell.nearest & i16vec2(0x7fff))))){ return; }

	float d = ((cell.x & 0x8000) == 0) ? distance(vec2(current), vec2(cell & i16vec2(0x7fff))) : 99999999.;
	const float old_d = d;

	nearest(cell, d, reso, current, current + cd.xx);
	nearest(cell, d, reso, current, current + cd.xy);
	nearest(cell, d, reso, current, current + cd.xz);
	nearest(cell, d, reso, current, current + cd.yx);
	//nearest(cell, d, reso, current, current + cd.yy);
	nearest(cell, d, reso, current, current + cd.yz);
	nearest(cell, d, reso, current, current + cd.zx);
	nearest(cell, d, reso, current, current + cd.zy);
	nearest(cell, d, reso, current, current + cd.zz);

	if(d != old_d)
	{
		b_jfa[current.x + current.y*reso.x/* + constant.offset*/].nearest = cell;
	}
}
