#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity2 1
#include "GI2D/GI2D.glsl"
#include "GI2D/Radiosity2.glsl"

layout(push_constant) uniform Input
{
	int bounce;
} constant;

layout (local_size_x = 1024, local_size_y = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= b_segment_counter.instanceCount){ return; }

	u16vec4 pos = b_segment[gl_GlobalInvocationID.x].pos;
	if(any(equal(pos, u16vec4(0))) || any(equal(pos, u16vec4(u_gi2d_info.m_resolution.xyxy-1))))
	{
		// 端では反射しない 
		return; 
	}

	uint radiance_offset = u_gi2d_info.m_resolution.x*u_gi2d_info.m_resolution.y;

	uvec2 index = pos.xz + pos.yw * u_gi2d_info.m_resolution.xx;

	uint radiance1 = b_radiance[index.x + constant.bounce * radiance_offset];
	uint radiance2 = b_radiance[index.y + constant.bounce * radiance_offset];

	if(radiance1 != 0u)
	{
		vec3 rad_d3 = vec3(radiance1&ColorMask, (radiance1>>10)&ColorMask, (radiance1>>20)&ColorMask);
		vec3 rad = vec3(rad_d3 / vec3(128.));
		rad = rad * vec3(getRGB(b_fragment[index.x])) * vec3(0.14);

		uvec3 emissive_u3 = uvec3(round(rad * vec3(128.)));
		uint packed = emissive_u3.x + (emissive_u3.y<<10) + (emissive_u3.z<<20);
		if(packed != 0)
			atomicAdd(b_radiance[index.y + (1-constant.bounce) * radiance_offset], packed);
	}

	if(radiance2 != 0u)
	{
		vec3 rad_d3 = vec3(radiance2&ColorMask, (radiance2>>10)&ColorMask, (radiance2>>20)&ColorMask);
		vec3 rad = vec3(rad_d3 / vec3(128.));
		rad = rad * vec3(getRGB(b_fragment[index.y])) * vec3(0.14);

		uvec3 emissive_u3 = uvec3(round(rad * vec3(128.)));
		uint packed = emissive_u3.x + (emissive_u3.y<<10) + (emissive_u3.z<<20);
		if(packed != 0)
			atomicAdd(b_radiance[index.x + (1-constant.bounce) * radiance_offset], packed);
	}

}
