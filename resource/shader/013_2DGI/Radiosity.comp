// セルをスキップしないレイトレ
#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x = 512, local_size_y = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= b_ray_counter.w){ return; }

	const int hierarchy = u_gi2d_scene.m_hierarchy;
	const uint skip = u_gi2d_scene.m_skip;
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);
	D2Ray ray = b_ray[gl_GlobalInvocationID.x];
	vec2 pos = ray.origin;
	vec2 dir = rotate(ray.angle);
	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 99999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 99999999. : abs(1./dir.y);
	dir *= min(inv_dir.x, inv_dir.y);
	dir *= (1<<hierarchy)*(1<<skip);

	uint radiance_offset = u_gi2d_scene.m_radiance_offset*u_gi2d_scene.m_frame;
	uint radiance = b_light[getMemoryOrder(map_index)];
	for(int _i = 0; _i < ray.march>>skip; _i++)
	{
		// march
		{
			// DDA
			pos += dir;
			map_index = ivec2(pos);

		}

		{
			atomicAdd(b_radiance[getMemoryOrder(map_index>>hierarchy)+radiance_offset], radiance);
		}
	}
}
