// セルをスキップしないレイトレ
#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x = 256*Ray_Density, local_size_y = 1) in;
void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);
	int hierarchy = u_gi2d_scene.m_hierarchy;

	float a = 6.28318530717958647692528676655900576 / gl_NumWorkGroups.y;
	float angle = a * gl_GlobalInvocationID.y;
	angle += a * 0.25*u_gi2d_scene.m_frame;

	vec2 dir = rotate(angle);
	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 999999. : abs(1./dir.y);

	vec2 floorp = vec2(lessThan(dir, vec2(0.))) * reso.xy;
	vec2 floordir = abs(dir.x) > abs(dir.y) ? vec2(0., 1.) : vec2(1., 0.);

	vec2 p0 = intersectRayRay(vec2(0, 0), dir, floorp, floordir);
	vec2 p1 = intersectRayRay(vec2(reso.x, 0), dir, floorp, floordir);
	vec2 p2 = intersectRayRay(vec2(0, reso.y), dir, floorp, floordir);
	vec2 p3 = intersectRayRay(vec2(reso.x, reso.y), dir, floorp, floordir);

	vec2 minp = min(min(min(p0, p1), p2), p3);
	vec2 maxp = max(max(max(p0, p1), p2), p3);

	ivec4 offset_x;
	ivec4 offset_y;
	{
		vec2 side = normalize(rotateZ(dir, 3.14*0.5));
		{
			vec2 inv_side;
			inv_side.x = side.x == 0. ? 99999. : abs(1./side.x);
			inv_side.y = side.y == 0. ? 99999. : abs(1./side.y);
			side *= min(inv_side.x, inv_side.y);
		}
		vec4 _offset = vec4(0., 2., 4., 6.) / Ray_Density;
		offset_x = ivec4(side.xxxx * _offset);
		offset_y = ivec4(side.yyyy * _offset);
	}

//	float ray_space_rate = min(inv_dir.x, inv_dir.y);
	float ray_space_rate = 1.;
	vec2 pos = minp + floordir * ray_space_rate * (8./Ray_Density) * gl_LocalInvocationIndex;
	pos += floordir * ray_space_rate * (8./Ray_Density) * (u_gi2d_scene.m_frame %2);
	if(!marchToAABB(pos, dir, vec2(0.), reso.xy)){return;}


	uint light_offset = 0;
	uint radiance_offset = reso.x*reso.y;
	for(int i = 0; i < hierarchy; i++)
	{
		light_offset += (reso.x>>i)*(reso.y>>i);
		radiance_offset >>= 2;
	}
	radiance_offset *= u_gi2d_scene.m_frame;

	ivec2 map_index = ivec2(pos);
	ivec2 cell_origin = (ivec2(greaterThanEqual(dir, vec2(0.)))<<hierarchy);
	ivec2 map_index_sub = map_index - ((map_index>>hierarchy)<<hierarchy);
	vec2 tp = abs(cell_origin - (map_index_sub+fract(pos)));
	tp = tp + (0.5*(1<<hierarchy));
	tp *= inv_dir;
	vec2 delta = abs((1<<hierarchy)*inv_dir);

	uvec4 u_radiance = uvec4(0);
	for(int _i = 0; _i <5000; _i++)
	{
		// march
		{
			int axis = int(tp.x > tp.y);
			tp[axis] += delta[axis];
			int dir = (ivec2(greaterThanEqual(dir, vec2(0.)))[axis] * 2 - 1);
			map_index[axis] += dir * (1<<hierarchy);
		}
		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0.)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}

		// hit確認
		{
			uvec4 cell_x = (map_index.xxxx+offset_x);
			uvec4 cell_y = (map_index.yyyy+offset_y);
			cell_x >>= hierarchy;
			cell_y >>= hierarchy;

			// hierarchyが2なら2つでいいかな
			uvec4 cell = getMemoryOrder4(cell_x,cell_y);
			uvec4 light_cell = uvec4(light_offset)+cell;
			u_radiance[0] += b_light[light_cell.x];
			u_radiance[1] += b_light[light_cell.y];
			u_radiance[2] += b_light[light_cell.z];
			u_radiance[3] += b_light[light_cell.w];
			uvec4 radiance_cell = uvec4(radiance_offset)+cell;
			u_radiance.x != 0 ? atomicAdd(b_radiance[radiance_cell.x], u_radiance[0]) : 0;
			u_radiance.y != 0 ? atomicAdd(b_radiance[radiance_cell.y], u_radiance[1]) : 0;
			u_radiance.z != 0 ? atomicAdd(b_radiance[radiance_cell.z], u_radiance[2]) : 0;
			u_radiance.w != 0 ? atomicAdd(b_radiance[radiance_cell.w], u_radiance[3]) : 0;
		}
	}
}
