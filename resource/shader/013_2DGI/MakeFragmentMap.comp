#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_PM 0
#include "PM.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

shared uint s_bit[16][2];
shared int s_fragment_num[32*32];
void main()
{
	uint tiled_1D_index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_pm_info.m_resolution.x; 
	vec3 albedo = b_fragment[tiled_1D_index].albedo;
	bool is_fragment = dot(albedo, albedo) >= 0.01;

	// fragment hierarchy
	{
		// 最初の初期化だけここで行う
		{
			uvec2 idx2d = gl_GlobalInvocationID.xy;
			uint store = idx2d.x+idx2d.y*(u_pm_info.m_resolution.x);
			b_fragment_hierarchy[store] = is_fragment ? 1 : 0;
		}
	}

	// fragment map
	{
		uvec2 local = gl_LocalInvocationID.xy / 8;
		uint index = local.x+local.y*4;
		uvec2 localsub = gl_LocalInvocationID.xy % 8;
		if(all(equal(localsub, uvec2(0))))
		{
			s_bit[index][0] = 0;
			s_bit[index][1] = 0;
		}
		barrier();
		memoryBarrierShared();

		if(is_fragment)
		{
			uint bit_offset = localsub.x + localsub.y*8;
			uint hilow = bit_offset/32;
			uint offset = bit_offset%32;
			atomicOr(s_bit[index][hilow], 1<<offset);
		}
		barrier();
		memoryBarrierShared();

		if(all(equal(localsub, uvec2(0))))
		{
			uint64_t bit =  uint64_t(s_bit[index][1]) << 32 | s_bit[index][0];
			uvec2 global = gl_GlobalInvocationID.xy/8; 
			uint store = global.x + global.y*u_pm_info.m_resolution.x/8;
			b_fragment_map[store] = bit;
		}

	}
}

