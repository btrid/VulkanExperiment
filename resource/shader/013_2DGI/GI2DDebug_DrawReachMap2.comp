#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Path 1
#define USE_RenderTarget 2
#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DPath.glsl"
#include "applib/System.glsl"
layout (local_size_x = 32, local_size_y = 32) in;

void main() 
{

	vec3 colors[] ={
		vec3(0., 0., 1.),
		vec3(0., 1., 1.),
		vec3(0., 1., 0.),
		vec3(1., 1., 0.),
		vec3(1., 0., 0.),
		vec3(1., 0., 1.),
	};
	uvec2 index = gl_GlobalInvocationID.xy/8;
	uvec2 bit = gl_GlobalInvocationID.xy%8;
	uint64_t fragment_map = b_fragment_map[index.x + index.y*u_gi2d_info.m_resolution.z];
	vec3 color = vec3(0.);
	if((fragment_map & (1ul<<(bit.x+bit.y*8))) == 0)
	{ 
		uint i = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*u_gi2d_info.m_resolution.x;
		uint cost = b_cost[i];
		uint color_index1 = (cost / 1000) % colors.length();
		uint color_index2 = (color_index1+1) % colors.length();
		float color_rate = (cost % 1000) / 1000.;
		color = mix(colors[color_index1], colors[color_index2], color_rate);
	}
	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));
}

//b_diffuse_map[store]

