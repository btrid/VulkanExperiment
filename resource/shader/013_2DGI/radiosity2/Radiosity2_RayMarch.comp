#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity2 1
#include "GI2D.glsl"
#include "Radiosity2.glsl"

#define HALF_PI radians(90.)
#define TWO_PI radians(360.)
#define PI radians(180.)
#define QUARTER_PI radians(45.)

#define dir_reso_bit (7)
#define dir_reso (128)

layout(push_constant) uniform Input
{
	float offset;
} constant;


layout (local_size_x=128) in;

bool intersection(in ivec4 aabb, in ivec2 pos, in ivec2 dir, out int n, out int f)
{
	aabb *= dir_reso;

	ivec4 t = (aabb - pos.xyxy)/dir.xyxy;
	t += ivec4(notEqual((aabb - pos.xyxy) % dir.xyxy, ivec4(0)));
	ivec2 tmin = min(t.xy, t.zw);
 	ivec2 tmax = max(t.xy, t.zw);
 
	n = max(tmin.x, tmin.y);
	f = min(tmax.x, tmax.y);

 	return min(tmax.x, tmax.y) > max(max(tmin.x, tmin.y), 0);
}

struct Ray
{
	ivec2 origin;
	ivec2 dir;
	int begin, end;
	int area;
};

void calcDirEx(in float angle, out ivec2 dir)
{
	#define GI2D_FLT_EPSILON 0.00001
	vec2 f_dir = vec2(cos(angle), sin(angle));
	f_dir.x = abs(f_dir.x)<GI2D_FLT_EPSILON ? (f_dir.x >= 0. ? GI2D_FLT_EPSILON : -GI2D_FLT_EPSILON) : f_dir.x;
	f_dir.y = abs(f_dir.y)<GI2D_FLT_EPSILON ? (f_dir.y >= 0. ? GI2D_FLT_EPSILON : -GI2D_FLT_EPSILON) : f_dir.y;
	vec2 f_inv_dir = 1./f_dir;
	f_dir = f_dir * min(abs(f_inv_dir.x), abs(f_inv_dir.y));

	dir = abs(ivec2(round(f_dir * dir_reso)));

}
Ray makeRay(in uint x, in uint y)
{
	const ivec4 reso = u_gi2d_info.m_resolution;
	Ray ray;

	float a = PI / Dir_Num;
	float angle = fma(a, float(y), a/u_radiosity_info.frame_max * (u_radiosity_info.frame+0.5));
	ray.area = int(angle / HALF_PI);

	calcDirEx(angle, ray.dir);

	ray.origin.x = 0;
	ray.origin.y = 0;
	if (ray.dir.x>= ray.dir.y)
	{
		ray.origin.y += (reso.y-1) - int(ceil(ray.dir.y / float(ray.dir.x))) * int(x);
	}
	else
	{
		ray.origin.x += (reso.x-1) - int(ceil(ray.dir.x / float(ray.dir.y))) * int(x);
	}

	ray.origin *= dir_reso;

	ivec4 aabb = ivec4(ivec2(0, 0), reso.xy);
	if(!intersection(aabb, ray.origin, ray.dir, ray.begin, ray.end))
	{
		ray.area = -1;
	}
	return ray;
}

void main()
{
	const ivec4 reso = u_gi2d_info.m_resolution;
	uint angle_index = gl_WorkGroupID.y;

	Ray ray = makeRay(gl_GlobalInvocationID.x, gl_WorkGroupID.y);

	if(ray.area<=-1){ return; }

	ivec2 mi = (ray.begin * ray.dir.xy + ray.origin) >> dir_reso_bit;
	if((ray.area&1)!=0) mi.x = (reso.x-1)-mi.x;

	uvec2 pos = mi;
	bool is_inner;
	{
		ivec2 cell = mi>>3;
		ivec2 cell_sub = mi%8;
//		uint64_t map = b_edge[cell.x + cell.y * reso.z];
//		uint64_t map = b_diffuse_map[getMemoryOrder(cell)];
		uint64_t map = b_fragment_map[cell.x + cell.y * reso.z];
		is_inner = (map & (1ul<<(cell_sub.x+cell_sub.y*8))) != 0ul;
	}

	for(int march = ray.begin; march < ray.end; )
	{
		ivec2 cell = mi>>3;
//		uint64_t map = b_edge[cell.x + cell.y * reso.z];
//		uint64_t map = b_diffuse_map[getMemoryOrder(cell)];
		uint64_t map = b_fragment_map[cell.x + cell.y * reso.z];

		for(;;)
		{
			ivec2 cell_sub = mi%8;
			bool attr = (map & (1ul<<(cell_sub.x+cell_sub.y*8))) != 0ul;
			if(attr)
			{
				if(!is_inner)
				{
					uint index = atomicAdd(b_segment_counter.instanceCount, 1);
					if(index%1024==0){
						atomicAdd(b_segment_counter.bounce_cmd.x, 1);
					}
					b_segment[index].pos = u16vec4(pos, mi);					
				}
				pos = mi;
			}
			is_inner = attr;
			march++;

			mi = (march * ray.dir.xy + ray.origin) >> dir_reso_bit;
			if((ray.area&1)!=0) mi.x = (reso.x-1)-mi.x;
			if(any(notEqual(cell, mi>>3)))
			{
				break;
			}
		}

	}

	if(!is_inner)
	{
		mi = ((ray.end-1).xx * ray.dir.xy + ray.origin.xy) >> dir_reso_bit;
		if((ray.area&1)!=0) mi.x = (reso.x-1)-mi.x;

		uint index = atomicAdd(b_segment_counter.instanceCount, 1);
		if(index%1024==0){
			atomicAdd(b_segment_counter.bounce_cmd.x, 1);
		}
		b_segment[index].pos = u16vec4(pos, mi);					
	}
}
