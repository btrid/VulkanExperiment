#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity2 1
#define USE_RenderTarget 2
#include "GI2D.glsl"
#include "Radiosity2.glsl"
#include "applib/System.glsl"

layout (local_size_x=8, local_size_y=8) in;

f16vec4 s_color[10][10];
void main()
{
	if(gl_LocalInvocationIndex < 50)
	{
		uvec2 access = uvec2(gl_LocalInvocationIndex % 10, gl_LocalInvocationIndex / 10);
		uvec2 index = gl_WorkGroupID.xy * gl_WorkGroupSize.xy + access;

		f16vec4 color = f16vec4(0.);
		for(int i = 0; i < u_radiosity_info.frame_max; i++)
		{
			color += f16vec4(texelFetch(s_radiosity[i], ivec2(index), 0));
		}
		s_color[access.y][access.x] = color;

		access += uvec2(0, 5);
		index = gl_WorkGroupID.xy * gl_WorkGroupSize.xy + access;

		color = f16vec4(0.);
		for(int i = 0; i < u_radiosity_info.frame_max; i++)
		{
			color += f16vec4(texelFetch(s_radiosity[i], ivec2(index), 0));
		}
		s_color[access.y][access.x] = color;
	}

	memoryBarrierShared();
	barrier();

	f16vec4 color = f16vec4(0.);
	for(uint y = -1; y <= 1; y++)
	{
		for(uint x = -1; y <= 1; x++)
		{
			uvec2 index = uvec2(x, y) + gl_LocalInvocationID.xy + uvec2(1);
			color += s_color[index.y][index.x];
		}
	}

	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color.xyz, 1.));

}


