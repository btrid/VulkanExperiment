// セルをスキップしないレイトレ
#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define RAY_TYPE_FLOAT
#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x = 1024, local_size_y = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= b_photon_counter.w){ return; }

	const int hierarchy = u_gi2d_scene.m_hierarchy;
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	D2Photon photon = b_photon[gl_GlobalInvocationID.x];
	D2Ray ray = b_ray[photon.ray_index];
	vec2 dir = rotate(ray.angle);
	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 99999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 99999999. : abs(1./dir.y);
	dir *= min(inv_dir.x, inv_dir.y) * (1<<hierarchy);

	vec2 pos = ray.origin + photon.begin*dir;
	ivec2 map_index = ivec2(pos);

	uint skip = u_gi2d_scene.m_skip;
	uint radiance_offset = u_gi2d_scene.m_radiance_offset*u_gi2d_scene.m_frame;

	for(int march_count = 1; march_count < photon.march; march_count++)
	{
		// lighting
		{
			uint radiance_cell = getMemoryOrder(map_index);
			atomicAdd(b_radiance[radiance_offset + radiance_cell], photon.radiance);
		}
		// march
		{
			// DDA
			pos = ray.origin + (photon.begin+march_count)*dir;
			map_index = ivec2(pos);
		}
	}
}
