#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_Fluid2D 0
#define USE_GI2D 1
#include "GI2D.glsl"
#include "Fluid2D.glsl"

#define USE_SYSTEM 2
#include "applib/system.glsl"

layout (local_size_x = 1024) in;

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

bool getFragmentState(in ivec2 i_pos)
{
	ivec4 fi = ivec4(i_pos/8, i_pos%8);
	int findex = fi.x + fi.y*(u_gi2d_info.m_resolution.x/8);
	uint64_t fragment_map = b_diffuse_map[findex];

	uint64_t bit = 1ul<<(fi.z+fi.w*8);
	return (fragment_map & bit) != 0;
}
void main() 
{
//	uint tiktok = u_system_data.m_gpu_index;
	int p_id = int(gl_GlobalInvocationID.x);
	vec2 pos = b_pos[p_id*2 + gpu_index()];
	vec2 index_grid_f = pos / Grid_Size;
	ivec2 index_grid = ivec2(index_grid_f);
	ivec2 reso_grid = ivec2(u_gi2d_info.m_resolution/Grid_Size);
	if(any(lessThan(index_grid, ivec2(0))) || any(greaterThanEqual(index_grid, reso_grid)))
	{
//		b_pos[p_id*2 + cpu_index()] = pos;
		return; 
	}

	vec2 pos_old = b_pos[p_id*2 + cpu_index()];
	ParticleData data = b_data[b_type[p_id]];

	int level = 2;
	vec2 pressure;
	{
		ivec2 reso = ivec2(u_gi2d_info.m_resolution.xy);
		ivec2 reso_ = ivec2(u_gi2d_info.m_resolution.xy)>>level;
		int offset = 0;
		for(int i = 0; i < level; i++){
			offset = offset + (reso.x>>i)*(reso.y>>i);
		}
//		offset += (reso.x*reso.y)>>2;
//		offset += (reso.x*reso.y)>>4;

//		ivec4 neighbor = ivec4(-1, -1, 1, 1);
//		vec2 p = mod(pos, vec2(1<<level)) / vec2(1<<level);
//		vec2 p = pos / vec2(1<<level);
		ivec2 index_grid = ivec2(index_grid_f / vec2(1<<level));
		ivec4 neighbor = ivec4(-1, -1, 0, 0) + ivec4(greaterThan(mod(pos.xyxy, vec4(1<<level)), vec4((1<<level)*0.5)));

		ivec4 access_list_x = (index_grid.xxxx + neighbor.xzxz);
		ivec4 access_list_y = (index_grid.yyyy + neighbor.yyww);
		ivec4 access_list = offset + access_list_x + access_list_y * reso_.x;

		vec2 w_pos0 = (vec2(access_list_x.x, access_list_y.x) + vec2(0.45, 0.45))*Grid_Size * (1<<level);
		vec2 w_pos1 = (vec2(access_list_x.y, access_list_y.y) + vec2(0.55, 0.45))*Grid_Size * (1<<level);
		vec2 w_pos2 = (vec2(access_list_x.z, access_list_y.z) + vec2(0.45, 0.55))*Grid_Size * (1<<level);
		vec2 w_pos3 = (vec2(access_list_x.w, access_list_y.w) + vec2(0.55, 0.55))*Grid_Size * (1<<level);

		int d = b_grid_counter[ offset + index_grid.x + index_grid.y * reso_.x];
		ivec4 density;
		density.x = b_grid_counter[access_list[0]] - d;
		density.y = b_grid_counter[access_list[1]] - d;
		density.z = b_grid_counter[access_list[2]] - d;
		density.w = b_grid_counter[access_list[3]] - d;

		bvec4 is_wall;
		is_wall.x = getFragmentState(ivec2(pos) + ivec2(-1, -1));
		is_wall.y = getFragmentState(ivec2(pos) + ivec2( 1, -1));
		is_wall.z = getFragmentState(ivec2(pos) + ivec2(-1,  1));
		is_wall.w = getFragmentState(ivec2(pos) + ivec2( 1,  1));
		density += ivec4(is_wall)*50;

		density /= data.mass;
		density = ivec4(greaterThan(abs(density), vec4(data.mass))) * density;


		vec2 p0 = density[0] / normalize(pos - w_pos0);
		vec2 p1 = density[1] / normalize(pos - w_pos1);
		vec2 p2 = density[2] / normalize(pos - w_pos2);
		vec2 p3 = density[3] / normalize(pos - w_pos3);
		pressure = (p0 + p1 + p2 + p3);

	}
	vec2 viscosity;
	{
		ivec2 reso = ivec2(u_gi2d_info.m_resolution.xy>>2);
		int offset = reso.x*reso.y;
		offset += (reso.x*reso.y)>>2;
		offset += (reso.x*reso.y)>>4;

		vec2 p = mod(pos, vec2(4.)) / 4.;

		ivec2 index_grid = ivec2(index_grid_f / 2.);
		ivec4 neighbor = ivec4(-1, -1, 0, 0) + ivec4(greaterThan(p.xyxy, vec4(0.5)));
		ivec4 access_list_x = (index_grid.xxxx + neighbor.xzxz);
		ivec4 access_list_y = (index_grid.yyyy + neighbor.yyww);
		ivec4 access_list = offset + access_list_x + access_list_y * reso_grid.x;

		vec2 w_pos0 = (vec2(access_list_x.x, access_list_y.x) + vec2(0.45, 0.45))*Grid_Size;
		vec2 w_pos1 = (vec2(access_list_x.y, access_list_y.y) + vec2(0.55, 0.45))*Grid_Size;
		vec2 w_pos2 = (vec2(access_list_x.z, access_list_y.z) + vec2(0.45, 0.55))*Grid_Size;
		vec2 w_pos3 = (vec2(access_list_x.w, access_list_y.w) + vec2(0.55, 0.55))*Grid_Size;

		int d = b_grid_counter[index_grid.x + index_grid.y * reso_grid.x];
		ivec4 iv;
		iv.x = b_grid_counter[access_list[0]] - d;
		iv.y = b_grid_counter[access_list[1]] - d;
		iv.z = b_grid_counter[access_list[2]] - d;
		iv.w = b_grid_counter[access_list[3]] - d;

		vec2 p0 = iv.x / normalize(p - w_pos0);
		vec2 p1 = iv.y / normalize(p - w_pos1);
		vec2 p2 = iv.z / normalize(p - w_pos2);
		vec2 p3 = iv.w / normalize(p - w_pos3);
//		viscosity = (p0 + p1 + p2 + p3) / 1000.;
		viscosity = vec2(0.);

	}

	

	b_pos[p_id*2 + cpu_index()] = pos + (pos-pos_old)*0.98 + (pressure + viscosity/*+ vec2(0., 9.8)*/)*DT;

}