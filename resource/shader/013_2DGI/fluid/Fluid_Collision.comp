#version 460
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Shape.glsl"

#define USE_Fluid2D 0
#define USE_GI2D 1
#include "Fluid2D.glsl"
#include "GI2D.glsl"

layout (local_size_x = 1024) in;


void main() 
{

	int p_id = int(gl_GlobalInvocationID.x);
//	if(imageLoad(tType, index).x != TYPE_FLUID){ return; }

	const vec2 p_pos = b_pos[p_id];
	const float p_minimum = b_pressure[p_id];

	ivec2 index = ivec2(p_pos);
	ivec3 neighbor = ivec3(ivec2(greaterThan(fract(p_pos), vec2(0.5))) * 2 - 1, 0);
	ivec4 access_list = (index.xxxx + neighbor.zzxx) + (index.yyyy+neighbor.zyzy)*u_gi2d_info.m_resolution.x;

//	if(!isInGrid(uGridInfo, p.xyz)){ return; }

//	float mass = Mass[TYPE_FLUID];
	const float p_mass = 10.; // 質量
	float e = 0.2; // 反発係数
	const vec2 p_vel = b_vel[p_id];
	vec2 calc_vel = p_vel;

	for(int i = 0; i < 4; i++)
	{
		for(int target_id = b_grid_head[access_list[i]]; target_id != -1; target_id = b_grid_node[target_id])
		{
			if(p_id == target_id)
			{
				// 自分とは判定しない
				continue; 
			}

			const vec2 t_pos = b_pos[target_id];
			float dist = distance(p_pos, t_pos);
			if(dist < CollisionRadius) 
			{
				vec2 forceDT = (p_vel - b_vel[target_id]) * (p_pos - t_pos);
				if(dot(forceDT, vec2(1.)) > 0.)
				{
//					float m = Mass[imageLoad(tType, otherIndex).x];
					const float t_mass = 10.; // 質量
					forceDT *= (1.0+e)*t_mass / (p_mass+t_mass) / (dist*dist + 0.001);
					calc_vel -= forceDT * (t_pos - p_pos);
				}
			}
		}
	}
	// 加速度のバッファを借りる
	b_acc[p_id] = calc_vel;

}