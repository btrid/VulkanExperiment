#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_RENDER 1
#include "GI2D.glsl"

/*
layout(push_constant) uniform BounceInfo
{
	int bounce_count;
	int store_photon_index;
} constant;
*/
#define u16_max (0xffff)
#define fragment_state_non (0)
#define fragment_state_wall (1)
#define fragment_state_light (2)
#define fragment_state_bounce (3)
#define fragment_state_bounce_hit (4)

layout (local_size_x = 32, local_size_y = 32) in;

void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);
	uint64_t is_reached = b_emission_reached[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*reso.x];

	vec3 illuminance = vec3(0.);
	vec2 end = vec2(gl_GlobalInvocationID.xy);

	ivec2 map_index_hie = ivec2(end);
	ivec4 fragment_index = ivec4(map_index_hie/8, map_index_hie%8);
	ivec2 shift = fragment_index.zw;

//	int findex_ = fragment_index.x + fragment_index.y*reso.z;
	ivec2 findex_ = fragment_index.xz + fragment_index.yw*ivec2(reso.z, 8);
	uint64_t b = b_fragment_map[findex_.x];
	bool isblock = (b & (1ul<<findex_.y)) != 0;


	int light_count = 0;
	const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 tile_index_2d = pixel / ivec2(u_gi2d_info.m_emission_tile_size.xy);
	const int tile_index = int(tile_index_2d.x + tile_index_2d.y*u_gi2d_info.m_emission_tile_num.x);
	for(int i = b_emission_tile_linkhead[tile_index]; i != -1; i= b_emission_tile_linklist[i].next)
	{
		Emission light;
		vec2 start;
		{
			int emission_index = b_emission_tile_linklist[i].target;
			light = b_emission[emission_index];
			ivec2 e_index_2d = ivec2(emission_index%u_gi2d_info.m_resolution.x, emission_index/reso.x);
			start = vec2(e_index_2d/*<<constant.bounce_count*/);
		}
	
		const float ray_dist = distance(end, start);
		vec3 radiance = vec3(1., 1., 1.);
		uint64_t bit_mask = 1ul << light_count;
		radiance = ((is_reached&bit_mask) != 0) ? radiance : vec3(0.);
		radiance = isblock ? vec3(1., 0., 0.) : radiance;
		illuminance += radiance;
		light_count++;
	}

	imageStore(t_color[0], pixel, illuminance.xyzz);
}
