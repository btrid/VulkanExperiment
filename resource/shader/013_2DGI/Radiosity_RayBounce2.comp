#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout(push_constant) uniform Input
{
	uint bounce;
} constant;

layout (local_size_x = 1024, local_size_y = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= b_segment_counter.w){ return; }

	u16vec2 pos = b_vertex_array[gl_GlobalInvocationID.x].pos;
	uint pos_index = pos.x+pos.y*u_gi2d_info.m_resolution.x;
	if(!isDiffuse(b_fragment[pos_index])){ return; }

	uint offset = u_gi2d_info.m_resolution.x*u_gi2d_info.m_resolution.y;

	vec3 irradiance = vec3(0.);
	for(int i = 0; i < Vertex_Num; i++)
	{
		u16vec2 v = b_vertex_array[gl_GlobalInvocationID.x].vertex[i];
		uint vi = v.x + v.y * u_gi2d_info.m_resolution.y;
		if(!isDiffuse(b_fragment[vi])){ continue; }

		vec3 power = b_radiance_ex[vi + offset * constant.bounce];
		vec3 albedo = getRGB(b_fragment[vi]);
		irradiance += power * albedo / 6.28;
	}

	b_radiance_ex[pos_index + offset * (constant.bounce+1)] = irradiance;

}
