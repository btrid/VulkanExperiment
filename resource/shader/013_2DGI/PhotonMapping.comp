#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout(push_constant) uniform BounceInfo
{
	int bounce_count;
	int store_photon_index;
} constant;
#define u16_max (0xffff)
#define fragment_state_non (0)
#define fragment_state_wall (1)
#define fragment_state_light (2)
#define fragment_state_bounce (3)
#define fragment_state_bounce_hit (4)

//shared uint64_t light_fragment[4][16];
layout (local_size_x = 32, local_size_y = 32) in;
void main()
{
	const vec2 pixel_size = vec2(1., 1.);
	const vec2 subpixel = pixel_size.xy*(1<<constant.bounce_count);

	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	const ivec2 bounce_reso = ivec2(u_pm_info.m_resolution.xy) >> constant.bounce_count;
	const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy)<<constant.bounce_count;
	int fragment_state = fragment_state_non;
	vec3 albedo = vec3(0.);
	vec3 illuminance = vec3(0.);
	{
		ivec4 fragment_index = ivec4(pixel/8, pixel%8);
		ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z, 8);
		uint64_t fragment_map = b_fragment_map[fragment_index_1d.x];
		uint64_t bit = 1ul<<fragment_index_1d.y;

		fragment_state = ((fragment_map & bit) != 0) ? fragment_state_wall : fragment_state_non;
		albedo = fragment_state == fragment_state_wall ? b_fragment[pixel.x + pixel.y * reso.x].albedo.xyz : vec3(0., 0., 1.);
	}

	const ivec2 tile_index_2d = pixel / ivec2(u_pm_info.m_emission_tile_size.xy);
	const int tile_index = int(tile_index_2d.x + tile_index_2d.y*u_pm_info.m_emission_tile_num.x);
	for(int i = b_emission_tile_linkhead[tile_index]; i != -1; i= b_emission_tile_linklist[i].next)
	{
		vec2 end = pixel;
		vec2 start;
		vec4 radiance;
		{
			int emission_index = b_emission_tile_linklist[i].target;
			int eoffset = u_pm_info.m_emission_buffer_offset[constant.bounce_count];
			radiance = b_emission[emission_index+eoffset].value;
			ivec2 e_index_2d = ivec2(emission_index%bounce_reso.x, emission_index/bounce_reso.x);
			start = vec2(e_index_2d<<constant.bounce_count);
		}
		ivec2 iend = ivec2(end+0.5);
		ivec2 istart = ivec2(start+0.5);
		ivec2 idir = iend - istart;
		{
//			ivec4 fragment_index = ivec4(istart/8, istart%8);
//			ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z, 8);
//			uint64_t fragment_map = b_fragment_map[fragment_index_1d.x];
//			uint64_t bit = 1ul<<fragment_index_1d.y;
//			fragment_map & bit != 0;
		}

		vec2 end_subpos = vec2(0.5);
		vec2 start_subpos = vec2(0.5);
		{
			if(abs(idir.x) >= abs(idir.y))
			{
				start_subpos.x = idir.x<0 ? 0. : idir.x>0 ? 1. : 0.5;
				start_subpos.y = idir.y>0 ? 1. : idir.y<0 ? 0. : 0.5;
				end_subpos.x = idir.x<0 ? 1. : idir.x>0 ? 0. : 0.5;
				end_subpos.y = idir.y>0 ? 0. : idir.y<0 ? 1. : 0.5;
			}
			else
			{
				start_subpos.x = idir.x>0 ? 1. : idir.x<0 ? 0. : 0.5;
				start_subpos.y = idir.y<0 ? 0. : idir.y>0 ? 1. : 0.5;
				end_subpos.x = idir.x>0 ? 0. : idir.x<0 ? 1. : 0.5;
				end_subpos.y = idir.y<0 ? 1. : idir.y>0 ? 0. : 0.5;
			}
		}

		start = start + subpixel*(start_subpos.xy);
		end = end + subpixel*(end_subpos.xy);

		int goal_index = abs(idir.x) >= abs(idir.y) ? 0: 1;

		const vec2 diff = (end - start);
		if(dot(diff, diff) <= 10.1)
		{
			// ライト
			fragment_state = fragment_state_light;
			break;
		}
		const float ray_dist = length(diff.xy);
		vec3 illumi = radiance.xyz / (1.+ray_dist);
		if(dot(illumi, illumi) <= FLT_EPSIRON){
			// 影響範囲外
			continue;
		}
		
		vec2 dir = normalize(end - start);
		dir *= abs(dir.x) >= abs(dir.y) ? abs(1./dir.x) : abs(1./dir.y);
		vec2 inv_dir;
		inv_dir.x = dir.x == 0. ? 9999999. : (1./dir.x);
		inv_dir.y = dir.y == 0. ? 9999999. : (1./dir.y);
		inv_dir = abs(inv_dir);

		vec2 pos = start;
		ivec2 map_index = ivec2(pos / pixel_size.xy);
		pos += dir*0.5;

		const ivec2 map_index_origin = ivec2((idir.x < 0 ? 0 : 1), (idir.y < 0 ? 0 : 1));

		float absorb = 0.;
		for(int i = 0; i <1000; i++)
		{
			{
				int hierarchy=7;
				for(; hierarchy>constant.bounce_count; hierarchy--)
				{
					ivec2 findex2d = map_index>>hierarchy;
					int findex = findex2d.x + findex2d.y*(reso.x>>hierarchy);
					int offset = getFragmentHierarchyOffset(hierarchy);
					if(b_fragment_hierarchy[findex + offset] == 0)
					{
						ivec2 cell_origin = map_index_origin<<hierarchy;
						ivec2 map_index_sub = map_index - (findex2d<<hierarchy);
						vec2 cell_p = abs(cell_origin - (map_index_sub+fract(pos)));
						float min_axis = min(abs(cell_p.x*inv_dir.x), abs(cell_p.y*inv_dir.y));
						pos += min_axis*dir - dir*0.5;
						break;
					}
				}
			}
			// march
			{
				pos += dir * (1<<constant.bounce_count);
				map_index = ivec2(pos);
			}
			// 終了判定
			if(abs(map_index[goal_index]-istart[goal_index]) >= abs(idir[goal_index]))
			{
				// 距離を超えたら光がフラグメントにヒット
				illuminance += albedo*illumi;
				if(fragment_state == fragment_state_wall){
					fragment_state = fragment_state_bounce;
				}
				break;
			}
			// hit確認
			{
				ivec2 map_index_sub = map_index>>constant.bounce_count;
				ivec4 fragment_index = ivec4(map_index_sub/8, map_index_sub%8);
				ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z, 8);

				int offset = getFragmentMapHierarchyOffset(constant.bounce_count);
				uint64_t fragment_map = b_fragment_map[fragment_index_1d.x + offset];
				uint64_t bit = 1ul<<fragment_index_1d.y;
				if((fragment_map & bit) != 0)
				{ 
					absorb += 1.34;
					if(absorb >= 1.)
					{
						break;
					}
				}
			}
		}
		illumi*= absorb;

	}

	// バウンス
	if(fragment_state == fragment_state_bounce && constant.store_photon_index>0 && /*illuminance.b !=0.*/ dot(illuminance, illuminance) >= 1.1)
	{
		int store_shift = constant.store_photon_index;
		const ivec2 store_reso = ivec2(u_pm_info.m_resolution.xy)>>store_shift;
		ivec2 store_index_2d = ivec2(gl_GlobalInvocationID.xy)>>store_shift;
		int store_index = store_index_2d.x + store_index_2d.y*store_reso.x;

		int e_offset = u_pm_info.m_emission_buffer_offset[store_shift];
		if(atomicCompSwap(b_emission_map[e_offset + store_index], -1, 0) == -1)
		{
			int list_index = atomicAdd(b_emission_counter[store_shift].x, 1);
			b_emission_list[e_offset+list_index] = store_index;
		}
		b_emission[e_offset+store_index].value = vec4(illuminance.rgb, 1.);
	}

	// store
	{
		vec3 store_illuminance = min(illuminance, vec3(65535.));

		uvec2 u_rg = uvec2(store_illuminance.rg) << uvec2(0, 16);
		uint rg = u_rg.r | u_rg.g;
		uvec2 u_ba = uvec2(store_illuminance.b, 0) << uvec2(0, 16);
		uint ba = u_ba.x | u_ba.y;
		ivec2 store_index_2d = ivec2(gl_GlobalInvocationID.xy);
		imageAtomicAdd(t_color[constant.bounce_count], ivec3(store_index_2d.xy, 0), rg);
		imageAtomicAdd(t_color[constant.bounce_count], ivec3(store_index_2d.xy, 1), ba);
	}

}
