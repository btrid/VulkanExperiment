#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

#define assert(_x) for(int i = 0; i < 10000 && (_x); i++)
layout (local_size_x = 32, local_size_y = 32) in;
shared Emission s_emission[64];
shared uint64_t s_fragment_map[16];
void main()
{
	const int hierarchy_rate[2] = {1, 8};
	const vec2 c_cell_size[2] = {vec2(1.), vec2(1.)*hierarchy_rate[1]};
	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);

	const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	const vec2 end = vec2(pixel);
	vec3 photon = vec3(0.);

	const ivec2 tile_index_2d = pixel / ivec2(u_pm_info.m_emission_tile_size.xy);
	const int tile_index = int(tile_index_2d.x + tile_index_2d.y*u_pm_info.m_emission_tile_num.x);
	int emission_num = min(b_emission_tile_counter[tile_index.x], 64);
	{
		if(gl_LocalInvocationIndex < emission_num)
		{
			int emission_index = b_emission_tile_map[tile_index*u_pm_info.m_emission_tile_map_max + gl_LocalInvocationIndex];
			s_emission[gl_LocalInvocationIndex] = b_emission[emission_index];		
		}
		barrier();
		memoryBarrierShared();
	}
	for(int i = 0; i < emission_num; i++)
	{
		vec4 emission = s_emission[i].value;
		vec4 emission_pos = s_emission[i].pos;
		const vec2 start = emission_pos.xz;
		vec2 pos = start;
		ivec2 map_index = ivec2(pos / c_cell_size[0].xy);


		const vec2 diff = (end - pos);
		if(dot(diff, diff) <= 0.01){
			continue;
		}
		const float ray_dist = length(diff.xy);

		vec2 dir = normalize(diff);
		dir.x = abs(dir.x) <= FLT_EPSIRON ? FLT_EPSIRON*2. : dir.x;
		dir.y = abs(dir.y) <= FLT_EPSIRON ? FLT_EPSIRON*2. : dir.y;

		const ivec3 next_step = ivec3((dir.x < 0. ? -1 : 1), (dir.y < 0. ? -1 : 1), 0);

		uint64_t fragment_map;
		{
			ivec2 fragment_index = map_index/8;
			int fragment_index_1d = fragment_index.x + fragment_index.y*reso.z;
			fragment_map = b_fragment_hierarchy[fragment_index_1d];
		}

		for(;;)
		{
			const int hierarchy = fragment_map == 0 ? 1 : 0;
			vec2 cell_size = c_cell_size[hierarchy];

			// march
			{
				vec2 cell_origin = vec2(map_index / hierarchy_rate[hierarchy.x])*cell_size;
				vec2 cell_p = pos - cell_origin;

				float x = dir.x < 0. ? cell_p.x : (cell_size.x- cell_p.x);
				float y = dir.y < 0. ? cell_p.y : (cell_size.y- cell_p.y);

				x = x <= FLT_EPSIRON ? (x+cell_size.x) : x;
				y = y <= FLT_EPSIRON ? (y+cell_size.y) : y;

				vec2 dist = abs(vec2(x, y) / dir);
				int next_ = dist.x < dist.y ? 0 : 1;
				pos += dir * dist[next_];

				ivec2 next = next_ == 0 ? next_step.xz : next_step.zy;
				map_index = ivec2((pos+ next*0.1) / c_cell_size[0].xy);
			}

			// 終了判定
			if(distance(start.xy, pos.xy) >= ray_dist.x)
			{
				// 距離を超えたら光がフラグメントにヒット
				photon += vec3(0., 0., 1.) * emission_pos.w / (1+ray_dist.x*ray_dist.x);
				break;
			}

			// hit確認
			{
				ivec2 fragment_index = map_index/8;
				int fragment_index_1d = fragment_index.x + fragment_index.y*reso.z;
				fragment_map = b_fragment_hierarchy[fragment_index_1d];

				ivec2 fragment_index_sub = map_index%8;
				int fragment_index_sub_1d = fragment_index_sub.x + fragment_index_sub.y*8;
				uint64_t bit = uint64_t(1)<<fragment_index_sub_1d;

				if((fragment_map & bit) != 0)
				{ 
					break;
				}
			}
		}
	}
	const int pixel_1d = pixel.x + pixel.y*u_pm_info.m_resolution.x;
	b_color[pixel_1d] = vec4(photon, 1.);
}
