#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D/GI2D.glsl"
#include "GI2D/Radiosity.glsl"

layout (local_size_x = 64, local_size_y = 4) in;

shared uint64_t s_map[2];
const i16vec2 g_offset[] = 
{
		i16vec2(-1, 0),
		i16vec2( 1, 0),
		i16vec2( 0,-1),
		i16vec2( 0, 1),
};

void main() 
{
	if(gl_LocalInvocationIndex < 6 && gl_LocalInvocationID.y < 6)
	{
		uvec2 offset_xy = gl_LocalInvocationID.xy-1;
		uvec2 index = gl_WorkGroupID.xy*4 + offset_xy;

		uint64_t map = -1ul;
		if(all(lessThan(index, u_gi2d_info.m_resolution.zw)))
		{
			map = b_fragment_map[index.x + index.y * u_gi2d_info.m_resolution.z];
		}
		s_map[gl_LocalInvocationID.y][gl_LocalInvocationID.x] = map;
	}

	memoryBarrierShared();
	barrier();

	bool is_diffuse = true;
	bool is_edge = false;
	bool is_boundary = any(equal(gl_GlobalInvocationID.xyxy, uvec4(0,0,u_gi2d_info.m_resolution.xy-1)));
	{
		ivec2 ii = ivec2(gl_LocalInvocationID.xy) + ivec2(8);
		ivec2 map_index = ii / 8;
		ivec2 map_bit = ii % 8;
		if((s_map[map_index.y][map_index.x] & (1ul<<(map_bit.x+map_bit.y*8))) == 0ul)
		{
			// 床なので何もしない
			is_diffuse = false;
		}
	}
	for(int i = 0; i < g_offset.length(); i++)
	{
		ivec2 ii = ivec2(gl_LocalInvocationID.xy) + g_offset[i] + ivec2(8);
		ivec2 map_index = ii / 8;
		ivec2 map_bit = ii % 8;
		if((s_map[map_index.y][map_index.x] & (1ul<<(map_bit.x+map_bit.y*8))) == 0ul)
		{
			is_edge = true;
			break;
		}
	}
}
