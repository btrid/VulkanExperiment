#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define USE_GI2D 0
#define USE_GI2D_SDF 1
#define USE_GI2D_Radiosity 2
#define USE_RenderTarget 3

#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DSDF.glsl"
#include "GI2D/Radiosity.glsl"
#include "applib/System.glsl"

layout (local_size_x=8, local_size_y=8) in;
const int ANGLE_NUM = 24;

float rand(in vec2 co)
{
   return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	uvec4 reso = u_gi2d_info.m_resolution;

	{
		if(any(equal(gl_GlobalInvocationID.xyxy, ivec4(0,0,reso.xy)))){ return; }
		uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*reso.x; 
		if(isDiffuse(b_fragment[index]))
		{
			imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(1., 0., 0., 1.));
			return;
		}
	}

	vec3 color = vec3(0.);
	float angle_offset = rand(vec2(gl_GlobalInvocationID.xy));
	for(int angle_index = 0; angle_index < ANGLE_NUM; angle_index++)
	{
		float angle = (angle_index + angle_offset) * (2.*3.1415 / float(ANGLE_NUM));
		vec2 dir = vec2(cos(angle), sin(angle));
		vec2 pos = vec2(gl_GlobalInvocationID.xy) + dir;
		ivec2 ipos = ivec2(pos);

		for(;;)
		{
			ipos = ivec2(pos);
			float sdf = b_sdf[ipos.x + ipos.y * reso.x];
			if(sdf <= 0.1)
			{
				break;
			}
			pos = dir * sdf + pos;
		}
		uint index = ipos.x + ipos.y*reso.x; 
		Fragment f = b_fragment[index];
		vec3 albedo = getRGB(f);
		bool is_emissive = isEmissive(f);

		color = albedo * float(is_emissive) + color;
	}
//	if(dot(color, vec3(1.)) > 0.)
	{
		imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.));
	}
}


