#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define USE_GI2D 0
#define USE_GI2D_SDF 1
#define USE_GI2D_Radiosity 2
#define USE_RenderTarget 3

#include "GI2D/GI2D.glsl"
#include "GI2D/GI2DSDF.glsl"
#include "GI2D/Radiosity.glsl"
#include "applib/System.glsl"

layout (local_size_x=32) in;

float rand(in vec2 co)
{
   return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	uvec4 reso = u_gi2d_info.m_resolution;
	ivec2 ipos = ivec2(gl_WorkGroupID.xy);
	vec2 pos = vec2(ipos);

	{
		if(any(equal(ipos.xyxy, ivec4(0,0,reso.xy)))){ return; }
		uint index = ipos.x + ipos.y*reso.x; 
		if(isDiffuse(b_fragment[index]))
		{
			return;
		}
	}


	vec2 dir;
	{
		float angle_offset = rand(vec2(gl_GlobalInvocationID.xy));
		float angle = (gl_LocalInvocationID.x + angle_offset) * (6.2831 / float(gl_WorkGroupSize.x));
		dir = vec2(cos(angle), sin(angle));
	}
	for(int _i = 0; _i < 1000; _i++)
	{
		ipos = ivec2(pos);
		float sdf = b_sdf[ipos.x + ipos.y * reso.x];
		if(sdf <= 0.1)
		{
			break;
		}
		pos = dir * sdf + pos;
	}

	uint index = ipos.x + ipos.y*reso.x; 
	vec3 albedo = getRGB(b_fragment[index]);
	bool is_emissive = isEmissive(b_fragment[index]);

	vec3 color = subgroupAdd(albedo * float(is_emissive));
	if(subgroupElect() && dot(color, vec3(1.)) >= 0.0001)
	{
		imageStore(i_render_target, ivec2(gl_WorkGroupID.xy), vec4(color, 1.));
	}
}


