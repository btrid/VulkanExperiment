#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x=1024) in;
void main()
{
	if(gl_GlobalInvocationID.x >= b_segment_counter.w){ return; }

	const int hierarchy = u_gi2d_scene.m_hierarchy;
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	D2Segment seg = b_segment[gl_GlobalInvocationID.x];
	D2Ray ray = b_ray[seg.ray_index];

	vec2 dir = rotate(ray.angle);
	vec2 inv_dir;
	inv_dir.x = dir.x == 0. ? 99999999. : abs(1./dir.x);
	inv_dir.y = dir.y == 0. ? 99999999. : abs(1./dir.y);
	dir *= min(inv_dir.x, inv_dir.y);

	vec2 pos = ray.origin + dir*seg.begin;
	ivec2 map_index = ivec2(pos);

	u64vec2 map;
	uint old_map_index = -1;

	seg.radiance = 0;
	for(int march_count = 1; march_count < seg.march; march_count++)
	{
		{
			ivec2 cell = map_index>>3;
			uint dindex = cell.x + cell.y*reso.z;
			if(old_map_index != dindex)
			{
				map = b_fragment_map[dindex];
				old_map_index = dindex;
			}
			ivec2 cell_sub = map_index%8;
			bvec2 attr = notEqual((map & (1ul<<(cell_sub.x+cell_sub.y*8))), u64vec2(0));
			if(attr.y)
			{
				seg.radiance += b_light[getMemoryOrder(map_index)];
			}
		}

		// march
		{
			// DDA
			pos = ray.origin + (seg.begin+march_count)*dir;
			map_index = ivec2(pos);
		}
	}

	if(seg.radiance != 0)
	{
		int index = atomicAdd(b_photon_counter.w, 1);
		if(index%1024==0){
			atomicAdd(b_photon_counter.x, 1);
		}
		D2Photon photon;
		photon.ray_index = seg.ray_index;
		photon.begin = seg.begin;
		photon.march = seg.march;
		photon.radiance = seg.radiance;
		 
		b_photon[index] = photon;
	}


}
