#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#include "GI2D.glsl"
#define USE_GI2D_SDF 1
#include "GI2DSDF.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

shared uint s_diffuse_map[2];
shared uint s_emissive_map[2];
void main()
{
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);

	int tiled_1D_index = id.x + id.y*u_gi2d_info.m_resolution.x; 
	bool is_diffuse = isDiffuse(b_fragment[tiled_1D_index]);
	bool is_emissive = isEmissive(b_fragment[tiled_1D_index]);

	b_jfa[tiled_1D_index] = (!is_diffuse ? i16vec2(0x8000,0x8000) : i16vec2(0x8000, 0));

	// fragment map
	{
		if(gl_LocalInvocationIndex <=1)
		{
			s_diffuse_map[gl_LocalInvocationIndex] = 0;
			s_emissive_map[gl_LocalInvocationIndex] = 0;
		}
		memoryBarrierShared();
		barrier();

		uint hilow = gl_LocalInvocationIndex/32;
		uint offset = gl_LocalInvocationIndex%32;
		is_diffuse ? atomicOr(s_diffuse_map[hilow], 1<<offset) : 0;
		is_emissive ? atomicOr(s_emissive_map[hilow], 1<<offset) : 0;

		memoryBarrierShared();
		barrier();

		if(gl_LocalInvocationIndex == 0)
		{
			uint64_t diffuse_map =  (uint64_t(s_diffuse_map[1]) << 32) | s_diffuse_map[0];
			uint64_t emissive_map =  (uint64_t(s_emissive_map[1]) << 32) | s_emissive_map[0];

			b_fragment_map[gl_WorkGroupID.x + gl_WorkGroupID.y * u_gi2d_info.m_resolution.z] = diffuse_map;
			b_fragment_map[gl_WorkGroupID.x + gl_WorkGroupID.y * u_gi2d_info.m_resolution.z + u_gi2d_info.m_resolution.z*u_gi2d_info.m_resolution.w] = emissive_map;
		}

	}
}

