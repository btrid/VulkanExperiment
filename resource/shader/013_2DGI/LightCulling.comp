#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_PM 0
#include "PM.glsl"


layout(push_constant) uniform BounceInfo
{
	int bounce_count;
	int store_photon_index;
} constant;

layout (local_size_x = 32, local_size_y = 1) in;

shared vec4 s_area;
void main()
{

	uvec2 tile_index_2d = gl_WorkGroupID.xy;
	uint tile_index_1d = gl_WorkGroupID.x + gl_WorkGroupID.y*u_pm_info.m_emission_tile_num.x; 

	vec2 left_top = vec2(0., 0.);
	vec2 right_bottom = vec2(u_pm_info.m_resolution.xy);
	if(gl_LocalInvocationID.x == 0)
	{
		vec2 tile_size = u_pm_info.m_emission_tile_size.xy;
		s_area.xy = left_top + tile_size*tile_index_2d.xy - 1.1;
		s_area.zw = s_area.xy + tile_size + 1.2;

		b_emission_tile_linkhead[tile_index_1d] = -1;

	}
	barrier();
	memoryBarrierShared();
	memoryBarrierBuffer();

	ivec2 reso = u_pm_info.m_resolution>>constant.bounce_count;
	float tile_size = length(u_pm_info.m_emission_tile_size.xy);

	uint data_num = b_emission_counter[constant.bounce_count].x;
	int data_offset = u_pm_info.m_emission_buffer_offset[constant.bounce_count];
	uint loop_count = (data_num-1) / gl_NumWorkGroups.x + 1;
	uint loop_begin = gl_LocalInvocationID.x*loop_count;
	uint loop_end = loop_begin + loop_count;
	for(uint i = loop_begin; i < loop_end; i++)
	{
		if(i >= data_num){
			break;
		}
//		int index1d = b_emission_list[data_offset+i];
//		vec2 pos = vec2(ivec2(index1d%reso.x, index1d/reso.x)<<constant.bounce_count);

		Emission light = b_emission_buffer[data_offset+i];
		float power = length(light.emission);
		vec2 pos = light.pos;

		vec2 Delta = pos - max(s_area.xy, min(pos, s_area.zw));
		if(dot(Delta, Delta) > (power*power)) 
		{
			// 影響範囲外
			continue;
		}
		float light_dir = light.dir;
		float light_angle = light.angle;

		vec4 l_dir = rotate2(light_dir.xx + vec2(-light_angle, light_angle));
		vec3 a = cross(vec3(l_dir.xy, 0.), vec3(s_area.xy - pos, 0.));
		vec3 b = cross(vec3(l_dir.zw, 0.), vec3(s_area.xy - pos, 0.));
		if(light_angle>=0. && (a.z>tile_size||b.z<-tile_size))
		{
			// spotlight影響範囲外
			continue;
		}


		int linklist_index = atomicAdd(b_emission_tile_counter, 1);
		if(linklist_index < u_pm_info.m_emission_tile_linklist_max)
		{
			int next = atomicExchange(b_emission_tile_linkhead[tile_index_1d], linklist_index);
			b_emission_tile_linklist[linklist_index].next = next;
			b_emission_tile_linklist[linklist_index].target = int(i);
		}
	}
}

