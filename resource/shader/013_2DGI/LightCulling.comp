#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout(push_constant) uniform BounceInfo
{
	int bounce_count;
	int store_photon_index;
} constant;

layout (local_size_x = 32, local_size_y = 1) in;

shared vec4 s_area;
void main()
{

	uvec2 tile_index_2d = gl_WorkGroupID.xy;
	uint tile_index_1d = gl_WorkGroupID.x + gl_WorkGroupID.y*u_pm_info.m_emission_tile_num.x; 

	vec2 left_top = vec2(0., 0.);
	vec2 right_bottom = vec2(u_pm_info.m_resolution.xy);
	if(gl_LocalInvocationID.x == 0)
	{
		vec2 tile_size = u_pm_info.m_emission_tile_size.xy;
		s_area.xy = left_top + tile_size*tile_index_2d.xy - 0.1;
		s_area.zw = s_area.xy + tile_size + 0.2;
	}
	barrier();
	memoryBarrierShared();

//	uint data_num = min(b_emission_counter[constant.bounce_count].x, 100);
	uint data_num = b_emission_counter[constant.bounce_count].x;
	int data_offset = u_pm_info.m_emission_buffer_offset[constant.bounce_count];
	uint loop_count = (data_num-1) / gl_NumWorkGroups.x + 1;
	uint loop_begin = gl_LocalInvocationID.x*loop_count;
	uint loop_end = loop_begin + loop_count;
	for(uint i = loop_begin; i < loop_end; i++)
	{
		if(i >= data_num){
			break;
		}
		int index1d = b_emission_list[data_offset+i];
		vec2 pos = vec2(ivec2(index1d%u_pm_info.m_resolution.x, index1d/u_pm_info.m_resolution.x)<<constant.bounce_count);
		float power = length(b_emission[data_offset+index1d].value);

		float DeltaX = pos.x - max(s_area.x, min(pos.x, s_area.z));
		float DeltaY = pos.y - max(s_area.y, min(pos.y, s_area.w));
		bool is_contain = (DeltaX * DeltaX + DeltaY * DeltaY) < (power*power);
		if(!is_contain) 
		{
			continue;
		}
		int linklist_index = atomicAdd(b_emission_tile_counter, 1);
		if(linklist_index < u_pm_info.m_emission_tile_linklist_max)
		{
			int next = atomicExchange(b_emission_tile_linkhead[tile_index_1d], linklist_index);
			b_emission_tile_linklist[linklist_index].next = next;
			b_emission_tile_linklist[linklist_index].target = index1d;
		}
	}
}

