#version 450
#extension GL_GOOGLE_include_directive : require

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

//#define HALF_PI (1.5708)
//#define TWO_PI (6.2832)
//#define QUARTER_PI (0.7854)

#define HALF_PI radians(90.)
#define TWO_PI radians(360.)
#define PI radians(180.)
#define QUARTER_PI radians(45.)

layout (local_size_x=128) in;

D2Ray makeRay(in uint x, in uint y, in int type)
{
	const ivec4 reso = u_gi2d_info.m_resolution;

	float a = TWO_PI / (gl_NumWorkGroups.y);
	float c = (a / gl_NumWorkGroups.z) * (gl_WorkGroupID.z);
	float angle = fma(a, float(y), c);

	vec2 dir = calcDir(angle);
	vec2 inv_dir = abs(1./dir);
	inv_dir = vec2(isnan(inv_dir)) * 99999999. + inv_dir;
	int dir_axis = inv_dir.x < inv_dir.y ? 0 : 1;

	vec2 pos;
	pos.x = dir.x >= 0. ? 0 : reso.x;
	pos.y = dir.y >= 0. ? 0 : reso.y;

	vec2 pdir = vec2(0.);
	if(x < reso.x)
	{
		pdir.x = (dir_axis==0) ? 1 : 0;
		pdir.y = (dir_axis==1) ? 1 : 0;
	}
	else
	{
//		pdir.x = (dir_axis==0) ? 1 : 0;
//		pdir.y = (dir_axis==1) ? 1 : 0;
	}

	pos += pdir*x;
	vec2 begin = pos;
	ivec2 map_index = ivec2(pos);

	ivec2 end_pos;
	end_pos.x = dir.x >= 0. ? reso.x : -1;
	end_pos.y = dir.y >= 0. ? reso.y : -1;
	int march_count = 1;
	for(; march_count <5000; march_count++)
	{
		// march
		{
			// DDA
			pos = fma(dir, float(march_count).xx, begin);
			map_index = ivec2(pos);
		}
		// 範囲外?
		{
			if(any(equal(map_index.xy, end_pos)))
			{
				break;
			}
		}
	}

	D2Ray ray;
	ray.origin = begin;
	ray.angle = angle;
	ray.march = march_count;

	return ray;

}

void main()
{
	uint buffer_offset = u_radiosity_info.ray_frame_max*gl_WorkGroupID.z;
	D2Ray ray = makeRay(gl_GlobalInvocationID.x, gl_WorkGroupID.y, 0);
	b_ray[gl_GlobalInvocationID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + buffer_offset] = ray;
}
