#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x = 1024) in;

layout(push_constant) uniform Input
{
	int compare_bit;
	int distance;
} constant;

bool compare(in D2Ray a, in D2Ray b){
	return a.march < b.march;
}


void main() 
{
	// http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter46.html
	// http://t-pot.com/program/90_BitonicSort/index.html
	// https://gist.github.com/mre/1392067
	uint index_a = gl_GlobalInvocationID.x;
	uint index_b = index_a^constant.distance;

	// 自分より上のものだけチェックする
	if (index_a<index_b)
	{
		return;
	}

	//データないよ
	if(index_a >= ActiveRayAllNum() ||index_b >= ActiveRayAllNum())
	{
		return;
	}

	// フレームを超えてはソートしない
	int frame_a = 0;
	int frame_b = 0;
	frame_a = index_a >= GetRayOffset(1) ? 1:frame_a;
	frame_b = index_b >= GetRayOffset(1) ? 1:frame_b;
	frame_a = index_a >= GetRayOffset(2) ? 2:frame_a;
	frame_b = index_b >= GetRayOffset(2) ? 2:frame_b;
	frame_a = index_a >= GetRayOffset(3) ? 3:frame_a;
	frame_b = index_b >= GetRayOffset(3) ? 3:frame_b;

	D2Ray a = b_ray[index_a];
	D2Ray b = b_ray[index_b];
	bool sort_dir = (index_a&constant.compare_bit)==0;
	if ( (sort_dir == compare(a,b) && frame_a==frame_b)
	|| (sort_dir == (frame_a<frame_b))) 
	{
		b_ray[index_a] = b;
		b_ray[index_b] = a;
	}
}
