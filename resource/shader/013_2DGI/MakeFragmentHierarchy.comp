#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout(push_constant) uniform InputVertex
{
	int level;
} constant;

layout (local_size_x = 32, local_size_y = 32) in;

shared int s_fragment_num[32*32];
void main()
{
	if(any(greaterThanEqual(gl_GlobalInvocationID.xy, u_pm_info.m_resolution.xy>>(constant.level-1)))){
		return;
	}

	// fragment hierarchy
	int level = constant.level;
	int prev_level = constant.level-1;

	uvec2 local = gl_LocalInvocationID.xy/2;
	uint index = local.x + local.y*(gl_WorkGroupSize.x/2);
	{
		if(all(equal(gl_LocalInvocationID.xy % 2, uvec2(0))))
		{
			s_fragment_num[index] = 0;
		}
		barrier();
		memoryBarrierShared();

		{
			uvec2 idx2d = gl_GlobalInvocationID.xy;
			uint prev_store = idx2d.x+idx2d.y*(u_pm_info.m_resolution.x>>prev_level);
			int prev_offset = getFragmentHierarchyOffset(prev_level);
			int fragment = b_fragment_hierarchy[prev_offset + prev_store];

			if(fragment!=0)
			{
				atomicAdd(s_fragment_num[index], fragment);
			}
			
		}
		barrier();
		memoryBarrierShared();

		if(all(equal(gl_LocalInvocationID.xy % 2, uvec2(0))))
		{
			uvec2 idx2d = gl_GlobalInvocationID.xy/2;
			uint store = idx2d.x+idx2d.y*(u_pm_info.m_resolution.x>>level);
			int offset = getFragmentHierarchyOffset(level);
			b_fragment_hierarchy[offset + store] = s_fragment_num[index];
		}
	}
}

