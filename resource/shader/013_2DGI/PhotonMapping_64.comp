#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_PM 1
#include "GI2D.glsl"


layout(push_constant) uniform BounceInfo
{
	int start_id;
	int frame;
} constant;

layout (local_size_x = 32, local_size_y = 32) in;
void main()
{

	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);
	vec2 start = 8. * vec2(constant.start_id, constant.frame);

	vec2 dir = rotate(gl_LocalInvocationIndex*6.28 / 1024.);
	vec2 inv_dir = abs(1./dir);

	vec2 pos = start;
	ivec2 map_index = ivec2(pos);

	const ivec2 map_index_origin = ivec2(greaterThanEqual(dir, vec2(0.)));
	uint64_t is_alive = uint64_t(-1);
	bool is_died = false;
	for(int _i = 0; _i <50000; _i++)
	{
		// march
		{
			int hierarchy=0;
			for(int hierarchy_=3; hierarchy_>2; hierarchy_--)
			{
//				ivec2 map_index_sub = map_index>>hierarchy;
//				ivec4 fragment_index = ivec4(map_index_sub/8, map_index_sub%8);
//				ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z>>hierarchy, 8);
//				int offset = getFragmentMapHierarchyOffset(hierarchy);
//				uint64_t fragment_map = b_fragment_map[fragment_index_1d.x + offset];

				ivec2 map_index_sub = map_index>>hierarchy_;
				ivec4 fragment_index = ivec4(map_index_sub/8, map_index_sub%8);
				ivec4 findex = fragment_index.xxxx + fragment_index.yyyy*(reso.zzzz>>hierarchy_);
				findex +=  getFragmentMapHierarchyOffset(hierarchy_);
				uint64_t fragment_map = b_fragment_map[findex.x];

				if(fragment_map == 0)
				{
//					hierarchy = hierarchy_;

					ivec2 cell_origin = map_index_origin<<hierarchy_;
					ivec2 map_index_sub = map_index - ((map_index>>hierarchy_)<<hierarchy_);
					vec2 cell_p = abs(cell_origin - (map_index_sub+fract(pos))) - 0.5;
					vec2 axis = abs(max(cell_p*inv_dir, vec2(0.)));
					pos += min(axis.x, axis.y)*dir;
					map_index = ivec2(pos);
					break;
				}
			}

			ivec2 cell_origin = map_index_origin<<hierarchy;
			ivec2 map_index_sub = map_index - ((map_index>>hierarchy)<<hierarchy);
			vec2 cell_p = abs(cell_origin - (map_index_sub+fract(pos))) + 0.5;
			vec2 axis = abs(cell_p*inv_dir);
			pos += min(axis.x, axis.y)*dir;
			map_index = ivec2(pos);
		}

		// 範囲外?
		{
			ivec2 is_die = ivec2(greaterThanEqual(map_index, reso.xy)) + ivec2(lessThan(map_index, ivec2(0)));
			if(any(notEqual(is_die.xy, ivec2(0))))
			{
				break;
			}
		}

		// hit確認
		{
			ivec4 fragment_index = ivec4(map_index/8, map_index%8);
			ivec2 shift = fragment_index.zw;

			ivec4 offset_ = ivec4(0,0,1,1);
			ivec4 findex = fragment_index.xxxx + offset_.xxzz + (fragment_index.yyyy + offset_.ywyw)*(reso.zzzz);

			uint64_t fragment_map;
			{
				uint64_t x_line_mask = 0xfful & ((1ul << (shift.x)) - 1ul);
				uint64_t x_mask = ~(x_line_mask | (x_line_mask << 8) | (x_line_mask << 16) | (x_line_mask << 24) | (x_line_mask << 32) | (x_line_mask << 40) | (x_line_mask << 48) | (x_line_mask << 56));
				uint64_t y_mask = ~(0xfffffffffffffffful & ((1ul << ((shift.y) * 8)) - 1));

				u64vec4 b = u64vec4(b_fragment_map[findex.x], b_fragment_map[findex.y], b_fragment_map[findex.z], b_fragment_map[findex.w]);
				b &= u64vec4(x_mask & y_mask, x_mask & ~y_mask, ~x_mask & y_mask, ~x_mask & ~y_mask);

				ivec4 rs = shift.yyyy*ivec4(8,0,8,0) + shift.xxxx*ivec4(1,1,0,0);
				ivec4 ls = (8-shift.yyyy)*ivec4(0,8,0,8) + (8-shift.xxxx)*ivec4(0,0,1,1);
				b >>= rs;
				b <<= ls;

				fragment_map = b.x|b.y|b.z|b.w;

				u64vec4 dead = u64vec4(is_alive) & b;
				dead <<= rs;
				dead >>= ls;
				(dead.x != 0) ? (b_emission_occlusion[findex.x] |= dead.x) : 0;
				(dead.y != 0) ? (b_emission_occlusion[findex.y] |= dead.y) : 0;
				(dead.z != 0) ? (b_emission_occlusion[findex.z] |= dead.z) : 0;
				(dead.w != 0) ? (b_emission_occlusion[findex.w] |= dead.w) : 0;
			}

			is_alive &= ~fragment_map;
			if(is_alive == uint64_t(0))
			{ 
				break;
			}
		}
	}

}
