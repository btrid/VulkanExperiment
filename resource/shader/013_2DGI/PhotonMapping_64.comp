#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_PM 0
#define USE_PM_RENDER 1
#include "PM.glsl"


layout(push_constant) uniform BounceInfo
{
	int bounce_count;
	int store_photon_index;
} constant;
#define u16_max (0xffff)
#define fragment_state_non (0)
#define fragment_state_wall (1)
#define fragment_state_light (2)
#define fragment_state_bounce (3)
#define fragment_state_bounce_hit (4)

layout (local_size_x = 32, local_size_y = 32) in;
void main()
{
	const vec2 pixel_size = vec2(1., 1.);
	const vec2 subpixel = pixel_size.xy*(1<<constant.bounce_count);

	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);
	const ivec2 bounce_reso = ivec2(u_pm_info.m_resolution.xy)>>constant.bounce_count;
	const ivec2 pixel = 8*ivec2(gl_GlobalInvocationID.xy)<<constant.bounce_count;
	int fragment_state = fragment_state_non;
	vec3 albedo = vec3(0.);
	vec3 illuminance = vec3(0.);
	{
		ivec4 fragment_index = ivec4(gl_GlobalInvocationID.xy/8, gl_GlobalInvocationID.xy%8);
		ivec2 fragment_index_1d = fragment_index.xz + fragment_index.yw*ivec2(reso.z>>constant.bounce_count, 8);
		int offset = getFragmentMapHierarchyOffset(constant.bounce_count);
		uint64_t fragment_map = b_fragment_map[fragment_index_1d.x + offset];
		uint64_t bit = 1ul<<fragment_index_1d.y;

		fragment_state = ((fragment_map & bit) != 0) ? fragment_state_wall : fragment_state_non;
		albedo = (fragment_state == fragment_state_wall) ? b_fragment[pixel.x + pixel.y * reso.x].albedo.xyz : vec3(0., 0., 1.);

	}

	b_emission_reached[gl_GlobalInvocationID.x+gl_GlobalInvocationID.y*reso.z] = uint64_t(0);

	const ivec2 tile_index_2d = pixel / ivec2(u_pm_info.m_emission_tile_size.xy);
	const int tile_index = int(tile_index_2d.x + tile_index_2d.y*u_pm_info.m_emission_tile_num.x);
	for(int i = b_emission_tile_linkhead[tile_index]; i != -1; i= b_emission_tile_linklist[i].next)
	{
		uint64_t is_alive = uint64_t(-1);
		uint64_t is_arrive = 0;
		vec2 end = pixel;
		vec2 start;
		vec4 radiance;

		Emission light;
		{
			int emission_index = b_emission_tile_linklist[i].target;
			int eoffset = u_pm_info.m_emission_buffer_offset[constant.bounce_count];
			light = b_emission[emission_index+eoffset];
			radiance = light.emission;
			ivec2 e_index_2d = ivec2(emission_index%bounce_reso.x, emission_index/bounce_reso.x);
			start = vec2(e_index_2d<<constant.bounce_count);
		}
		ivec2 iend = ivec2(end+0.5);
		ivec2 istart = ivec2(start+0.5);
		ivec2 idir = iend - istart;
		if(all(equal(idir, ivec2(0))))
		{
			// ライト自身
//			fragment_state = fragment_state_light;
//			illuminance += albedo*radiance.xyz;
//			continue;
		}

		const vec2 diff = (end - start);
		const float ray_dist = length(diff.xy);
//		vec3 illumi = radiance.xyz / (1.+ray_dist*ray_dist);
		vec3 illumi = radiance.xyz / (1.+ray_dist);
//		vec3 illumi = radiance.xyz;
		if(dot(illumi, illumi) <= FLT_EPSIRON){
			// 影響範囲外
//			continue;
		}

		vec4 l_dir = rotate2(light.dir.xx + vec2(-light.angle, light.angle));
		vec3 a = cross(vec3(l_dir.xy, 0.), vec3(diff, 0.));
		vec3 b = cross(vec3(l_dir.zw, 0.), vec3(diff, 0.));
		if(light.angle>=0. && (a.z > 0. || b.z < 0.))
		{
			// spotlight影響範囲外
//			continue;
		}

		int goal_index = abs(idir.x) >= abs(idir.y) ? 0: 1;

		vec2 subpos = sign(idir.xy)*0.5+0.5;
		start = start + subpixel*(subpos.xy);
		end = end + subpixel*(1.-subpos.xy);


		vec2 dir = normalize(end - start);
		dir *= abs(dir.x) >= abs(dir.y) ? abs(1./dir.x) : abs(1./dir.y);
		vec2 inv_dir = abs(1./dir);

		vec2 pos = start;
		ivec2 map_index = ivec2(pos / pixel_size.xy);

		const ivec2 map_index_origin = ivec2(greaterThanEqual(idir, ivec2(0)));

		for(int i = 0; i <50000; i++)
		{
			{
				int hierarchy=0;
				for(; hierarchy>constant.bounce_count; hierarchy--)
				{
					ivec2 findex2d = map_index>>hierarchy;
					int findex = findex2d.x + findex2d.y*(reso.x>>hierarchy);
					int offset = getFragmentHierarchyOffset(hierarchy);
					if(b_fragment_hierarchy[findex + offset] == 0)
					{
						break;
					}
				}

				ivec2 findex2d = map_index>>hierarchy;
				int findex = findex2d.x + findex2d.y*(reso.x>>hierarchy);
				int offset = getFragmentHierarchyOffset(hierarchy);

				ivec2 cell_origin = map_index_origin<<hierarchy;
				ivec2 map_index_sub = map_index - (findex2d<<hierarchy);
				vec2 cell_p = abs(cell_origin - (map_index_sub+fract(pos))) + pixel_size*0.5;
				vec2 axis = abs(cell_p*inv_dir);
				pos = min(axis.x, axis.y)*dir + pos;
				map_index = ivec2(pos);
			}

			// 終了判定
			if(abs(idir[goal_index]) - abs(map_index[goal_index]-istart[goal_index]) < 1<<constant.bounce_count)
			{
				// 距離を超えたら光がフラグメントにヒット
				illuminance += albedo*illumi;
				if(fragment_state == fragment_state_wall){
					fragment_state = fragment_state_bounce;
				}
				is_arrive = 0xfffffffffffffffful;
				break;
			}
			// hit確認
			{
				ivec2 map_index_hie = map_index>>constant.bounce_count;
				ivec4 fragment_index = ivec4(map_index_hie/8, map_index_hie%8);
				ivec2 shift = fragment_index.zw;

//				ivec4 findex = fragment_index.xxxx + ivec4(-1,-1,0,0) + (fragment_index.yyyy + ivec4(-1,0,-1,0))*(reso.zzzz>>constant.bounce_count);
				ivec4 findex = fragment_index.xxxx + ivec4(0,0,1,1) + (fragment_index.yyyy + ivec4(0,1,0,1))*(reso.zzzz>>constant.bounce_count);
				uint64_t b0 = b_fragment_map[findex.x];
				uint64_t b1 = b_fragment_map[findex.y];
				uint64_t b2 = b_fragment_map[findex.z];
				uint64_t b3 = b_fragment_map[findex.w];

				uint64_t fragment_map;
				{
					uint64_t x_line_mask2 = 0xfful & ((1ul << (shift.x)) - 1ul);
					uint64_t x_mask_inv2 = x_line_mask2 | (x_line_mask2 << 8) | (x_line_mask2 << 16) | (x_line_mask2 << 24) | (x_line_mask2 << 32) | (x_line_mask2 << 40) | (x_line_mask2 << 48) | (x_line_mask2 << 56);
					uint64_t y_mask_inv2 = 0xfffffffffffffffful & ((1ul << ((shift.y) * 8)) - 1);
					uint64_t x_mask2 = ~x_mask_inv2;
					uint64_t y_mask2 = ~y_mask_inv2;

					b0 &= x_mask2 & y_mask2;
					b1 &= x_mask2 & ~y_mask2;
					b2 &= ~x_mask2 & y_mask2;
					b3 &= ~x_mask2 & ~y_mask2;

//					atomicOr(b_emission_occlusion[findex.x], is_alive & b0);


					b0 >>= shift.y*8;
					b0 >>= shift.x;

					b1 <<= (8-shift.y)*8;
					b1 >>= shift.x;

					b2 >>= shift.y*8;
					b2 <<= (8-shift.x);

					b3 <<= (8-shift.y)*8;
					b3 <<= (8-shift.x);
					fragment_map = (b0)|(b1)|(b2)|(b3);
				}

				is_alive &= ~fragment_map;
				if(is_alive == uint64_t(0))
				{ 
					break;
				}
			}
		}

		b_emission_reached[gl_GlobalInvocationID.x+gl_GlobalInvocationID.y*reso.z] = is_alive;// | is_arrive;
	}

}
