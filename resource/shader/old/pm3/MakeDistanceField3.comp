#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_ARB_gpu_shader_int64 : require

#include <btrlib/ConvertDimension.glsl>
#include <btrlib/Common.glsl>
#include <btrlib/Math.glsl>

#define USE_PM 0
#include <PM.glsl>

layout (local_size_x = 8, local_size_y = 8) in;

shared uint64_t s_map;
shared SDFWork s_work;
shared uint s_min_dist;
void main()
{
	if(gl_LocalInvocationIndex == 0)
	{
		s_work = b_sdf_work[gl_WorkGroupID.x + u_pm_info.m_sdf_work_num];
		s_map = b_fragment_map[s_work.fragment_idx];
		s_min_dist = -1;
	}
	barrier();
	memoryBarrierShared();

	const ivec4 reso = ivec4(u_pm_info.m_resolution.xy, u_pm_info.m_resolution.xy/8);

	uvec2 map_index = uvec2(s_work.map_index % reso.x, s_work.map_index / reso.x);
	uvec2 target_index = uvec2(s_work.fragment_idx % reso.z, s_work.fragment_idx / reso.z);
	target_index = target_index * 8 + gl_LocalInvocationID.xy;
	uint dist = uint(distance(map_index+0.5, target_index+0.5) * 1000.);
	dist = (s_map & (1ul<<gl_LocalInvocationIndex)) == 0 ? -1 : dist; // 壁ではない
	atomicMin(s_min_dist, dist);

	barrier();
	memoryBarrierShared();

	if(gl_LocalInvocationIndex == 0)
	{
		atomicMin(b_sdf[s_work.map_index], s_min_dist);
	}
	
}

