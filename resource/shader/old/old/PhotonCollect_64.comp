#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_PM 1
#include "GI2D.glsl"


layout (local_size_x = 32, local_size_y = 32) in;


void main()
{
	const ivec4 reso = ivec4(u_gi2d_info.m_resolution.xy, u_gi2d_info.m_resolution.xy/8);

	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	ivec4 fragment_index = ivec4(pixel/8, pixel%8);

#if 1
	ivec4 offset = ivec4(-1,0,-1,0) + ivec4(greaterThanEqual(gl_LocalInvocationID.xxyy%8, uvec4(4)));
	ivec2 shift = (ivec2(4) + ivec2(gl_LocalInvocationID.xy)) % ivec2(8);
	uint64_t bit_mask = 1ul << (8*4+4);
#else
	ivec4 offset = ivec4(0);
	ivec2 shift = ivec2(0);
	uint64_t bit_mask = 1ul << (gl_LocalInvocationIndex%64);
#endif
	ivec4 findex = fragment_index.xxxx + offset.xxyy + (fragment_index.yyyy + offset.zwzw)*(reso.zzzz);

	uint64_t x_line_mask = 0xfful & ((1ul << (shift.x)) - 1ul);
	uint64_t x_mask = ~(x_line_mask | (x_line_mask << 8) | (x_line_mask << 16) | (x_line_mask << 24) | (x_line_mask << 32) | (x_line_mask << 40) | (x_line_mask << 48) | (x_line_mask << 56));
	uint64_t y_mask = ~(0xfffffffffffffffful & ((1ul << ((shift.y) * 8)) - 1));
	u64vec4 map_mask = u64vec4(x_mask & y_mask, x_mask & ~y_mask, ~x_mask & y_mask, ~x_mask & ~y_mask);
	ivec4 right_shift = shift.yyyy*ivec4(8,0,8,0) + shift.xxxx*ivec4(1,1,0,0);
	ivec4 left_shift = (8-shift.yyyy)*ivec4(0,8,0,8) + (8-shift.xxxx)*ivec4(0,0,1,1);

	u64vec4 bit_mask4 = u64vec4(bit_mask);

	uint64_t f0 = b_fragment_map[findex.x];
	uint64_t f1 = b_fragment_map[findex.y];
	uint64_t f2 = b_fragment_map[findex.z];
	uint64_t f3 = b_fragment_map[findex.w];
	u64vec4 f = u64vec4(f0, f1, f2, f3);
	f &= u64vec4(x_mask & y_mask, x_mask & ~y_mask, ~x_mask & y_mask, ~x_mask & ~y_mask);
	f >>= right_shift;
	f <<= left_shift;
	uint64_t fragment_map = f.x|f.y|f.z|f.w;

	uint64_t occlude_map;
	{

		uint64_t o0 = b_emission_occlusion[findex.x];
		uint64_t o1 = b_emission_occlusion[findex.y];
		uint64_t o2 = b_emission_occlusion[findex.z];
		uint64_t o3 = b_emission_occlusion[findex.w];
		u64vec4 o = u64vec4(o0, o1, o2, o3);

		o &= map_mask;
		o >>= right_shift;
		o <<= left_shift;
		occlude_map = o.x|o.y|o.z|o.w;
	}
	uint64_t occlude_num = popcnt(occlude_map);

	bool is_block = (fragment_map & bit_mask) != 0;
	bool is_occlude = (occlude_map & bit_mask) != 0;

	vec3 illuminance = vec3(0.);
	illuminance.xyz = is_block ? vec3(0., 0., 1.) : illuminance.xyz;
	illuminance.xyz = is_occlude ? vec3(1., 0., 0.) : illuminance.xyz;


	imageStore(t_color, pixel, vec4(illuminance.xyz, 1.));
}
