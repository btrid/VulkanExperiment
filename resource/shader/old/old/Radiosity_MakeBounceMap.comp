#version 450
#extension GL_GOOGLE_include_directive : require

#include "btrlib/ConvertDimension.glsl"
#include "btrlib/Common.glsl"
#include "btrlib/Math.glsl"

#define USE_GI2D 0
#define USE_GI2D_Radiosity 1
#include "GI2D.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

shared uint s_bit[16][2];
void main()
{

	uvec2 global = gl_GlobalInvocationID.xy/8; 
	uint store = global.x + global.y*u_gi2d_info.m_resolution.x/8;

	uvec2 sub = gl_GlobalInvocationID.xy%8; 
	uint shift = sub.x + sub.y*8;
	bool is_fragment = (b_fragment_map[store] & (1ul<<shift)) != 0ul;

	bool is_bounce = is_fragment && (b_radiance[getMemoryOrder(ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y))] != 0);

	// fragment map
	{
		uvec2 local = gl_LocalInvocationID.xy / 8;
		uint index = local.x+local.y*4;
		uvec2 localsub = gl_LocalInvocationID.xy % 8;
		if(all(equal(localsub, uvec2(0))))
		{
			s_bit[index][0] = 0;
			s_bit[index][1] = 0;
		}
		barrier();
		memoryBarrierShared();

		uint bit_offset = localsub.x + localsub.y*8;
		uint hilow = bit_offset/32;
		uint offset = bit_offset%32;
		is_bounce ? atomicOr(s_bit[index][hilow], 1<<offset) : 0;

		barrier();
		memoryBarrierShared();

		if(all(equal(localsub, uvec2(0))))
		{
			uint64_t bit =  uint64_t(s_bit[index][1]) << 32 | s_bit[index][0];
			b_bounce_map[store] = bit;
		}

	}
}

