#version 460
#extension GL_GOOGLE_include_directive : require

#include "Sky.glsl"

layout (local_size_x = 128) in;

layout(push_constant) uniform Input
{
	vec3 window;
} constant;


void main()
{

	vec3 CamPos = vec3(0., 1., 0.);
	vec3 CamDir = uLightRay;

	// カメラ位置の作成
	{
		uvec3 reso = gl_NumWorkGroups * gl_WorkGroupSize;
		vec2 ndc = ((vec2(gl_GlobalInvocationID.xy) + 0.5) / vec2(reso.xy)) * 2. -1.;
		CamPos = u_cloud_inner.www * vec3(ndc.x, 0., ndc.y) + (-CamDir * u_cloud_outer.www * 1.5);
	}

	// find nearest planet surface point
	vec4 dist = vec4(-1.);
	if(intersectRayAtom(CamPos, CamDir, u_cloud_inner.xyz, vec2(u_cloud_inner.w, u_cloud_outer.w), dist))
	{
		int count = 0;
		vec2 ray_segment[2];
		if(dist.y>0.)
		{
			// 雲の上から雲を見る
			ray_segment[count] = vec2(max(dist.x, 0.), dist.y-max(dist.x, 0.));
			count++;
		}

		uint sampleCount = 16;
		float transmittance = 1.;
		for(int i = 0; i <count; i++)
		{
			float step = ray_segment[i].y / float(sampleCount);
			vec3 pos = CamPos + CamDir * (ray_segment[i].x + 0.5);
			
			for(uint i = 0u; i < sampleCount; ++i)
			{
				float height_frac = heightFraction(pos);
				vec3 weather_data = sampleWeather(pos);
				float cloudDensity = sampleCloudDensity(pos, weather_data, height_frac, 0.);
				transmittance *= exp(-cloudDensity*getPrecipitation(weather_data));

				vec3 p = vec3(pos.x, height_frac, pos.z) * vec3(u_mapping, 1., u_mapping) + vec3(0.5, 0., 0.5);// UV[0~1]
				
				imageStore(i_shadow_map, ivec3(p*imageSize(i_shadow_map)), ivec4(transmittance*255.));



				pos += step;
			}
		}
	}

}