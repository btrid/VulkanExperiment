#version 460
#extension GL_GOOGLE_include_directive : require

#include "Sky.glsl"
layout (local_size_x = 32, local_size_y = 32) in;

shared vec4 s_begin_step[32+1][32+1];
shared f16vec3 s_density[32+1][32+1];

const vec3 f = vec3(0., -1., 0.);
const vec3 u = vec3(0., 0., 1.); 
const vec3 s = vec3(1., 0., 0.);

void store(int y)
{
	ivec2 local = ivec2(gl_LocalInvocationID.xy);
	vec4 pos_step = s_begin_step[local.y][local.x];

	vec3 p = pos_step.xyz + f * pos_step.w*y;

	float height_frac = heightFraction(p);
	vec3 weather_data = sampleWeather(p);
	float d = cloud_density(p, weather_data, height_frac, 0., true);

	if(pos_step.w<0.)
	{
		// cloudにヒットしない
		d=0.;
	}

	s_density[local.y][local.x][(y+1)%3] = float16_t(d);

}
void main()
{

	ivec3 reso = imageSize(i_along_density_map);
	int sampleCount = reso.y;

	ivec2 global = ivec2(gl_WorkGroupID.xy*(gl_WorkGroupSize.xy-2));
	ivec2 local = ivec2(gl_LocalInvocationID.xy);
	ivec2 index = global + local;
	{
		{
			vec2 ndc = ((vec2(global + local)-0.5) / vec2(reso.xz)) * 2. -1.;
			ndc /= u_planet.m_cloud_area.yy;
			vec3 CamPos = s*ndc.x + u*ndc.y -f*3000. + u_planet.m_pos.xyz;

			vec4 rays;
			int count = intersectRayAtomEx(CamPos, f, u_planet.m_pos.xyz, u_planet.m_cloud_area, -1, rays);

			if(count==0){s_begin_step[local.y][local.x]=vec4(-1.); }
			else
			{
				float step = (rays[1] - rays[0]) / float(sampleCount);
				vec3 pos = CamPos + f * (rays[0]+step*0.5);
				s_begin_step[local.y][local.x] = vec4(pos, step);
			}


		}
	}

	memoryBarrierShared();
	barrier();

	for(int y = -1; y<=0; y++)
	{
		store(y);
	}
	memoryBarrierShared();
	barrier();

	float density = 0.;
	{
		vec4 pos_step = s_begin_step[local.y][local.x];
		vec3 pos = pos_step.xyz;
		float step = pos_step.w;

		for(int s = 0; s < sampleCount; s++)
		{
			store(s+1);
			memoryBarrierShared();
			barrier();

			if(any(greaterThanEqual(local, gl_WorkGroupSize.xy-2))){ continue; }

			float density = 0.;
			density += dot(s_density[local.y+0][local.x+0], f16vec3(1.))+dot(s_density[local.y+0][local.x+1], f16vec3(1.,1.,1.))+dot(s_density[local.y+0][local.x+2], f16vec3(1.));
			density += dot(s_density[local.y+1][local.x+0], f16vec3(1.))+dot(s_density[local.y+1][local.x+1], f16vec3(1.,0.,1.))+dot(s_density[local.y+1][local.x+2], f16vec3(1.));
			density += dot(s_density[local.y+2][local.x+0], f16vec3(1.))+dot(s_density[local.y+2][local.x+1], f16vec3(1.,1.,1.))+dot(s_density[local.y+2][local.x+2], f16vec3(1.));
			imageStore(i_along_density_map, ivec3(index.x, s, index.y), ivec4(exp(-density*0.65)*32767.));

			pos = fma(f, vec3(step), pos);
		}
	}

}