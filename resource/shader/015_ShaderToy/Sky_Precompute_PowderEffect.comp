#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_vote: enable

#include "Sky.glsl"
layout (local_size_x = 32, local_size_y = 32) in;

//shared vec4 s_begin_step[32+1][32+1];
shared f16vec3 s_density[32+1][32+1];
vec4 g_begin_step;
vec3 f = vec3(0., -1., 0.);
vec3 u = vec3(0., 0., 1.); 
vec3 s = vec3(1., 0., 0.);

void store(int y)
{
	float d = 0.;
	if(g_begin_step.w>0.)
	{
		vec3 p = g_begin_step.xyz + f * g_begin_step.w*y;
		float height_frac = heightFraction(p);
		vec3 weather_data = sampleWeather(p);

		d = cloud_density(p, weather_data, height_frac, 0., true);
	}
	s_density[gl_LocalInvocationID.y][gl_LocalInvocationID.x][(y+1)%3] = float16_t(d);

}
void main()
{
	s_density[gl_LocalInvocationID.y][gl_LocalInvocationID.x] = f16vec3(0);

	ivec3 reso = imageSize(i_along_density_map);
	int sampleCount = reso.z;

	f = uLightRay;
	u = vec3(0., 0., 1.); 
	s = cross(u, f);
	s = dot(s, s) < 0.00001 ? vec3(0., 1., 0.) : normalize(s);
	u = normalize(cross(f, s));


	ivec2 global = ivec2(gl_WorkGroupID.xy*(gl_WorkGroupSize.xy-2));
	ivec2 local = ivec2(gl_LocalInvocationID.xy);
	ivec2 index = global + local;
	{
		vec2 ndc = ((vec2(global + local)-0.5) / vec2(reso.xy)) * 2. -1.;
		ndc *= u_planet.m_cloud_area.yy;
		vec3 CamPos = s*ndc.x + u*ndc.y -f*(u_planet.m_cloud_area.y+1.) + u_planet.m_pos.xyz;

		vec4 rays;
		int count = intersectRayAtomEx(CamPos, f, u_planet.m_pos.xyz, u_planet.m_cloud_area, -1, rays);

		if(subgroupAll(count==0)){ return; }
		if(count==0)
		{
			return;
		}
		else
		{
			float step = (rays[1] - rays[0]) / float(sampleCount);
			vec3 pos = CamPos + f * (rays[0]+step*0.5);
			g_begin_step = vec4(pos, step);
		}

	}

	for(int y = -1; y<=0; y++)
	{
		store(y);
	}

	for(int s = 0; s < sampleCount; s++)
	{
		store(s+1);
		memoryBarrierShared();
		barrier();

		if(any(greaterThanEqual(local, gl_WorkGroupSize.xy-2))){ continue; }

		float density = 0.;
//		density += dot(s_density[local.y+0][local.x+0], f16vec3(1.))+dot(s_density[local.y+0][local.x+1], f16vec3(1.,1.,1.))+dot(s_density[local.y+0][local.x+2], f16vec3(1.));
//		density += dot(s_density[local.y+1][local.x+0], f16vec3(0.8))+dot(s_density[local.y+1][local.x+1], f16vec3(1.))+dot(s_density[local.y+1][local.x+2], f16vec3(0.8));
		density += dot(s_density[local.y+2][local.x+0], f16vec3(0.5))+dot(s_density[local.y+2][local.x+1], f16vec3(0.7))+dot(s_density[local.y+2][local.x+2], f16vec3(0.5));
		imageStore(i_along_density_map, ivec3(index.x, index.y, s), ivec4(exp(-density)*65535.));

	}

}