#version 460
#extension GL_GOOGLE_include_directive : require

#include "Sky.glsl"

// 雲の光の吸収量
#define ABSORPTION		0.06
vec3 g_noise_kernel[3*3*3];
float g_phase_factor;

layout (local_size_x = 32, local_size_y = 32) in;

float worley_noise(in vec3 invocation, in int lod)
{
	invocation*=20.;
	float value = 0.;
	float total = 0.;
	for(int i = 0; i < 1; i++)
	{
//		invocation=-invocation;
		ivec3 tile_size = max(ivec3(16)>>i, ivec3(1));
		ivec3 tile_id = ivec3(floor(invocation/vec3(tile_size)));
		mediump vec3 pos = mod(invocation, vec3(tile_size));


		mediump float _radius = float(tile_size.x);
		mediump float v = 0.;

#define cell_size 1
		for(int z = -cell_size; z <= cell_size; z++)
		for(int y = -cell_size; y <= cell_size; y++)
		for(int x = -cell_size; x <= cell_size; x++)
		{
			ivec3 tid = ivec3(tile_id) + ivec3(x, y, z);
			for(int n = 0; n < 2; n++)
			{
				mediump vec3 p = _wn_rand(ivec4(tid, n))*vec3(tile_size) + vec3(x, y, z)*vec3(tile_size);
				v = max(v, 1.-min(distance(pos, p) / _radius, 1.));
			}
		}
		value = value*2.+v;
		total = total*2.+1.;
//		if(value/total<0.35){ return 0.; }
	}
	return value / total;
}

float worley_noise2(in vec3 invocation, in int lod)
{
	invocation*=20.;
	float16_t value = float16_t(0.);
	float16_t total = float16_t(0.);
	for(int i = 0; i < 1; i++)
	{
		ivec3 tile_size = max(ivec3(64)>>i, ivec3(1));
		ivec3 tile_id = ivec3(floor(invocation/vec3(tile_size)));
		f16vec3 pos = f16vec3(mod(invocation, vec3(tile_size)));

		float16_t _radius = float16_t(tile_size.x * 0.5);
		ivec3 offset = -ivec3(1.hf-step(_radius, pos));

		float16_t v = 0.hf;

		for(int z=0; z<2; z++)
		for(int y=0; y<2; y++)
		for(int x=0; x<2; x++)
		{
			ivec3 tid = tile_id + ivec3(x, y, z) + offset;
			for(int n = 0; n < 4; n++)
			{
				f16vec3 p = f16vec3(_wn_rand(ivec4(tid, n)))*f16vec3(tile_size) + (f16vec3(x, y, z) + f16vec3(offset))*f16vec3(tile_size);
				v = max(v, 1.hf-min(distance(pos, p) / _radius, 1.hf));
			}
		}
		value = value*2.hf+v;
		total = total*2.hf+1.hf;
	}
	return value / total;
}

float cloud_density(in vec3 pos)
{
	float t = (distance(pos,u_planet.m_pos)-u_planet.m_cloud_area.x)/(u_planet.m_cloud_area.y-u_planet.m_cloud_area.x);
	if(t<=0.||t>=1.){ return 0.; }

	int lod = 1;
	bool detail = false;

	float density = worley_noise2(pos*vec3(0.03), 1);
//	float density = value_noise(pos*vec3(0.1), 4);
//	if(detail){ density = density + fBM(pos*vec3(0.1), 1) * 0.2*t;}
//	density *= band2(0.0, 0.2, 0.77, 1., t);

	float coverage = 0.44;
	float alpha = 0.;
	density = smoothstep(coverage, coverage+alpha, density);


	return density;
}

float cloud_lighting(in vec3 pos)
{
	vec4 rays;
	if(intersectRayAtmosphere(pos, -uLightRay, u_planet.m_pos.xyz, u_planet.m_cloud_area.xx, -1., rays) != 0)
	{
		// 星の影
		return 0.;
	}
	int count = intersectRayAtmosphere(pos, -uLightRay, u_planet.m_pos.xyz, u_planet.m_cloud_area, -1., rays);


	int step_num = 8;
	float density = 0.;
	for(int i = 0; i <count; i++)
	{
		float ray_step = (rays[2*i+1]-rays[2*i]) / float(step_num);
		vec3 begin = pos + (rays[2*i]+ray_step*0.5) * -uLightRay;
		for(int s = 0; s < step_num; s++)
		{
			vec3 p = begin + -uLightRay*ray_step*float(s); 
			density = density + cloud_density(p)*ray_step;
		}
		break;
	}

	return exp(-density*ABSORPTION);

}


float PowderSugar(in vec3 pos, float ray_step)
{
	float density = 0.;
	for(int i = 0; i < g_noise_kernel.length(); i++)
	{
		vec3 p = pos + g_noise_kernel[i]*/*ray_step**/0.5;
		float d = cloud_density(p);
		density += d;
	}
	return (density > float(g_noise_kernel.length())*0.001)?1.:0.;
	return (1.-exp(-density*0.02));
}
vec4 cloud(in vec3 rayPos, in vec3 rayDir, float depth)
{
	vec4 rays;
	int count = intersectRayAtmosphere(rayPos, rayDir, u_planet.m_pos, u_planet.m_cloud_area, depth, rays);

	int step_num = 32;
	float transmittance = 1.;
	vec3 color = vec3(0.);
	for(int i = 0; i <count; i++)
	{
		float ray_step = (rays[i*2+1] - rays[i*2]) / float(step_num);
		vec3 begin = rayPos + rayDir * (rays[i*2]+ray_step*0.5);
		for(int step = 0; step < step_num; step++)
		{
			vec3 p = begin + rayDir * float(step) * ray_step;
			float d = cloud_density(p) * ray_step;
			if(d<=0.){continue;}
			transmittance *= exp(-d * ABSORPTION);

			float e = 0.2 * transmittance * d;
			e *= cloud_lighting(p);
	//		e *= PowderSugar(pos, ray_step);

			color += e;
			

			if (transmittance < 0.01) { i = count; break; }
		}
		break;

	}
	return vec4(color, min(1-transmittance, 1.));
}

void main()
{
	vec3 CamPos = vec3(0., 1., 0.);
//	vec3 CamDir = normalize(vec3(1.5, 1.7, 1.5));
//	CamDir = -uLightRay;

	float s = sin(constant.window.x*0.4);
	float c = cos(constant.window.x*0.4);
	vec3 CamDir = normalize(vec3(s, 0.5, c));
	{

		{
			vec3 front = CamDir;
			vec3 up = vec3(0., 1., 0.);
			vec3 side = cross(front, normalize(up));
			side = dot(side, side) < 0.000001 ? vec3(1., 0., 0.) : normalize(side);
			up = normalize(cross(side, front));

			for(int z=0; z<3; z++)
			for(int y=0; y<3; y++)
			for(int x=0; x<3; x++)
			{
	//			g_noise_kernel[z*9+y*3+x] = normalize(front*(float(z-1)+0.1) + side*float(x-1) + up*float(y-1));
				g_noise_kernel[z*9+y*3+x] = (front*(float(z-1)+0.1) + side*float(x-1) + up*float(y-1));
			}
		}

			g_phase_factor = henyeyGreenstein(dot(-uLightRay, CamDir), 0.5);

	}
	// カメラレイの作成
	{
		uvec3 reso = gl_NumWorkGroups * gl_WorkGroupSize;
		vec2 ndc = (vec2(gl_GlobalInvocationID.xy) / vec2(reso.xy)) * 2. -1.;
		vec3 up = vec3(0., 1., 0.); 
		vec3 side = normalize(cross(CamDir, normalize(up)));
		up = normalize(cross(CamDir, side));

		float CamFov = (radians(45.0));
		vec2 aspect = vec2(float(reso.x) / float(reso.y), 1);
		CamDir = normalize(side*ndc.x + up*ndc.y + CamDir);
	}

	vec3 sky_color = mix(vec3(.0, 0.1, 0.4), vec3(0.3, 0.6, 0.8), 1.0 - CamDir.y);
	sky_color = mix(sky_color, uLightColor, smoothstep(0.999, 1.00, dot(uLightRay, -CamDir)));

	// 地面判定
	float distance_land = intersectRaySphere(CamPos, CamDir, vec4(u_planet.m_pos, u_planet.m_radius));
	if(distance_land >= 0.)
	{
		// 地面に当たってる
		vec3 pos = CamPos + CamDir * distance_land;
		vec2 pos_i = floor(pos * 0.5).xz;
		float p = float(mod(pos_i.x + pos_i.y, 2.));
		sky_color = mix(vec3(.6, .6, .6), vec3(.75, .75, .75), p);

		// shadow
/*		if(true)
		{
			#define SHADOW_RAY_STEP 12
			#define SHADOW_RAY_LENGTH 5.
			float d1 = intersectRaySphere(pos, uLightRay, u_cloud_inner);
			float d2 = intersectRaySphere(pos, uLightRay, u_cloud_outer);
			int step_num = min(int((max(d2, 0.)-max(d1, 0.)) / float(SHADOW_RAY_LENGTH)), SHADOW_RAY_STEP);
			pos = pos + uLightRay * (d1 + SHADOW_RAY_LENGTH*0.5);
			vec3 ray = uLightRay/uLightRay.y;

			float transmittance = 1.;
			for(int step = 0; step < step_num; step++)
			{
				float density = cloud_density(pos);

				float t = exp(-density * ABSORPTION);
				transmittance *= t;
				if (transmittance < 0.01) break;

				pos += ray * SHADOW_RAY_LENGTH; 
			}
			sky_color = mix(sky_color, vec3(0.), 1.-transmittance);
		}
*/		
	}

	vec4 color = cloud(CamPos, CamDir, distance_land);

	color.xyz = mix(sky_color, color.xyz/(color.a+0.001), color.a);
	{
		float exposure = 1.;
		color.xyz = vec3(1.0) - exp(-exposure * color.xyz);
	}

	imageStore(i_render_map, ivec2(gl_GlobalInvocationID.xy), vec4(color.xyz, 1.));

}