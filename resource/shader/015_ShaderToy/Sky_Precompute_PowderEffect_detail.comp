#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_vote: enable

#include "Sky.glsl"
layout (local_size_x = 32, local_size_y = 32) in;

const int grid_size = 2;
shared float16_t s_density[32+1][32+1];
float16_t g_density[grid_size];
vec4 g_begin_step;
vec3 f = vec3(0., -1., 0.);
vec3 u = vec3(0., 0., 1.); 
vec3 s = vec3(1., 0., 0.);

void store(int y)
{
	vec4 d[2];
	if(g_begin_step.w>0.)
	{
		vec3 pos = g_begin_step.xyz + f * g_begin_step.w*y;
		for(int z=0;z<2;z++)
		for(int y=0;y<2;y++)
		for(int x=0;x<2;x++)
		{
			vec3 p = pos + s*(float(x)*0.33) + u*(float(y)*0.33) -f*(float(z)*0.33);

			float height_frac = heightFraction(p);
			vec3 weather_data = sampleWeather(p);

			d[z][y*2+x] = cloud_density(p, weather_data, height_frac, 0., true);
		}
	}
	g_density[(y+1)%grid_size] = float16_t(dot(d[0], vec4(0.1)) + dot(d[1], vec4(0.1)));
}

void calc()
{
	float16_t d = 0.hf;
	for(int i = 0; i < grid_size; i++)
	{
		d += g_density[i];
	}
	s_density[gl_LocalInvocationID.y][gl_LocalInvocationID.x] = d;
}
void main()
{
	s_density[gl_LocalInvocationID.y][gl_LocalInvocationID.x] = 0.hf;

	ivec3 reso = imageSize(i_along_density_map);
	int sampleCount = reso.z;

	f = uLightRay;
	u = vec3(0., 0., 1.); 
	s = cross(u, f);
	s = dot(s, s) < 0.00001 ? vec3(0., 1., 0.) : normalize(s);
	u = normalize(cross(f, s));


	ivec2 global = ivec2(gl_WorkGroupID.xy*(gl_WorkGroupSize.xy-grid_size*2));
	ivec2 local = ivec2(gl_LocalInvocationID.xy);
	ivec2 index = global + local;
	{
		vec2 ndc = ((vec2(global + local -grid_size)) / vec2(reso.xy)) * 2. -1.;
		ndc *= u_planet.m_cloud_area.yy;
		vec3 CamPos = s*ndc.x + u*ndc.y -f*(u_planet.m_cloud_area.y+1.) + u_planet.m_pos.xyz;

		vec4 rays;
		int count = intersectRayAtomEx(CamPos, f, u_planet.m_pos.xyz, u_planet.m_cloud_area, -1, rays);

		if(subgroupAll(count==0)){ return; }
		if(count==0)
		{
			return;
		}
		else
		{
			float step = (rays[1] - rays[0]) / float(sampleCount);
			vec3 pos = CamPos + f * (rays[0]+step*0.5);
			g_begin_step = vec4(pos, step);
		}

	}

	for(int y = -grid_size; y<=grid_size-1; y++)
	{
		store(y);
	}

	for(int s = 0; s < sampleCount; s++)
	{
		store(s+grid_size);
		calc();
		memoryBarrierShared();
		barrier();

		if(any(greaterThanEqual(local, gl_WorkGroupSize.xy-grid_size*2))){ continue; }

		float density = 0.;
		for(int y=-grid_size; y<=grid_size; y++)
		for(int x=-grid_size; x<=grid_size; x++)
		{
			density += s_density[local.y+grid_size+y][local.x+grid_size+x];
		}
		
		imageStore(i_along_density_map, ivec3(index.x, index.y, s), ivec4(exp(-density)*65535.));
//		imageStore(i_along_density_map, ivec3(index.x, index.y, s), ivec4((density > float(grid_size*grid_size)*0.3?1.:0.)*65535.));

	}

}