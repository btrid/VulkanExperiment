#version 460
#extension GL_GOOGLE_include_directive : require

#include "Sky.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

float rand(in vec3 co)
{
	return fract(sin(dot(co, vec3(12.98,78.23, 45.41))) * 43758.5);
}
float noise(in vec3 pos)
{
	vec3 ip = floor(pos);
	vec3 fp = smoothstep(0., 1., fract(pos));
	vec2 offset = vec2(0., 1.);
	vec4 a = vec4(rand(ip+offset.xxx),rand(ip+offset.yxx),rand(ip+offset.xyx),rand(ip+offset.yyx));
	vec4 b = vec4(rand(ip+offset.xxy),rand(ip+offset.yxy),rand(ip+offset.xyy),rand(ip+offset.yyy));
	a = mix(a, b, fp.z);
	a.xy = mix(a.xy, a.zw, fp.y);
	return mix(a.x, a.y, fp.x);
}
float fBM(in vec3 pos, in int octaves)
{
	float total = 0.;
	float value = 0.;
	for(int i = 0; i < octaves; i++)
	{
		pos = pos * 2.571;
		value = value*2. + noise(pos);
		total = total*2. + 1.;
	}

	return value / total;
}

float cloud_density(in vec3 pos, in int lod)
{
	float t = (distance(pos, u_cloud_inner.xyz)-u_cloud_inner.w) * u_cloud_area_inv;
	if(t<=0.||t>=1.){ return 0.; }

	float density = fBM(pos*vec3(0.02),lod) * band2(0., 0.05, 0.75, 1., t);
	float density_detail = fBM(pos*vec3(0.1)+vec3(5000.), lod) * band2(0.2, 0.34, 0.89, 1., t);
	density = density+density_detail*0.1*t;

	float coverage = 0.5;
	float alpha = 0.05;
	density = density * smoothstep(coverage, coverage+alpha, density);

//	density = band(0., 0.5, 1., t) * density;

#define ABSORPTION		0.2
	return density * ABSORPTION;
}

vec3 g_noise_kernel[4];
float g_cam_phase_factor;
float g_light_phase_factor;
vec3 uCamDir;
vec3 uCamPos;
void precompute()
{
	uCamPos = vec3(0., 1., 0.);

	// カメラレイの作成
	{
		float s = sin(constant.window.x*0.2);
		float c = cos(constant.window.x*0.2);
		vec3 CamDir = normalize(vec3(s, 0.5, c));

		uvec3 reso = gl_NumWorkGroups * gl_WorkGroupSize;
		vec2 ndc = (vec2(gl_GlobalInvocationID.xy) / vec2(reso.xy)) * 2. -1.;
		vec3 up = vec3(0., 1., 0.);
		vec3 side = normalize(cross(CamDir, normalize(up)));
		side = dot(side, side) < 0.000001 ? vec3(1., 0., 0.) : normalize(side);
		up = normalize(cross(CamDir, side));

		float CamFov = (radians(45.0));
		vec2 aspect = vec2(float(reso.x) / float(reso.y), 1);
		uCamDir = normalize(side*ndc.x + up*ndc.y + CamDir);
	}

	{
//		uLightRay = normalize(vec3(s, c, 0.1));
		uLightRay = normalize(vec3(0., -1., 12));
		float c = cos(constant.window.z);
		float s = sin(constant.window.z);
		uLightRay = normalize(vec3(s, c, 0.1));	}

	g_cam_phase_factor = henyeyGreenstein(dot(-uLightRay, uCamDir), 0.2);
	g_light_phase_factor = henyeyGreenstein(dot(-uLightRay, -uLightRay), 0.2);

	{
		vec3 up = vec3(0., 1., 0.);
		vec3 side = cross(-uLightRay, normalize(up));
		side = dot(side, side) < 0.000001 ? vec3(1., 0., 0.) : normalize(side);
		up = normalize(cross(side, -uLightRay));

		g_noise_kernel[0] = -uLightRay * 0.5 + side * 0.5 + up * 0.5;
		g_noise_kernel[1] = -uLightRay * 0.5 + side * -0.5 + up * 0.5;
		g_noise_kernel[2] = -uLightRay * 0.5 + side * 0.5 + up * -0.5;
		g_noise_kernel[3] = -uLightRay * 0.5 + side * -0.5 + up * -0.5;
		
	}
}

float light(vec3 pos)
{
	vec4 rays;
	if(intersectRayAtomEx(pos, -uLightRay, u_planet.xyz, vec2(u_planet.w), -1., rays) != 0)
	{
		// 星の影
		return 0.;
	}

	float density = 0.;
	int step_num = 4;
//	float ray_step = (rays[1]-rays[0]) / float(step_num);
	float ray_step = 1.;
	for(int i = 0; i < step_num; i++)
	{
		vec3 p = pos - uLightRay * (float(i)+0.5) * ray_step;
		density += cloud_density(p, 3);
	}

	return exp(-density);
}
float PowderSugar(vec3 pos)
{
	float density = 0.;
	for(int i = 0; i < g_noise_kernel.length(); i++)
	{
		vec3 p = pos + g_noise_kernel[i]*0.5;
		float d = cloud_density(p, 3);
		density += d;
	}

	return 1.- exp(-density);
}

vec4 cloud(in vec3 rayPos, in vec3 rayDir, float depth)
{
	vec4 rays;
	int count = intersectRayAtomEx(uCamPos, uCamDir, u_cloud_inner.xyz, vec2(u_cloud_inner.w, u_cloud_outer.w), depth, rays);

	uint sampleCount = 32;
	float density = 0.;
	vec3 color = vec3(0.);
	for(int i = 0; i <count; i++)
	{
		float ray_step =  rays[i*2+1] / float(sampleCount);
		vec3 pos = uCamPos + uCamDir * (rays[i*2]+ray_step*0.5);
		for(int s = 0; s < sampleCount; s++)
		{
			vec3 p = pos + uCamDir * ray_step * float(s);
			float d = cloud_density(p, 5);
			density += d;
			if(d<0.01)
			{
				// 雲無い
				continue;
			}

			float light = light(pos);
			float lambert = BeerLambert(density);
			float powder = PowderSugar(pos)*0.2+0.8;
			float e = powder * lambert * g_cam_phase_factor;

			color += e * vec3(1., 1., 1.);
			float alpha = BeerLambert(density);
			if(alpha < 0.01) { break; }

		}
	}
	return vec4(color, min(1.-exp(-density), 1.));
}


vec3 getSkyColor(in vec3 ray)
{
	vec3 vSkyColor = mix(vec3(.0, 0.1, 0.4), vec3(0.3, 0.6, 0.8), 1.0 - ray.y);
	vSkyColor = mix(vSkyColor, uLightColor, smoothstep(0.999, 1.00, dot(-uLightRay, ray)));
	return vSkyColor;
}

void main()
{
	precompute();
	vec3 sky_color = getSkyColor(uCamDir);

	// 地面判定
	float distance_land = intersectRaySphere(uCamPos, uCamDir, u_planet);
	if(distance_land >= 0.)
	{
		// 地面に当たってる
		vec3 pos = uCamPos + uCamDir * distance_land;
		vec2 pos_i = floor(pos * 0.5).xz;
		float p = float(mod(pos_i.x + pos_i.y, 2.));
		sky_color = mix(vec3(.6, .6, .6), vec3(.75, .75, .75), p);

		// shadow
/*		if(true)
		{
			#define SHADOW_RAY_STEP 12
			#define SHADOW_RAY_LENGTH 5.
			float d1 = intersectRaySphere(pos, uLightRay, u_cloud_inner);
			float d2 = intersectRaySphere(pos, uLightRay, u_cloud_outer);
			int step_num = min(int((max(d2, 0.)-max(d1, 0.)) / float(SHADOW_RAY_LENGTH)), SHADOW_RAY_STEP);
			pos = pos + uLightRay * (d1 + SHADOW_RAY_LENGTH*0.5);
			vec3 ray = uLightRay/uLightRay.y;

			float transparent = 1.;
			for(int step = 0; step < step_num; step++)
			{
				float density = cloud_density(pos);

				float t = exp(-density * ABSORPTION);
				transparent *= t;
				if (transparent < 0.01) break;

				pos += ray * SHADOW_RAY_LENGTH; 
			}
			sky_color = mix(sky_color, vec3(0.), 1.-transparent);
		}
*/		
	}

	vec4 color = cloud(uCamPos, uCamDir, distance_land);

	color.xyz = mix(sky_color, color.xyz/(color.a+0.0001), color.a);
	imageStore(i_render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color.xyz, 1.));

}