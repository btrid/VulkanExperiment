#version 460
#extension GL_GOOGLE_include_directive : require

#define USE_RenderTarget 0
#include "applib/System.glsl"

layout(set=1, binding=0) uniform sampler3D _s_map;
layout(set=1, binding=1, r8ui) uniform uimage3D _i_map;
layout(set=1, binding=2) uniform sampler2D s_map;
layout(set=1, binding=3, rgba8ui) uniform uimage2D i_map;

layout (local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform Input
{
	float time;
} constant;

float band(in float start, in float peak, in float end, in float t)
{
	return smoothstep (start, peak, t) * (1. - smoothstep (peak, end, t));
}
float band2(in float ls, in float le, in float hs, in float he, in float t)
{
	return smoothstep (ls, le, t) * (1. - smoothstep (hs, he, t));
}

float rand(in vec3 co)
{
	return fract(sin(dot(co, vec3(12.98,78.23, 45.41))) * 43758.5);
}
float noise(in vec3 pos)
{
	vec3 ip = floor(pos);
	vec3 fp = smoothstep(0., 1., fract(pos));
	vec2 offset = vec2(0., 1.);
	vec4 a = vec4(rand(ip+offset.xxx),rand(ip+offset.yxx),rand(ip+offset.xyx),rand(ip+offset.yyx));
	vec4 b = vec4(rand(ip+offset.xxy),rand(ip+offset.yxy),rand(ip+offset.xyy),rand(ip+offset.yyy));
	a = mix(a, b, fp.z);
	a.xy = mix(a.xy, a.zw, fp.y);
	return mix(a.x, a.y, fp.x);
}

// https://thebookofshaders.com/13/?lan=jp
// 非整数ブラウン運動
float fBM(in vec3 pos, in int octaves)
{
	float lacunarity = 2.971;
	float total = 0.;
	float value = 0.;
	for(int i = 0; i < octaves; i++)
	{
		value = value*2. + noise(pos);
		total = total*2. + 1.;
		pos = pos * lacunarity;
	}

	return value / total;
}
void main()
{
	vec3 s = vec3(gl_GlobalInvocationID.xyz + vec3(constant.time*20., 0., 0.));
	float r = fBM(s * vec3(0.01) + vec3(97.15), 4);
	float g = fBM(s * vec3(0.01) + vec3(51.71), 4);
	float b = fBM(s * vec3(0.001) + vec3(57.79), 4);
	float a = fBM(s * vec3(0.01) + vec3(91.78), 4);


	r = r *smoothstep(0.5, 0.55, r);
	g = g *smoothstep(0., 0.75, g) * 0.75;
	b = b *smoothstep(0., 0.75, b) * 0.25;
//	g = g *0.75;
//	b = b *0.25; 

	imageStore(i_map, ivec2(gl_GlobalInvocationID.xy), uvec4(vec4(r, g, b, a)*255.));

}