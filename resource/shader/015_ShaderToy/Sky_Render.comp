#version 460
#extension GL_GOOGLE_include_directive : require

#include "Sky.glsl"

layout (local_size_x = 32, local_size_y = 32) in;
layout(push_constant) uniform Input
{
	vec3 window;
} constant;
float band(in float start, in float peak, in float end, in float t)
{
	return smoothstep (start, peak, t) * (1. - smoothstep (peak, end, t));
}
float intersectRaySphere(in vec3 origin, in vec3 ray, in vec4 sphere)
{
	vec3 relative_pos = sphere.xyz - origin;
	float tca = dot(relative_pos, ray);
//	if (tca < 0.) return -1.;

	float radiusSq = sphere.w * sphere.w;
	float d2 = dot(relative_pos, relative_pos) - tca * tca;
	if (d2 > radiusSq)
		return -1.;

	float thc = sqrt(radiusSq - d2);
	float t0 = tca - thc;
	float t1 = tca + thc;
	if (t0 < 0.) t0 = t1;
	return t0;
}

bool intersectRayAtom(vec3 Pos, vec3 Dir, vec3 AtomPos, vec2 Area, out vec4 OutDist)
{
	vec3 RelativePos = AtomPos - Pos;
	float tca = dot(RelativePos, Dir);

	vec2 RadiusSq = Area * Area;
	float d2 = dot(RelativePos, RelativePos) - tca * tca;

	OutDist = vec4(tca) + vec4(sqrt(RadiusSq.yxxy - d2)) * vec4(-1., -1., 1., 1.);
	return d2 <= RadiusSq.y;
}

float cloud_density(in vec3 pos)
{
	float t = (distance(pos,u_cloud_inner.xyz)-u_cloud_inner.w)*u_cloud_area_inv;
	if(t>= 1. || t <= 0.) { return 0.; }

	pos = vec3(pos.x, t, pos.z) * vec3(u_mapping, 1., u_mapping) + vec3(0.5, 0., 0.5);

#define USE_HORIZON_CLOUD
//#define USE_ARISE_CLOUD
#if defined(USE_HORIZON_CLOUD)
	vec4 map = texture(s_worleynoise_map, vec3(pos.xz, 0.));
	float noise  = texture(s_map, vec3(pos.x, t, pos.z)).x;
	float density = map.x*smoothstep(0.5, 0.55, map.x) * map.x * noise;
	return density;

#elif defined(USE_ARISE_CLOUD)
	vec4 map = texture(s_arise_map, pos.xz);
	float density = map.x * band(map.z, map.z+map.y*0.5, map.z+map.y*1., t);

	return density;
#else
	vec3 tex_size = vec3(textureSize(s_map, 0));
	pos = fract(pos + constant.window/tex_size);
	pos.y = t;

	float density = texture(s_map, pos).x;
//	float density_detail = texture(s_map, pos*vec3(10.1)+constant.window*0.3/tex_size + 40.).x;
	return density;
#endif
}

float cloud_lighting(in vec3 pos)
{
	float transparent = 1.;
	float ray_step = 4.;
	const int steps = 4;
	for (int i = 0; i < steps; i++) 
	{
		pos = pos + uLightRay * ray_step;
		float density = cloud_density(pos);

		transparent *= exp(-density * ABSORPTION * ray_step);
	}
	return transparent;
}

vec4 cloud(in vec3 rayPos, in vec3 rayDir, float depth)
{
	vec4 dist;
	if(!intersectRayAtom(rayPos, rayDir, u_cloud_inner.xyz, vec2(u_cloud_inner.w, u_cloud_outer.w), dist))
	{
		// 雲にヒットしない
		return vec4(0.);
	}
	

	int count = 0;
	vec2 ray_segment[2];
	if(dist.y>0.)
	{
		// 雲の上から雲を見る
		ray_segment[count] = vec2(max(dist.x, 0.), dist.y-max(dist.x, 0.));
		count++;
	}
	if(dist.w>0. && depth<0.)
	{
		// 雲の下から雲を見る
		ray_segment[count] = vec2(max(dist.z, 0.), dist.w-max(dist.z, 0.));
		count++;
	}
#define STEP_LENGTH	1.
	float transparent = 1.;
	float alpha = 0.;
	vec3 color = vec3(0.);
	for(int i = 0; i <count; i++)
	{
		int step_num = int(ray_segment[i].y / STEP_LENGTH);
		float ray_step = STEP_LENGTH;
		vec3 pos = rayPos + rayDir * (ray_segment[i].x+ray_step*0.5);
		for(int step = 0; step < step_num; step++)
		{
			float density = cloud_density(pos);

			float t = exp(-density * ABSORPTION * ray_step);
			transparent *= t;
			if (transparent < 0.01) { i = count; break; }

			color += transparent * density * cloud_lighting(pos) * ray_step;
			alpha += (1.-t) *(1.-alpha);

			pos = pos + rayDir * ray_step;

		}

	}
	return vec4(color, min(alpha, 1.));
}

void main()
{
	vec3 CamPos = vec3(0., 1., 0.);
	vec3 CamDir = normalize(vec3(1.5, 1.7, 1.5));
	// カメラレイの作成
	{
		uvec3 reso = gl_NumWorkGroups * gl_WorkGroupSize;
		vec2 ndc = (vec2(gl_GlobalInvocationID.xy) / vec2(reso.xy)) * 2. -1.;
		vec3 up = vec3(0., 1., 0.); 
		vec3 side = normalize(cross(CamDir, normalize(up)));
		up = normalize(cross(CamDir, side));

		float CamFov = (radians(45.0));
		vec2 aspect = vec2(float(reso.x) / float(reso.y), 1);
		CamDir = normalize(side*ndc.x + up*ndc.y + CamDir);
	}

	vec3 sky_color = mix(vec3(.0, 0.1, 0.4), vec3(0.3, 0.6, 0.8), 1.0 - CamDir.y);
	sky_color = mix(sky_color, uLightColor, smoothstep(0.999, 1.00, dot(uLightRay, CamDir)));


	// 地面判定
	float distance_land = intersectRaySphere(CamPos, CamDir, u_planet);
	if(distance_land >= 0.)
	{
		// 地面に当たってる
		vec3 pos = CamPos + CamDir * distance_land;
		vec2 pos_i = floor(pos * 0.5).xz;
		float p = float(mod(pos_i.x + pos_i.y, 2.));
		sky_color = mix(vec3(.6, .6, .6), vec3(.75, .75, .75), p);

		// shadow
/*		if(true)
		{
			#define SHADOW_RAY_STEP 12
			#define SHADOW_RAY_LENGTH 5.
			float d1 = intersectRaySphere(pos, uLightRay, u_cloud_inner);
			float d2 = intersectRaySphere(pos, uLightRay, u_cloud_outer);
			int step_num = min(int((max(d2, 0.)-max(d1, 0.)) / float(SHADOW_RAY_LENGTH)), SHADOW_RAY_STEP);
			pos = pos + uLightRay * (d1 + SHADOW_RAY_LENGTH*0.5);
			vec3 ray = uLightRay/uLightRay.y;

			float transparent = 1.;
			for(int step = 0; step < step_num; step++)
			{
				float density = cloud_density(pos);

				float t = exp(-density * ABSORPTION);
				transparent *= t;
				if (transparent < 0.01) break;

				pos += ray * SHADOW_RAY_LENGTH; 
			}
			sky_color = mix(sky_color, vec3(0.), 1.-transparent);
		}
*/		
	}

	vec4 color = cloud(CamPos, CamDir, distance_land);

	color.xyz = mix(sky_color, color.xyz/(color.a+0.0001), color.a);

	imageStore(i_render_map, ivec2(gl_GlobalInvocationID.xy), vec4(color.xyz, 1.));

}