// https://www.gamedev.net/forums/topic/680832-horizonzero-dawn-cloud-system/?page=6

#version 460
#extension GL_GOOGLE_include_directive : require

#include "Sky.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

const float g_bayer_matrix[]={0.,8.,2.,10.,12.,4.,14.,6.,3.,11.,1.,9.,15.,7.,13.,5.};
float g_phase_factor;
vec3 g_light_up;
vec3 g_light_side;
vec3 uCamPos;
vec3 uCamDir;
void precompute()
{
	uCamPos = vec3(0., 1., 0.);

	// カメラレイの作成
	{
		float s = sin(constant.window.x*0.4);
		float c = cos(constant.window.x*0.4);
		vec3 CamDir = normalize(vec3(s, 0.5, c));

//		uCamPos = vec3(400.);
//		CamDir = normalize(-uCamPos - vec3(0., 500., 0.));

		uvec3 reso = gl_NumWorkGroups * gl_WorkGroupSize;
		vec2 ndc = (vec2(gl_GlobalInvocationID.xy) / vec2(reso.xy)) * 2. -1.;
		vec3 up = vec3(0., 1., 0.);
		vec3 side = normalize(cross(CamDir, normalize(up)));
		side = dot(side, side) < 0.000001 ? vec3(1., 0., 0.) : normalize(side);
		up = normalize(cross(CamDir, side));

		float CamFov = (radians(45.0));
		vec2 aspect = vec2(float(reso.x) / float(reso.y), 1);
		uCamDir = normalize(side*ndc.x + up*ndc.y + CamDir);


	}

	{
//		uLightRay = normalize(vec3(s, c, 0.1));
//		uLightRay = normalize(vec3(0., -1., 12));

		g_light_up = vec3(0., 0., 1.); 
		g_light_side = cross(g_light_up, uLightRay);
		g_light_side = dot(g_light_side, g_light_side) < 0.00001 ? vec3(0., 1., 0.) : normalize(g_light_side);
		g_light_up = normalize(cross(uLightRay, g_light_side));

	}

	g_phase_factor = henyeyGreenstein(dot(-uLightRay, uCamDir), 0.5);
}

float light(in vec3 pos)
{

	vec4 rays;
	if(intersectRayAtomEx(pos, -uLightRay, u_planet.m_pos, u_planet.m_cloud_area.xx, -1., rays) != 0)
	{
		// 星の影
		return 0.;
	}
#if 1

	int count = intersectRayAtomEx(pos, uLightRay, u_planet.m_pos, u_planet.m_cloud_area, -1, rays);
	float a = rays[1]-rays[0];

	count = intersectRayAtomEx(pos, -uLightRay, u_planet.m_pos, u_planet.m_cloud_area, -1, rays);
	float b = rays[1]-rays[0];
	float t = rays[1] / (a+b);

	vec3 p = pos - u_planet.m_pos;
	
	vec3 uv = vec3(dot(p, g_light_side), dot(p, g_light_up), t) / vec3(u_planet.m_cloud_area.yy, 1.) * vec3(0.5, 0.5, 1.) + vec3(0.5, 0.5, 0.);

	return texture(s_shadow_map, uv).x * g_phase_factor;

#else

	int count = intersectRayAtomEx(pos, -uLightRay, u_planet.m_pos.xyz, u_planet.m_cloud_area, -1., rays);

	float density = 0.;
	for(int i = 0; i <count; i++)
	{
		int step_num = 32;
		float ray_step = (rays[2*i+1]-rays[2*i]) / float(step_num);
		vec3 p = pos -uLightRay * (rays[2*i]+ray_step*0.5);
		for(int s = 0; s < step_num; s++)
		{
			float height_frac = heightFraction(p);
			vec3 weather_data = sampleWeather(p);
			float d = cloud_density(p, weather_data, height_frac, 0., true);

			density = density + d*getPrecipitation(weather_data) * ray_step;
			p = p - uLightRay * ray_step;
		}
		break;

	}

	return exp(-density) * g_phase_factor;
#endif
}

const vec3 f = vec3(0., -1., 0.);
const vec3 u = vec3(0., 0., 1.); 
const vec3 s = vec3(1., 0., 0.);

vec4 rand4(in vec3 co)
{
	vec4 value;
	value.x = dot(co.xyz, vec3(12.98, 25.23, 45.41));
	value.y = dot(co.yzx, vec3(32.89, 19.31, 29.11));
	value.z = dot(co.zxy, vec3(29.55, 13.94, 31.45));
	value.w = dot(co.yxz, vec3(65.14, 33.57, 12.12));

	return fract(sin(value * vec4(21.55, 78.23, 45.41, 31.37)) * 43.57);
}

float inscattering(vec3 pos, float ray_step)
{

	if(mod(constant.window.x, 1.)>0.7)
	{ 
//		return 1.;
	}
#if 0

	vec4 rays;
	intersectRayAtomEx(pos, uLightRay, u_planet.m_pos, u_planet.m_cloud_area, -1, rays);
	float a = rays[1]-rays[0];

	intersectRayAtomEx(pos, -uLightRay, u_planet.m_pos, u_planet.m_cloud_area, -1, rays);
	float b = rays[1]-rays[0];
	float t = rays[1] / (a+b);


	vec3 p = pos - u_planet.m_pos;
	vec3 uv = vec3(dot(p, g_light_side), dot(p, g_light_up), t) / vec3(u_planet.m_cloud_area.yy, 1) * vec3(0.5, 0.5, 1.) + vec3(0.5, 0.5, 0.);

	return 1.-texture(s_along_density_map, uv).x;
#else

	ivec2 index = ivec2(gl_GlobalInvocationID.xy) % 4;
	float angle = g_bayer_matrix[index.x+index.y*4]/float(g_bayer_matrix.length());

	vec3 front = normalize(vec3(cos(angle), 0., sin(angle)));
//	front = mod(constant.window.x, 1.)>0.7?uCamDir:front;

	vec3 up = vec3(0., 1., 0.);
	vec3 side = cross(front, normalize(up));
	side = dot(side, side) < 0.000001 ? vec3(1., 0., 0.) : normalize(side);
	up = normalize(cross(side, front));


	ray_step *= constant.inscattering_sampling_offset;
	const int grid = 2;
	float density = 0.;
	for(int z=-grid; z<=grid; z++)
	for(int y=-grid; y<=grid; y++)
	for(int x=-grid; x<=grid; x++)
	{
		vec3 offset = front*(float(z)) + side*float(x) + up*float(y);
		vec3 p = pos + offset * ray_step;

		float height_frac = heightFraction(p);
		vec3 weather_data = sampleWeather(p);
		float d = cloud_density(p, weather_data, height_frac, 0., true);
//		d=d<=0.?0.:1.;
		density+=d;

	}
	float wight = 2./float((grid*2+1)*(grid*2+1)*(grid*2+1));
	return (1.-exp(-density*wight))*constant.inscattering_rate+(1.-constant.inscattering_rate);
//	return (1.-exp(-density*0.001));

#endif
}


vec4 cloud(float depth)
{
	ivec2 index = ivec2(gl_GlobalInvocationID.xy) % 4;
	float begin_offset = (g_bayer_matrix[index.x+index.y*4]/float(g_bayer_matrix.length()));
//	begin_offset = mod(constant.window.x, 1.)>0.7 ? begin_offset:0.5;

	vec4 rays;
	int count = intersectRayAtomEx(uCamPos, uCamDir, u_planet.m_pos, u_planet.m_cloud_area, depth, rays);

	uint sampleCount = 128;
	float transmittance = 1.;
	vec3 color = vec3(0.);
	int surface = -1;
	for(int i = 0; i <count; i++)
	{

		float ray_step = (rays[i*2+1] - rays[i*2]) / float(sampleCount);
		vec3 begin = uCamPos + uCamDir * (rays[i*2]+ray_step*begin_offset);
		for(int s=0; s<sampleCount; s++)
		{
			vec3 pos = begin + uCamDir * ray_step * float(s);
			float height_frac = heightFraction(pos);
			vec3 weather_data = sampleWeather(pos);
			float d = cloud_density(pos, weather_data, height_frac, 0., true);
			if(d<=0.){ continue; }
			if(surface<0){ surface = s;}

			float light = light(pos);
			float e = 1.* light * d * transmittance;

			color += e * vec3(1., 1., 1.) * ray_step;

			transmittance *= exp(-d*getPrecipitation(weather_data)*ray_step);
			if(transmittance < 0.01) { break; }

		}

		if(surface>=0)
		{
			vec3 pos = begin + uCamDir * ray_step * float(surface);
			float powder = inscattering(pos, ray_step);
			color *= powder;
//			color = vec3(powder); transmittance=0.;
		}
	}
	return vec4(color, clamp(1.-transmittance, 0., 1.));
}
void main()
{
	precompute();

	// 空色
	vec3 background_color = mix(vec3(0.3, 0.6, 0.9), vec3(0.4, 0.7, 1.5), 1.0 - uCamDir.y);
	background_color = mix(background_color, uLightColor, smoothstep(0.9999, 1.00, dot(-uLightRay, uCamDir)));

	// 地面判定
	float distance_land = intersectRaySphere(uCamPos, uCamDir, vec4(u_planet.m_pos, u_planet.m_radius));
	if(distance_land >= 0.)
	{
		// 地面に当たってる
		vec3 pos = uCamPos + uCamDir * distance_land;
		vec2 pos_i = floor(pos * 0.5).xz;
		float p = float(mod(pos_i.x + pos_i.y, 2.));
		background_color = mix(vec3(.6, .6, .6), vec3(.75, .75, .75), p);
	}

	vec4 color = cloud(distance_land);
//	vec4 color = powder_test(distance_land);

	background_color = mix(background_color, color.xyz/(color.w+0.0001), color.w);

	// tonemapping
	{
		float exposure = 1.5;
		background_color.xyz = vec3(1.0) - exp(-exposure * background_color.xyz);
	}

	imageStore(i_render_map, ivec2(gl_GlobalInvocationID.xy), vec4(background_color.xyz, 1.));


}