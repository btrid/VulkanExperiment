#version 450

//#pragma optionNV (unroll none)
#pragma optionNV (inline all)
//#pragma optionNV(fastmath on)
//#pragma optionNV(strict on)

#extension GL_GOOGLE_cpp_style_line_directive : require
#include </Common.glsl>

#define SETPOINT_PARTICLE 0
#include </Particle.glsl>

#define SETPOINT_MAP 1
#include </Map.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;

layout(push_constant) uniform UpdateConstantBlock{
	float m_deltatime;
	uint m_double_buffer_dst_index;
} constant;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_particle_info.m_particle_max_num){
		return;
	}

	uint src_offset = (1-constant.m_double_buffer_dst_index)*u_particle_info.m_particle_max_num;
	ParticleData p = b_particle[src_offset + index];
	b_particle[src_offset + index].m_life = -1.;
	p.m_life -= constant.m_deltatime;
	if(p.m_life <= 0.){
		return;
	}

	ParticleUpdateParameter updater = b_particle_update_param[p.m_type];
	vec4 old_pos = p.m_position;
	p.m_velocity += updater.m_velocity_add*constant.m_deltatime;
	p.m_velocity *= pow(updater.m_velocity_mul, vec4(1.+constant.m_deltatime));
	p.m_position += p.m_velocity*constant.m_deltatime;

	uint dst_index = atomicAdd(b_draw_cmd.instanceCount, 1);
	uint dst_offset = (constant.m_double_buffer_dst_index)*u_particle_info.m_particle_max_num;
	b_particle[dst_offset + dst_index] = p;
}