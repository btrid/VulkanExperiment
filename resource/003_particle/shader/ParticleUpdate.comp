#version 450

//#pragma optionNV (unroll none)
#pragma optionNV (inline all)
//#pragma optionNV(fastmath on)
//#pragma optionNV(strict on)

#extension GL_GOOGLE_cpp_style_line_directive : require
#include </Particle.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;

layout(std140, set=0, binding=0) uniform ParticleInfoUniform {
	ParticleInfo u_particle_info;
};

layout(std430, set=0, binding=1) restrict buffer ParticleDataBuffer {
	ParticleData b_particle[];
};
layout(std430, set=0, binding=2) restrict buffer CounterBuffer {
	DrawIndirectCommand b_draw_cmd;
};

struct MapInfo
{
	vec3 cell_size;
};
layout(set=1, binding=0, r8ui) uniform readonly uimage2D t_map;
layout(std140, set=1, binding=1) uniform MapInfoUniform {
	MapInfo u_map_info;
};


layout(push_constant) uniform UpdateConstantBlock
{
	float m_deltatime;
	uint m_src_offset;
	uint m_dst_offset;
} constant;

#define FLT_EPSIRON (0.001)
ivec3 marchDistance(inout vec3 pos, inout float progress, in vec3 dir, in vec3 cell_size)
{
	vec3 p = mod(pos, cell_size);
	float x = dir.x < 0. ? p.x : (cell_size.x- p.x);
	float z = dir.z < 0. ? p.z : (cell_size.z- p.z);
	vec3 dist = vec3(99.);
#if 1
	// 0除算回避版。不要？
	dist.x = abs(dir.x) < FLT_EPSIRON ? 99.9 : abs(x / dir.x);
	dist.z = abs(dir.z) < FLT_EPSIRON ? 99.9 : abs(z / dir.z);
#else
	dist = abs(vec3(x, y, z) / dir);
#endif

	float rate = min(dist.x, dist.z);
	vec3 prog = dir * rate;
	float progLength = length(dir * rate);
	float minProgLength = min(progLength, progress);
	ivec3 next = ivec3(0);
	progress -= minProgLength;
	if(progress > FLT_EPSIRON)
	{
		if(dist.x < dist.z){
			next.x = dir.x < 0. ? -1 : 1;
		}
		else
		{
			next.z = dir.z < 0. ? -1 : 1;
		}
	}

	prog = prog * (minProgLength / progLength);
	pos += prog + vec3(next)*FLT_EPSIRON; // ちょっとずれちゃうけど・・・
	return next;
}

#if 0
ivec3 calcMapIndex(in vec3 pos, in float size, in vec3 cell_size)
{

}
#endif
void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_particle_info.m_max_num){
		return;
	}

	ParticleData p = b_particle[constant.m_src_offset + index];
	b_particle[constant.m_src_offset + index].m_life = -1.;
	p.m_life -= constant.m_deltatime;
	if(p.m_life <= 0.){
		return;
	}
#if 0
	p.m_pos.xyz += p.m_vel.xyz * p.m_vel.w * constant.m_deltatime;
#else
	MapInfo map_info = u_map_info;
	float progress = p.m_vel.w * constant.m_deltatime;
	vec3 cell_size = map_info.cell_size;
//	float particle_size = p.m_pos.w*0.5; 
	float particle_size = 0.; 

//	ivec3 map_index = ivec3(p.m_pos.xyz / u_map_info.cell_size);
//	{
//		vec3 cell_p = mod(p.m_pos.xyz, map_info.cell_size);
//		map_index.x = (cell_p.x <= particle_size) ? map_index.x - 1 : (cell_p.x >= (cell_size.x - particle_size)) ? map_index.x + 1 : map_index.x;
//		map_index.z = (cell_p.z <= particle_size) ? map_index.z - 1 : (cell_p.z >= (cell_size.z - particle_size)) ? map_index.z + 1 : map_index.z;
//	}
	ivec3 map_index = p.m_map_index.xyz;
	for(;;)
	{

		vec3 dir = p.m_vel.xyz;
		ivec3 prev_index = map_index;

		vec3 cell_origin = map_index*cell_size;
		vec3 cell_p = p.m_pos.xyz - cell_origin;
//		vec3 cell_p = mod(p.m_pos.xyz, map_info.cell_size);
		float x = dir.x < 0. ? cell_p.x : (map_info.cell_size.x- cell_p.x);
		float z = dir.z < 0. ? cell_p.z : (map_info.cell_size.z- cell_p.z);
		x = (x <= particle_size ? cell_size.x + x : x) - particle_size;
		z = (z <= particle_size ? cell_size.z + z : z) - particle_size;

		vec3 dist = vec3(99.);
		dist.x = abs(dir.x) < FLT_EPSIRON ? 99.9 : abs(x / dir.x);
		dist.z = abs(dir.z) < FLT_EPSIRON ? 99.9 : abs(z / dir.z);
		float rate = min(dist.x, dist.z);
		rate = abs(dir.x) < FLT_EPSIRON ? dist.z : rate;
		rate = abs(dir.z) < FLT_EPSIRON ? dist.x : rate;

		vec3 prog = dir * rate;
		float progLength = length(dir * rate);
		if(progress < progLength)
		{
			// 移動完了
			p.m_pos.xyz += dir * progress;
			p.m_pos.xyz = clamp(p.m_pos.xyz, (map_index * cell_size)+particle_size+0.01, (map_index+ivec3(1, 0, 1)) * cell_size-particle_size-0.01);
			break;
		}
		progress -= progLength;

		ivec3 next = ivec3(0);
		if(dist.x < dist.z){
			next.x = dir.x < 0. ? -1 : 1;
		}
		else
		{
			next.z = dir.z < 0. ? -1 : 1;
		}

		vec3 next_pos = p.m_pos.xyz + prog + vec3(next);
		uint map = imageLoad(t_map, (map_index + next).xz ).x;
		if(map == 1) 
		{
			vec3 wall = vec3(next);
			p.m_vel.xyz = reflect(p.m_vel.xyz, wall);
		}else{
			map_index += next;
		}
		p.m_pos.xyz = next_pos;
		p.m_pos.xyz = clamp(p.m_pos.xyz, (map_index * cell_size)+particle_size+0.01, (map_index+ivec3(1, 0, 1)) * cell_size-particle_size-0.01);
	}
#endif
	uint dst_index = atomicAdd(b_draw_cmd.vertexCount, 1);
	p.m_map_index.xyz = map_index;
	b_particle[constant.m_dst_offset + dst_index] = p;
}