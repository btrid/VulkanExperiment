#version 450

#extension GL_GOOGLE_cpp_style_line_directive : require
#include </Common.glsl>

#define USE_PARTICLE 0
#include </Particle.glsl>

#define USE_SYSTEM 1
#include <applib/System.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;


mat3 eulerAngleXYZ(in vec3 euler)
{
	vec3 c = cos(-euler);
	vec3 s = sin(-euler);
	
	mat3 Result = mat3(1.);
	Result[0][0] = c.y * c.z;
	Result[0][1] =-c.x * s.z + s.x * s.y * c.z;
	Result[0][2] = s.x * s.z + c.x * s.y * c.z;
	Result[1][0] = c.y * s.z;
	Result[1][1] = c.x * c.z + s.x * s.y * s.z;
	Result[1][2] =-s.x * c.z + c.x * s.y * s.z;
	Result[2][0] =-s.y;
	Result[2][1] = s.x * c.y;
	Result[2][2] = c.x * c.y;
	return Result;
}


shared ParticleGenerateCommand s_cmd;
void main()
{
	uint local_index = gl_LocalInvocationID.x;
	if(local_index == 0)
	{
		s_cmd = b_particle_generate_cmd[gl_WorkGroupID.x];
	}
	barrier();
	memoryBarrierShared();

	if(local_index >= s_cmd.m_generate_num)
	{
		return;
	}
	
	uint dst_index = atomicAdd(b_draw_cmd.instanceCount, 1);
	vec4 rand01 =  rand4(vec2(gl_GlobalInvocationID.x*dst_index, dst_index+local_index));
	vec4 rand11 = rand01*2.-1.;
	vec4 position = s_cmd.m_position.m_value + s_cmd.m_position.m_value_rand*rand11.xyzw;
	vec4 direction = s_cmd.m_direction.m_value + s_cmd.m_direction.m_value_rand*rand11.yzxw;
	vec4 rotate = s_cmd.m_rotate.m_value + s_cmd.m_rotate.m_value_rand*rand11.wxyz;
	vec4 scale = s_cmd.m_scale.m_value + s_cmd.m_scale.m_value_rand*rand11.ywxz;
	vec4 color = s_cmd.m_color.m_value + s_cmd.m_color.m_value_rand*rand11.zxyw;
	ParticleData p;
	p.m_position = position;
	p.m_velocity.xyz = normalize(direction.xyz)*direction.w;
	p.m_velocity.w= 0.;
	p.m_rotate = rotate;
	p.m_scale = scale;
	p.m_color = color;
	p.m_life = s_cmd.m_life.x + s_cmd.m_life.y*rand11.x;
	p.m_type = s_cmd.m_type;

	dst_index = min(u_particle_info.m_particle_max_num, dst_index);
	uint dst_offset = (1-u_system_data.m_gpu_index)*u_particle_info.m_particle_max_num;
	b_particle[dst_offset + dst_index] = p;

}