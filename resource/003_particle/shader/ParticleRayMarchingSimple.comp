#version 450

#pragma optionNV (unroll none)
#pragma optionNV (inline all)
#pragma optionNV(fastmath on)
#pragma optionNV(strict on)

#extension GL_GOOGLE_cpp_style_line_directive : require
#include </Particle.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;

layout(std140, set=0, binding=0) uniform ParticleInfoUniform {
	ParticleInfo u_particle_info;
};

layout(std430, set=0, binding=1) restrict buffer ParticleDataBuffer {
	ParticleData b_particle[];
};
layout(std430, set=0, binding=2) restrict buffer CounterBuffer {
	DrawIndirectCommand b_draw_cmd;
};

struct MapInfo
{
	vec3 cell_size;
};
layout(set=1, binding=0, r8ui) uniform readonly uimage2D t_map;
layout(std140, set=1, binding=1) uniform MapInfoUniform {
	MapInfo u_map_info;
};


layout(push_constant) uniform UpdateConstantBlock
{
	float m_deltatime;
	uint m_src_offset;
	uint m_dst_offset;
} constant;

#define FLT_EPSIRON (0.0001)
ivec3 marchDistance(inout vec3 pos, inout float progress, in vec3 dir, in vec3 cell_size)
{
//	vec3 cellOrigin = cell * cell_size + /*param.areaMin*/ vec3(0.);
	vec3 p = fmod(pos, cell_size);
	float x = dir.x < 0. ? p.x : (cell_size.x- p.x);
	float y = dir.y < 0. ? p.y : (cell_size.y- p.y);
	float z = dir.z < 0. ? p.z : (cell_size.z- p.z);
	vec3 dist = vec3(0.);
#if 0
	// 0除算回避版。不要？
	dist.x = abs(dir.x) < 0.0001 ? 9999.9 : abs(x / dir.x);
	dist.y = abs(dir.y) < 0.0001 ? 9999.9 : abs(y / dir.y);
	dist.z = abs(dir.z) < 0.0001 ? 9999.9 : abs(z / dir.z);
#else
	dist = abs(vec3(x, y, z) / dir);
#endif

	float rate = min(min(dist.x, dist.y), dist.z);
	ivec3 next = ivec3(0);
	if(progress >= rate)
	{
		if(dist.x < dist.y && dist.x < dist.z){
			next.x = dir.x < 0. ? -1 : 1;
		}else if(dist.y < dist.z){
			next.y = dir.y < 0. ? -1 : 1;
		}else{
			next.z = dir.z < 0. ? -1 : 1;
		}
	}
	progress -= min(rate, progress);
	pos += dir * rate + vec3(next)*FLT_EPSIRON; // ちょっとずれちゃうけど・・・
	return next;
}

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_particle_info.m_max_num){
		return;
	}

	ParticleData p = b_particle[constant.m_src_offset + index];
	b_particle[constant.m_src_offset + index].m_life = -1.;
	p.m_life -= constant.m_deltatime;
	if(p.m_life <= 0.){
		return;
	}
	float progress = p.m_vel.w * constant.m_deltatime;
	ivec3 map_index = ivec3(p / u_map_info.cell_size);
	MapInfo map_info = u_map_info;
	for(;;)
	{
		ivec3 prev_index = map_index;
		map_index = marchDistance(p.pos.xyz, progress, p.vel.xyz, map_info.cell_size);
		if(progress < FLT_EPSIRON) {
			break;
		}
		uint map = imageLoad(t_map, map_index.xz).x;
		if(map == 1) {
			vec3 wall = vec3(map_index - prev_index);
			p.vel.xyz = refrect(p.vel.xyz, wall);
		}
	}

	uint dst_index = atomicAdd(b_draw_cmd.vertexCount, 1);
	b_particle[constant.m_dst_offset + dst_index] = p;
}