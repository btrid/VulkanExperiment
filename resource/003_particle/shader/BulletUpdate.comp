#version 450

//#pragma optionNV (unroll none)
#pragma optionNV (inline all)
//#pragma optionNV(fastmath on)
//#pragma optionNV(strict on)

#extension GL_GOOGLE_cpp_style_line_directive : require

#define SETPOINT_BULLET 0
#include </Common.glsl>
#include </Bullet.glsl>

layout (local_size_x = 1024, local_size_y = 1) in;


layout(set=1, binding=0, r8ui) uniform readonly uimage2D t_map;
layout(std140, set=1, binding=1) uniform MapInfoUniform {
	MapInfo u_map_info;
};


layout(push_constant) uniform UpdateConstantBlock
{
	float m_deltatime;
	uint m_src_offset;
	uint m_dst_offset;
	uint m_emit_num;
} constant;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= u_bullet_info.m_max_num){
		return;
	}

	BulletData p = b_bullet[constant.m_src_offset + index];
	b_bullet[constant.m_src_offset + index].m_life = -1.;
	p.m_life -= constant.m_deltatime;
	if(p.m_life <= 0.){
		return;
	}
	MapInfo map_info = u_map_info;
	float progress = p.m_vel.w * constant.m_deltatime;
	vec3 cell_size = map_info.cell_size.xyz;
	float bullet_size = 0.00;

	ivec3 map_index = p.m_map_index.xyz;
	for(;;)
	{
		vec3 dir = p.m_vel.xyz;
		ivec3 prev_index = map_index;

		vec3 cell_origin = map_index*cell_size;
		vec3 cell_p = p.m_pos.xyz - cell_origin;
		float x = dir.x < 0. ? cell_p.x : (map_info.cell_size.x- cell_p.x);
		float z = dir.z < 0. ? cell_p.z : (map_info.cell_size.z- cell_p.z);
//		x = (x <= bullet_size ? cell_size.x + x : x) - bullet_size;
//		z = (z <= bullet_size ? cell_size.z + z : z) - bullet_size;

		vec3 dist = vec3(99.);
		dist.x = abs(dir.x) < FLT_EPSIRON ? 99.9 : abs(x / dir.x);
		dist.z = abs(dir.z) < FLT_EPSIRON ? 99.9 : abs(z / dir.z);
		float rate = min(dist.x, dist.z);
		rate = abs(dir.x) < FLT_EPSIRON ? dist.z : rate;
		rate = abs(dir.z) < FLT_EPSIRON ? dist.x : rate;

		vec3 prog = dir * rate;
		float progLength = length(dir * rate);
		if(progress < progLength)
		{
			// 移動完了
			p.m_pos.xyz += dir * progress;
			break;
		}
		progress -= progLength;

		ivec3 next = ivec3(0);
		if(dist.x < dist.z){
			next.x = dir.x < 0. ? -1 : 1;
		}
		else
		{
			next.z = dir.z < 0. ? -1 : 1;
		}

		vec3 next_pos = p.m_pos.xyz + prog + vec3(next)*FLT_EPSIRON;
		uint map = imageLoad(t_map, (map_index + next).xz ).x;
		if(map == 1) 
		{
			// 壁にぶつかったので押し戻す
//			next_pos = p.m_pos.xyz + prog - vec3(next)*FLT_EPSIRON;

			vec3 wall = vec3(next);
			p.m_vel.xyz = reflect(p.m_vel.xyz, wall);
		}else{
			map_index += next;
		}
		p.m_pos.xyz = next_pos;
	}
	uint dst_index = atomicAdd(b_draw_cmd.vertexCount, 1);
	p.m_map_index.xyz = map_index;
	b_bullet[constant.m_dst_offset + dst_index] = p;
}